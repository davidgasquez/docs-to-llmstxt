evidence/sites/docs/pages/+layout.svelte
---
<script>
	import '@evidence-dev/tailwind/fonts.css';
	import '../app.css';
	import { EvidenceDefaultLayout } from '@evidence-dev/core-components';
	import EditInGitHub from '../components/EditInGitHub.svelte';
	export let data;
</script>

<head>
	<script async defer src="https://scripts.simpleanalyticscdn.com/latest.js"></script>
</head>

<EvidenceDefaultLayout
	{data}
	githubRepo="https://github.com/evidence-dev/evidence"
	slackCommunity="https://slack.evidence.dev"
	xProfile="https://twitter.com/evidence_dev"
	blueskyProfile="https://bsky.app/profile/evidence.dev"
	builtWithEvidence
	algolia={{
		apiKey: '45d995e97069b6fbee526a93a6c84af8',
		appId: 'KHH9ANIISC',
		indexName: 'docs-evidence'
	}}
>
	<slot slot="content" />
</EvidenceDefaultLayout>

<EditInGitHub />


---
evidence/sites/docs/pages/index.md
---
---
sidebar_position: 1
title: What is Evidence? | Evidence Docs
description: Evidence is an open source framework for building data products with SQL - things like reports, decision-support tools, and customer-facing/embedded reporting. It's a code-driven alternative to drag-and-drop BI tools.
hide_title: true
og:
  image: /img/how-it-works.png
---

# What is Evidence?

Evidence is an open source framework for building data products with SQL - things like reports, decision-support tools, and embedded dashboards. It's a code-driven alternative to drag-and-drop BI tools.

This docs site is an Evidence app.

Install Evidence with the [VSCode Extension](vscode:extension/Evidence.evidence-vscode), or see other [installation options](/install-evidence).

## How does Evidence work?

<img src='/img/how-it-works.png' width="800px"/>

Evidence renders a BI website from markdown files:

1. [Data sources](/core-concepts/data-sources) can include data warehouses, flat files and non-SQL data sources
1. [SQL statements](/core-concepts/queries) inside markdown files run queries against data sources
1. [Charts and components](/core-concepts/components) are rendered using these query results
1. [Templated pages](/core-concepts/templated-pages) generate many pages from a single markdown template
1. [Loops](/core-concepts/loops) and [If / Else](/core-concepts/if-else) statements allow control of what is displayed to users

## Pre-requisites

To use Evidence you need to know SQL. A knowledge of [basic markdown syntax](/reference/markdown) is also helpful.

## Getting help

If you're trying out Evidence, and need some support we'd love to hear from you.

- Message us on <a href='https://slack.evidence.dev' target="_blank">Slack</a>
- Open an issue on <a href='https://github.com/evidence-dev/evidence' target="_blank">Github</a>
- See all the <a href="https://docs.evidence.dev/components/all-components" target="_blank">charts and components</a>.

If there's **anything** you find difficult in the docs, please [open an issue](https://github.com/evidence-dev/evidence/issues/new/choose) or reach out to us on Slack.


---
evidence/sites/docs/pages/guides/index.md
---
---
sidebar_position: 6
sidebar_link: false
---

---
evidence/sites/docs/pages/guides/system-requirements/index.md
---
---
title: System Requirements
sidebar_position: 5
description: Evidence requires Node.js, NPM, and Git
---

Evidence requires Node.js ≥18.13, 20 or 22, and NPM 7 or above.   

Check your versions with `node -v` and `npm -v`

**Note:** if you are installing NodeJS for the first time, be sure to install the LTS version.

<LinkButton url="https://nodejs.org/en/download">Download Node.js + NPM (LTS version)</LinkButton>

### Updating

Update to the latest npm version with `npm install -g npm@latest`

## Git

Evidence requires git. If you do not already have git installed, you can follow the [instructions here.](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)

We also recommend signing up for [GitHub](https://github.com)



---
evidence/sites/docs/pages/guides/chart-cheat-sheet/index.md
---
---
title: Chart Cheat Sheet
sidebar_position: 3
description: A quick reference to the elements of an Evidence Chart.
---

## Chart Elements

![chart-elements-one](/img/chart-elements-one.png)

#### Horizontal Chart (`swapXY=true`)

![chart-elements-two](/img/chart-elements-two.png)


---
evidence/sites/docs/pages/guides/troubleshooting/index.md
---
---
title: Troubleshooting
sidebar_position: 2
description: Join the Evidence Slack Community for troubleshooting and support
---

<Alert status=warning>

**Running into Problems?**
- Join the [Evidence Community](https://slack.evidence.dev) to get help with issues and discuss feature ideas.
- Check out the list of [open issues in our GitHub Repo](https://github.com/evidence-dev/evidence/issues)
- If you have a specific question and cannot go through Slack or GitHub, please email <support@evidence.dev>

</Alert>

## Checking Version Numbers
```sql commands
select '<code>npm view @evidence-dev/evidence version</code>' as "Command", 'Check Evidence version' as "Description" UNION ALL
select '<code>node -v</code>' as "Command", 'Check NodeJS version' as "Description"
```

Run these commands in your terminal to see which versions your app is using

<DataTable data={commands} formatColumnTitles=false>
    <Column id="Description" wrap/>
    <Column id="Command" wrap contentType=html/>
</DataTable>

# Common Issues

## Installation

### Not able to run `npm install`
This is often related to the version of NodeJS your app is using. See [system requirements](/guides/system-requirements) for more information

### Installation taking a long time
On Windows, the initial installation can take up to a few minutes. If it has been longer than 10 minutes and your app hasn't started, [reach out in the Slack community for help](https://slack.evidence.dev)


## Data Sources

### Data is not available for querying
Ensure that you've done the following:
- Add `.sql` files to your `sources/my-source` directory to define which data to bring into Evidence (does not apply to the CSV connector, which does not require `.sql` files)
- Run `npm run sources` to load the data

To check whether your data has been successfully loaded into your app, go to the `/explore/schema` page to see which data is in your app.

### Failure in `npm run sources` 
If you're having problems loading data with `npm run sources`, try using `npm run sources -- --debug` to display additional logs

## Page Loading
If you are running into a problem on your page, but are not seeing a clear error message, try looking in your browser console to see if there is additional information available.

To open your browser console:
- Right click anywhere on your page
- Click "Inspect" - the browser dev tools pane should open
- Click the "Console" tab - this will display warnings and errors generated by your page

This is helpful information to provide when asking questions in slack or creating issues on Github.

## Deployment
If you have issues when building or deploying your app, try running `npm run build` locally to see if the behaviour is the same as in your deployment environment.

If the build works locally, but not in your deployment environment, check that the NodeJS version used in your deployment environment fits within the [system requirements](/guides/system-requirements).


# Known Issues

See [our open Github issues](https://github.com/evidence-dev/evidence/issues) for a full list of known issues

---
evidence/sites/docs/pages/guides/usql-migration-guide/index.md
---
---
title: Universal SQL Migration Guide
sidebar_position: 3
description: Migrate your < v24 Evidence app to Universal SQL (v24+)
---

Universal SQL is Evidence's latest release, and fundamentally changes how Evidence queries data in order to bring support for three big new features:
1. **Multiple Data Sources:** Combine data from multiple databases, flat files like CSVs, and even non-SQL data sources like Google Sheets - and query them all with SQL
2. **Inputs and Filters:** Use input components to dynamically update your queries and charts based on user input. Filter data using parameterized queries rather than Javascript filter syntax
3. **Adapter Plugins:** Create your own adapter to enable connecting to any data source

This is a big release and contains several breaking changes. This guide will help you migrate your existing apps to USQL.

The following sections explain what is changing in Evidence with Universal SQL. To jump straight to the migration steps, [click here](#migration-steps).

## Do I need to migrate my app?
- If your `@evidence-dev/evidence` package version is `&lt; v24` then it has not yet been migrated, and we encourage you to do so as soon as is practical
- `v23` will continue to be supported for now (sunset date TBC) and will receive critical bugfixes during this period
- If you're unsure what you need to do, or if you need help, [reach out to us on Slack](https://slack.evidence.dev) in the `#migration` channel

## Breaking Changes
- Existing data source connections will need to be reconfigured
- Queries to your data source will need to be moved to the new `sources` directory (details below)
- Queries in markdown files and in the `queries` directory are now written in DuckDB SQL
- Deprecated syntax:
    - `{data.my_query}`. Use `{my_query}` instead
    - Declaring variables from queries in `&lt;script&gt;` tags using `let my_var = ` or `var my_var = `. Use `$: my_var` instead

## How Universal SQL Works
- Universal SQL introduces a new data loading step (called `run sources`) - you write queries against multiple data sources, and Evidence will combine them all into the same format so you can query across them using SQL
- Once your sources are loaded, they can be queried using DuckDB SQL syntax, either directly on your markdown page, or by writing a `.sql` file in your `queries` directory and referencing it in the frontmatter of your markdown file
- These DuckDB SQL queries run in your browser and can be changed on the fly by interactive user input (e.g., filters, dropdowns) using parameterized queries (e.g., `where customer_id = '${inputs.customer}'`)

## Change to Project Structure
To support multiple data sources, USQL introduces a new `sources` directory, which contains one folder per data source. Each data source folder includes connection configuration files (defined in YAML, but configurable via the settings UI of your project in your browser).

If you already have a `sources` directory in your project (e.g., for `.sql` files or `.csv` files), it will need to be renamed to `queries`. This functions in the same way as before, but the `.sql` files use DuckDB SQL syntax and the queries run in the browser rather than during the build step.

Queries in your markdown files will use DuckDB SQL syntax and will also run in the browser.

#### Pre-USQL Basic Project Structure
```bash
+-- .evidence
+-- pages/
|   `-- index.md
+-- sources/
|   `-- a_query.sql
|   `-- another_query.sql
```

#### USQL Basic Project Structure
```bash
+-- .evidence
+-- pages/
|   `-- index.md
+-- queries/
|   `-- a_query.sql
|   `-- another_query.sql
+-- sources/
|   `-- my_source/
|        `-- connection.yaml
|        `-- connection.options.yaml
|        `-- source_query.sql
```

Optional folders for `components`, `static`, and `partials` still work as they did before.

## Overview of Changes you will need to make

<Alert status=info>

**Recommendations**

We recommend creating a backup of your project before starting the migration.

</Alert>

- Use new template project scaffold
- Migrate queries to new project folder structure
- Update on-page queries to use DuckDB syntax
- (Suggested) Refactor `.filter()` statements to take advantage of SQL-based filtering
- (If necessary) Update deprecated syntax
- (If necessary) Reinstall any custom plugins 
- (If necessary) Reinstall any custom external dependencies (non-evidence libraries) 
- (If necessary) Update `.gitignore` to include `**/connection.options.yaml` - only needed if you do not start from a fresh Universal SQL template

## Migration Steps

<Alert status=info>

**VS Code Migration Command**

We have created a VSCode extension command to assist with migration. This will aid significantly with the migration process. Steps for VS Code are shown here. If you prefer to complete the steps manually, see the next section below.

</Alert>

### Using the VS Code Migration Command
This migration command covers most situations, but there may be edge cases where you will need to make adjustments or fix query syntax.

<Alert status=info>

**Troubleshooting**

Issues and errors in the migration command can be related to npm or NodeJS versions - if in doubt, update to the latest LTS versions (see [system requirements](/guides/system-requirements))

</Alert>

1. Ensure you have the Evidence VS Code extension version `1.4.1` or higher installed
2. Open the Evidence project you want to migrate. If your project is within a monorepo, for this migration open only the Evidence project folder as the "workspace" in VS Code - otherwise the migration command will not be able to run
3. Open the command palette (`Cmd`/`Ctrl` + `Shift` + `P`)
4. Type `Evidence: Migrate Project to USQL` and select that command
5. Follow the prompts in VS Code. You will be asked to provide a name for your data source. This will appear as a folder within the `sources` directory in your project (e.g., you could use `needful_things` if using the Evidence demo database)
6. The command should run quickly - no more than a few minutes. If it's taking longer, try cancelling and starting again or [reach out on Slack in the #migration channel for assistance](https://slack.evidence.dev). When the command has finished running, you will have a migrated project. 
7. Click `Start Evidence` to run the server, or use the commands below:
    ```shell
    npm install
    npm run sources
    npm run dev
    ```
    **Notes:** 
    - `npm run sources` is a new step introduced by USQL. This step runs the queries against your data sources and loads the data into Evidence
    - It is normal to see errors in your terminal at this stage - you need to configure your data source to avoid these (see next step)
8. Configure your data source in the Settings menu
    - In your browser, click the 3-dot menu at the top right of the page and click Settings
    - In the Data Sources section, click to add a new connection
    - Select the data source type your app uses and provide the name you set when going through the VS Code prompts earlier (e.g., `needful_things` to continue the example from above)
    - Click to test your connection
    - Click to confirm the changes
9. Navigate back to the home page in your browser and refresh the page
10. The page should now be working. The migration command covers most situations, but not all - you may need to fix a few remaining issues. If you still see errors, they may be related to query chaining or SQL syntax. See the Special Situations section below for information which may help. If you need assistance tracking down the issues, please [reach out on Slack](https://slack.evidence.dev) in the `#migration` channel


### Completing the Migration Steps Manually
The easiest way to migrate your app is to create a app using the latest version of the template, and copy over your markdown pages and queries. These steps will guide you through doing that in the same project so that you can track the changes in version control.

1. In your Evidence project directory, create a new folder called `_legacy_project`
2. Copy all of the files from your existing project into the `_legacy_project` folder - this will serve as a backup, and you will need to reference these in the following steps to copy content back into your project
3. Create another folder called `temporary`
4. Scaffold a new project into this `temporary` folder using the latest version of the template
    - CLI: `npx degit evidence-dev/template temporary`
    - This step is required because `degit` only works in an empty folder
    - After this step, you should have a new evidence project in your `temporary` directory
5. Move all of the files from this `temporary` folder into the root of your project. Then delete the `temporary` folder
    - Now you should have a `_legacy_project` folder and a new Evidence project in the same workspace
6. Set up your new `sources` directory
    - In the new `sources` folder, delete any demo data folders so that the folder is empty - you won't need any of those
    - Create a new folder in your `sources/` directory, with a name for your existing data source (e.g., `sources/my-data-source/`)
7. Copy files from `_legacy_project` into your new project. Make sure to **copy** rather than **move** the files. If the folder already exists in the new project, replace the contents with the contents from `_legacy_project`:
    - Folders to copy from `_legacy_project` to your new project
        - `pages/` -> `pages/`
        - `components/` -> `components/`
        - `partials/` -> `partials/`
        - `static/` -> `static/`
    - `sources` folder
        - If `_legacy_project` has a `sources` directory, copy the contents of that folder into the `sources/my-data-source` folder in your new project
    - Files in the root of `_legacy_project`
        - Any data files in the root of your old project should be copied into your `sources/my-data-source` folder. This includes files with these extensions:
            - `.duckdb`
            - `.db`
            - `.sqlite`
            - `.sqlite3`
            - `.csv`
            - `.parquet`
6. Set up your `queries` directory
    - If a `queries` directory does not exist in your new project, create that folder now (in the root of your project)
    - If you don't have any `.sql` files in your `sources/my-data-source` directory, you can move to the next step and leave the `queries` folder empty
    - For each `.sql` file in your `sources/my-data-source` directory, create a file in `queries` with the same name (e.g., `sources/my-data-source/my-query.sql` --> `queries/my-query.sql`)
    - Write this query into each `.sql` file you created in `queries`: `select * from [my-data-source].[my-query]`
8. Migrate queries in your markdown files
    - Changes to make in each markdown file:
        - If you have frontmatter that references `sources`, change the name from `sources` to `queries`
        - For each inline query in the file:
           - Create a `.sql` file in your data source folder using the same name as the query (e.g., `sources/my-data-source/my-query.sql`) and paste in the contents of the query
           - In your markdown file, replace the contents of the query with `select * from [my-data-source].[my-query]`
           - If your query is a chained query, check that the reference will still work, and adjust as necessary
    - If you run into duplicate query names across pages, you will need to create unique names and ensure they are referenced correctly on your markdown page
9. Update templated page syntax
    - On each templated page, you can replace `$page.params.my_param` with `params.my_param`
    - The old reference will continue to work but will be phased out in the future in favour of this simpler syntax
10. Run the commands below:
    ```shell
    npm install
    npm run sources
    npm run dev
    ```
    **Notes:** 
    - `npm run sources` is a new step introduced by USQL. This step runs the queries against your data sources
    - It is normal to see errors in your terminal at this stage - you need to configure your data source to avoid these (see next step)
11. Configure your data source in the Settings menu
    - Click the 3-dot menu at the top right of the page and click Settings
    - In the Data Sources section, click to add a new connection
    - Select the data source type your app uses and provide a name for your data source. This will appear as a folder within the `sources` directory in your project (e.g., you could use `needful_things` if using the Evidence demo database)
    - Click to test your connection
    - Click to confirm the changes
12. Navigate back to the home page in your browser and refresh the page
13. The page should now be working. If you still see errors, they may be related to query chaining or SQL syntax. See the Special Situations section below for information which may help. If you need assistance tracking down the issues, please [reach out on Slack](https://slack.evidence.dev) in the `#migration` channel

## Deployment Changes

### Evidence Cloud
1. Copy environment variables for your app from your local dev environment (Settings page > Deployment)
    ![env vars](/img/settings-vars.png)

2. Update the environment variables for your Evidence Cloud app by pasting the environment variables from Step 1
    ![cloud vars](/img/cloud-settings-edit.png)

3. Click to redeploy your app


### Self-Hosting
You will need to update 2 things in your deployment setup to complete the migration to USQL:
1. Update your environment variables
    - See links in the Resources section for Netlify and Vercel docs
    - Find the new environment variables in your app's settings menu in your browser (click 3-dot menu at top right > Settings) - then scroll down to Deployment and select your deployment provider
    - Copy your variables and change them in the configuration for your deployment provider
2. Update the build command
    - USQL introduces the new `run sources` step to load data into your app from your data sources
    - Replace the build command in your deployment provider to `npm run sources && npm run build:strict`
    - See Netlify and Vercel docs in the Resources section

## Special Situations to Migrate

### Script Tags & Javascript References

If you use a script tag on a markdown page, you will need to change any variable declarations of of `let` or `var` to `$:`.

The reason for this change relates to how the new query engine updates query results - because queries run in the browser and can change based on input, you need to use a reactive variable declaration (that's what `$:` means), which can update itself when the data is instantiated, and when it changes.

The good news is that most of what you currently include in a script tag should be able to be migrated to USQL by using parameterized SQL queries.

For example:

#### Before - Using `let`
```html
&lt;script&gt;
    let filtered_data = my_query.filter(d => d.column === $page.params.my_variable);
&lt;/script&gt;

<LineChart data={filtered_data}/>
```

#### After - Using `$:`
```html
&lt;script&gt;
    $: filtered_data = my_query.filter(d => d.column === $page.params.my_variable);
&lt;/script&gt;

<LineChart data={filtered_data}/>
```

#### Ideal - Refactor to SQL Query in USQL
````html
```filtered_data
select * from my_table
where column = '${params.my_variable}'
```

<LineChart data={filtered_data}/>
````

### Query Chaining
Our migration steps do not take into account query chaining. In some cases, chained queries will continue to work as normal. In other cases, you will need to make adjustments.

Query chaining is not supported in the `sources` directory, but is still supported in `queries` and on your markdown pages.

This means that any query chains included in `sources` will need to be replaced with actual references to the tables you need.

If you use the VS Code migration command, chained queries found on markdown pages are left on the page rather than being moved to the `sources` directory like other queries. This is because we assume that most chained queries are simple enough for the syntax of your source database to match with the DuckDB syntax they will need to move to. In some cases, the syntax will not line up and you will need to make an adjustment.

### Evidence Plugins
If your app includes an Evidence plugin (e.g., [Evidence Labs](https://labs.evidence.dev)):
1. Find the `evidence.plugins.yaml` file in your `_legacy_project` folder and copy the line(s) containing the plugin(s) you're using
2. Paste those lines into the `evidence.plugins.yaml` file in your new project
3. Install the plugin(s) in your project. E.g.,:
```shell
npm install --save @evidence-dev/labs
```

### External Package Dependencies

If your project includes external packages installed via npm, you will need to reinstall those packages so that they are reflected in your `package.json`

```bash
npm install <package-name>
```

## Common Syntax Change Examples

- In DuckDB, double quotes are used to reference columns. If you have double quotes in your queries for strings, you will need to change to single quotes
- `date_trunc` - in DuckDB, the date part is the first argument to the function and is passed as a string, whereas in some other dialects it is the second argument and is passed as a keyword
- `safe_divide` - in DuckDB you can use `number / nullif(other_number, 0) as divided_number` rather than `safe_divide(number, other_number)`
- You may need to change how you cast columns to other types. In DuckDB, you can use the `::type` syntax like so: `select order_time::date as order_date`

## Resources

- [#migration Slack channel](https://slack.evidence.dev)
- [DuckDB SQL Syntax Reference](https://duckdb.org/docs/sql/statements/select)
- [Netlify: Modify Environment Variables](https://docs.netlify.com/environment-variables/get-started/#modify-and-delete-environment-variables)
- [Netlify: Set your Build Command](https://docs.netlify.com/configure-builds/overview/#set-the-build-command)
- [Vercel: Environment Variables](https://vercel.com/docs/projects/environment-variables)
- [Vercel: Build Configurations](https://vercel.com/docs/deployments/configure-a-build)

---
evidence/sites/docs/pages/guides/best-practices/index.md
---
---
title: Best Practices
sidebar_position: 3
description: Tips for building performant data apps with Evidence
---

Evidence is a very flexible and open-ended tool that allows you to build almost any kind of data app. However, to get the best out of Evidence, here are some principles:

1. [Only source the data you need](#1-only-source-the-data-you-need)
2. [Sort your source queries](#2-sort-your-source-queries)
3. [Change props, not components](#3-change-props-not-components)
4. [Avoid large markdown queries](#4-avoid-large-markdown-queries)

## Source Performance

### 1. Only source the data you need

<br>
<Alert status=info>

**Best Practice:** Pre-aggregate data in your source queries, only select the columns and rows you need.

</Alert>

Every time you rebuild Evidence, it re-caches all the data from your sources. 
This can: 
- Be time-consuming and expensive to cache.
- Cause longer load times for your app, as the data comes over the network.

It's best to only source the data you need. 

### 2. Sort your source queries

<br>
<Alert status=info>

**Best Practice:** Sort your source queries. Prioritize columns that appear in `where` clauses in your markdown queries.

</Alert>


The cache in Evidence is composed of parquet files. After running `npm run sources`, you can inspect these files in `.evidence/template/static/data`.

Sorted queries lead to better compression in parquet files, resulting in faster source build times, lower likelyhood of hitting memory limits, and faster query times in your app.

If your source queries are sorted, the client-side query engine is able to take advantage of [Projection Pushdown](https://duckdb.org/2021/06/25/querying-parquet.html#automatic-filter--projection-pushdown) i.e. only loading the rows it needs.


## Interactive Performance

### 3. Change props, not components

<br>
<Alert status=info>

**Best Practice:** Use inputs to change props or change queries, not whole components.

</Alert>

If you swap out components (for example using `{#if}` blocks), Evidence will re-render the entire component. This can cause a jerky transition as the component is re-rendered.

#### Don't do this

The entire component is re-rendered when the dropdown changes:

````svelte
```sql categories
select * from categories
```

```sql products
select * from products
```

<Dropdown name=chart_picker>
    <DropdownOption value="categories"/>
    <DropdownOption value="products"/>
</Dropdown>

{#if inputs.chart_picker.value == "categories"}

    <BarChart data={categories}/>

{:else}

    <BarChart data={products}/>

{/if}
````


#### Do this
Instead, change which query the component uses with a [ternary operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator):

````svelte
```sql categories
select * from categories
```

```sql products
select * from products
```

<Dropdown name=chart_picker>
    <DropdownOption value="categories"/>
    <DropdownOption value="products"/>
</Dropdown>

<BarChart 
    data={inputs.chart_picker.value=="categories" ? categories : products}
/>
````

### 4. Avoid large markdown queries

<Alert status=warning>

**Best Practice:** Do not return more than ~100,000 rows from queries on your page. Aggregate data in your markdown queries or source queries if needed.

</Alert>

Browsers have limited memory, and large datasets can cause slowdowns, increased rendering times and crashes. It's unlikely that you are attempting to visualize 100,000 datapoints on a webpage (an average desktop display only has ~1M pixels) so you can aggregate the data in your markdown queries, or even in you source queries.



---
evidence/sites/docs/pages/guides/updating-your-app/index.md
---
---
title: Updating Your App
sidebar_position: 3
description: Update your app using the CLI or the VS Code extension.
---

When new versions of Evidence are released, we post release notes in [Slack](https://slack.evidence.dev). You can also take a look at our pull requests on GitHub to see which changes are being made.

We recommend updating regularly to get the latest features and bug fixes. Evidence's is being actively developed, and major releases may introduce breaking changes. We therefore recommend testing updates by running your app in development mode.

## CLI

Run `npm install @evidence-dev/evidence@latest @evidence-dev/core-components@latest`.

## VS Code

Open the command palette and run `Evidence: Update to Latest Version`

## Getting Help

If you run into any problems with updates, reach out on [Slack](https://slack.evidence.dev) or email <support@evidence.dev>.


---
evidence/sites/docs/pages/components/index.md
---
---
title: "Components"
sidebar_position: 2
sidebar_link: false
---

---
evidence/sites/docs/pages/components/value/index.md
---
---
title: Value
sidebar_position: 1
---

The Value component accepts a query and displays a formatted value inline in text.

By default, `Value` will display the value from the first row of the first column of the referenced data.

```markdown
<Value data={query_name} /> <!-- First row from the first column -->
```

## Specifying Rows and Columns

Optionally supply a `column` and/or a `row` argument to display other values from `data`. 

<Alert status=info>

**Row Index**

`row` is zero-indexed, so `row=0` displays the first row.

</Alert>

```markdown
<!-- Show the **7th row** from column_name -->

<Value 
    data={query_name}
    column=column_name 
    row=6
/>
```

## Example

**Markdown:**

```markdown
The most recent month of data began <Value data={monthly_orders} />,
when there were <Value data={monthly_orders} column=orders/> orders.
```

**Results:**
![summary-sentence](/img/tutorial-img/needful-things-value-in-text-nowindow.png)

## Adding a Placeholder

Override errors with the optional `placeholder` argument. This is useful for drafting reports _before_ writing your queries.

```markdown
<Value placeholder="sales last year"/>
```

Sales in the last fiscal year were <Value placeholder="sales last year"/>, a change of <Value placeholder="X%"/> vs. the prior year.
 

## Formatting Values
Evidence supports a variety of formats - see [value formatting](/core-concepts/formatting) and the `fmt` prop below for more info.

## Aggregated Values

Values support basic aggregations such as, `min`, `max`, `median`, `sum`, `avg`


```sql orders
SELECT 
    email, item, sales
FROM 
    needful_things.orders
```

<DocTab>
    <div slot='preview'>
        <Value data={orders} column="sales" agg="avg" fmt="usd0" />
    </div>

```markdown
<Value data={orders} column="sales" agg="avg" fmt="usd0" />
```
</DocTab>

## Customize Color Values

<DocTab>
    <div slot='preview'>
            <Value data={orders} column="sales" agg="avg" fmt="usd0" color="#85BB65" />
    </div>

```markdown
<Value data={orders} column="sales" agg="avg" fmt="usd0" color="#85BB65" />
```
</DocTab>

## Red Negative Values

```sql NegativeSales
SELECT 
      MAX(sales)*-1 as max_sales
FROM 
    needful_things.orders
```

If the value is negative, the font color will automatically change to red, overriding any color specified by the color prop.

<DocTab>
    <div slot='preview'>
        <Value data={NegativeSales} column="max_sales" agg="avg" fmt="usd0" redNegatives="true" />
    </div>

```markdown
<Value data={NegativeSales} column="max_sales" agg="avg" fmt="usd0" redNegatives="true" />
```
</DocTab>

## Options

<PropListing
    name="data"
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name="column"
    options="column name"
    defaultValue="First column"
>

Column to pull values from

</PropListing>
<PropListing
    name="row"
    options="number"
    defaultValue="0"
>

Row number to display. 0 is the first row.

</PropListing>
<PropListing
    name="placeholder"
    options="string"
>

Text to display in place of an error

</PropListing>
<PropListing
    name="fmt"
    options="Excel-style format | built-in format | custom format"
>

Format to use for the value ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="emptySet"
    options={['error', 'warn', 'pass']}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name="emptyMessage"
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>
<PropListing
    name="agg"
    options={['sum', 'avg', 'min', 'median', 'max']}
    defaultValue="null"
>

Adds aggregation to query, column name required.

</PropListing>
<PropListing
        name=color
        options="CSS name | hexademical | RGB | HSL"
>

Specifies the font color of the Value.

</PropListing>
<PropListing
    name="redNegatives"
    options={[`true`, `false`]}
    defaultValue="false"
>

Conditionally sets the font color to red based on whether the selected value is less than 0

</PropListing>

---
evidence/sites/docs/pages/components/sankey-diagram/index.md
---
---
title: Sankey Diagram
sidebar_position: 1
---

The SankeyDiagram component accepts a query and displays a flow from one set of values to another.

To display a flow with multiple levels, like these examples, see [Mutli-level](#multi-level) below.

```sql simple_sankey
select 'products' as source, 'profits' as target, 100 as amount, 0.67 as percent
union all
select 'products' as source, 'expenses' as target, 50 as amount, 0.33 as percent
union all
select 'services' as source, 'profits' as target, 25 as amount, 0.50 as percent
union all
select 'services' as source, 'expenses' as target, 25 as amount, 0.50 as percent
```

```sql traffic_data
select 'google' as source, 'all_traffic' as target, 100 as count
union all
select 'direct' as source, 'all_traffic' as target, 50 as count
union all
select 'facebook' as source, 'all_traffic' as target, 25 as count
union all
select 'bing' as source, 'all_traffic' as target, 25 as count
union all
select 'tiktok' as source, 'all_traffic' as target, 25 as count
union all
select 'twitter' as source, 'all_traffic' as target, 25 as count
union all
select 'linkedin' as source, 'all_traffic' as target, 25 as count
union all
select 'pinterest' as source, 'all_traffic' as target, 25 as count
union all
select 'all_traffic' as source, '/' as target, 50 as count
union all
select 'all_traffic' as source, '/docs' as target, 150 as count
union all
select 'all_traffic' as source, '/blog' as target, 25 as count
union all
select 'all_traffic' as source, '/about' as target, 75 as count
```

<DocTab>
  <div slot='preview'>
    <SankeyDiagram data={traffic_data} title="Sankey" subtitle="A simple sankey chart" sourceCol=source targetCol=target valueCol=count />
  </div>

```svelte
<SankeyDiagram 
    data={query_name} 
    sourceCol= sourceCol
    targetCol = targetCol
    valueCol= valueCol
/>
```
</DocTab>

## Vertical

<DocTab>
  <div slot='preview'>
    <SankeyDiagram data={traffic_data} title="Sankey" subtitle="A simple sankey chart" sourceCol=source targetCol=target valueCol=count orient=vertical/>
  </div>

```svelte
<SankeyDiagram 
    data={query_name} 
    sourceCol=sourceCol
    targetCol=targetCol
    valueCol=valueCol
    orient=vertical
/>
```
</DocTab>

# Echarts Options String 

<DocTab>
  <div slot='preview'>
    <SankeyDiagram data={traffic_data} title="Sankey" subtitle="A simple sankey chart" sourceCol=source targetCol=target valueCol=count 
    echartsOptions={{
        title: {
            text: "Custom Echarts Option",
            textStyle: {
              color: '#476fff'
            }
        }
    }}
    />
  </div>

```svelte
<SankeyDiagram 
    data={traffic_data} 
    title="Sankey" 
    subtitle="A simple sankey chart" 
    sourceCol=source 
    targetCol=target 
    valueCol=count 
    echartsOptions={{
        title: {
            text: "Custom Echarts Option",
            textStyle: {
              color: '#476fff'
            }
        }
    }}
/>
```
</DocTab>

# Node Depth Override


```sql apple_income_statement
select 'iphone' as source, 'product revenue' as target, 51 as amount_usd
union all
select 'mac' as source, 'product revenue' as target, 10 as amount_usd
union all
select 'ipad' as source, 'product revenue' as target, 8 as amount_usd
union all
select 'wearables and home' as source, 'product revenue' as target, 9 as amount_usd
union all
select 'services revenue' as source, 'revenue' as target, 20 as amount_usd
union all
select 'product revenue' as source, 'revenue' as target, 78 as amount_usd
union all
select 'revenue' as source, 'gross profit' as target, 43 as amount_usd
union all
select 'gross profit' as source, 'operating profit' as target, 30 as amount_usd
union all
select 'gross profit' as source, 'operating expenses' as target, 13 as amount_usd
union all
select 'revenue' as source, 'cost of revenue' as target, 55 as amount_usd
```

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
        data={apple_income_statement} 
        title="Apple Income Statement" 
        subtitle="USD Billions" 
        sourceCol=source 
        targetCol=target 
        valueCol=amount_usd 
        depthOverride={{'services revenue': 1}}
        nodeAlign=left
    />
  </div>

```svelte
<SankeyDiagram 
    data={apple_income_statement} 
    title="Apple Income Statement" 
    subtitle="USD Billions" 
    sourceCol=source 
    targetCol=target 
    valueCol=amount_usd 
    depthOverride={{'services revenue': 1}}
    nodeAlign=left
/>
```
</DocTab>


# Labels

## Node Labels

### `nodeLabels=name` (default)

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      nodeLabels=name
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  nodeLabels=name
/>
```
</DocTab>


### `nodeLabels=value`

<DocTab>
  <div slot='preview'>
  <SankeyDiagram 
    data={simple_sankey} 
    sourceCol=source 
    targetCol=target 
    valueCol=amount 
    percentCol=percent 
    nodeLabels=value
  />
  
The value labels can be formatted using the `valueFmt` option.
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  nodeLabels=value
/>
```
</DocTab>



### `nodeLabels=full`

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      nodeLabels=full
      valueFmt=usd
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  nodeLabels=full
  valueFmt=usd
/>
```
</DocTab>

## Link Labels

### `linkLabels=full` (default)
Requires `percentCol` to show percentage beside value

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      valueFmt=usd
      linkLabels=full
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  valueFmt=usd
  linkLabels=full
/>
```
</DocTab>


### `linkLabels=value`

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      valueFmt=usd
      linkLabels=value
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  valueFmt=usd
  linkLabels=value
/>
```
</DocTab>


### `linkLabels=percent`

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      valueFmt=usd
      linkLabels=percent
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  valueFmt=usd
  linkLabels=percent
/>
```
</DocTab>

## Custom Color Palette

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      linkColor=grey
      colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  linkColor=grey
  colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
/>
```
</DocTab>


## Link Colors

### `linkColor=grey` (default)

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      linkColor=grey
      colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  linkColor=grey
  colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
/>
```
</DocTab>


### `linkColor=source` 

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      linkColor=source
      colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  linkColor=source
  colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
/>
```
</DocTab>

### `linkColor=target` 

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      linkColor=target
      colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  linkColor=target
  colorPalette={['#ad4940', '#3d8cc4', '#1b5218', '#ebb154']}
/>
```
</DocTab>


### `linkColor=gradient` 

<DocTab>
  <div slot='preview'>
    <SankeyDiagram 
      data={simple_sankey} 
      sourceCol=source 
      targetCol=target 
      valueCol=amount 
      percentCol=percent 
      linkColor=gradient
      colorPalette={['#6e0e08', '#3d8cc4', '#1b5218', '#ebb154']}
    />
  </div>

```svelte
<SankeyDiagram 
  data={simple_sankey} 
  sourceCol=source 
  targetCol=target 
  valueCol=amount 
  percentCol=percent 
  linkColor=gradient
  colorPalette={['#6e0e08', '#3d8cc4', '#1b5218', '#ebb154']}
/>
```
</DocTab>


## Multi-level

The syntax for multi-level sankey diagrams is the same, but the 
underlying query must represent all the levels using the same 
`sourceCol` and `targetCol`, so it is necessary to `union`
 each level together.  `sourceCol` nodes on the next level will be linked to `targetCol` nodes in the previous level with the same name.  

For example, here is the source for the visuals above.

```svelte
```sql traffic_source
select 
    channel as source,
    'all_traffic' as target,
    count(user_id) as count
from events.web_events
group by 1,2

union all

select 
    'all_traffic' as source,
    page_route as target,
    count(user_id) as count
from events.web_events
group by 1, 2
‍```

<SankeyDiagram
    data={traffic_data}
    title="Sankey"
    subtitle="A simple sankey chart"
    sourceCol=source
    targetCol=target
    valueCol=count
/>
```

## Options

### Data

<PropListing
    name="data"
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name="sourceCol"
    required
    options="column name"
>

Column to use for the source of the diagram

</PropListing>
<PropListing
    name="targetCol"
    required
    options="column name"
>

Column to use for the target of the diagram

</PropListing>
<PropListing
    name="valueCol"
    required
    options="column name"
>

Column to use for the value of the diagram

</PropListing>
<PropListing
    name="percentCol"
    options="column name"
>

Column to use for the percent labels of the diagram

</PropListing>
<PropListing
    name="depthOverride"
    options="object containing node name and depth level (0 is first level)"
>

Manual adjustment to location of each node `{{'services revenue': 2}}`

</PropListing>
<PropListing
    name="emptySet"
    options={['error', 'warn', 'pass']}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name="emptyMessage"
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>
<PropListing
    name="printEchartsConfig"
    options={['true', 'false']}
    defaultValue="false"
>

Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options

</PropListing>

### Formatting & Styling

<PropListing
    name="valueFmt"
    options="Excel-style format | built-in format | custom format"
>

Format to use for `valueCol` ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="orient"
    options={['horizontal', 'vertical']}
    defaultValue="horizontal"
>

Layout direction of the nodes in the diagram.

</PropListing>
<PropListing
    name="sort"
    options={['true', 'false']}
    defaultValue="false"
>

Whether the nodes are sorted by size in the diagram

</PropListing>
<PropListing
    name="nodeAlign"
    options={['justify', 'left', 'right']}
    defaultValue="justify"
>

Controls the horizontal alignment of nodes in the diagram. When orient is vertical, nodeAlign controls vertical alignment.

</PropListing>
<PropListing
    name="nodeGap"
    options="number"
    defaultValue="8"
>

The gap between any two rectangles in each column of the the diagram.

</PropListing>
<PropListing
    name="nodeWidth"
    options="number"
    defaultValue="20"
>

The node width of rectangle in the diagram.

</PropListing>
<PropListing
    name="outlineColor"
    options="CSS name | hexademical | RGB | HSL"
    defaultValue="transparent"
>

Border color. Only accepts a single color.

</PropListing>
<PropListing
    name="outlineWidth"
    options="number"
    defaultValue="1"
>

Border Width. It should be a natural number.

</PropListing>
<PropListing
    name="colorPalette"
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue="built-in color palette"
>

Array of custom colours to use for the chart. E.g., `{['#cf0d06','#eb5752','#e88a87']}`

</PropListing>
<PropListing
    name="linkColor"
    options={['grey', 'source', 'target', 'gradient']}
    defaultValue="grey"
>

Color to use for the links between nodes in the diagram

</PropListing>

### Chart

<PropListing
    name="title"
    options="string"
>

Chart title. Appears at top left of chart.

</PropListing>
<PropListing
    name="subtitle"
    options="string"
>

Chart subtitle. Appears just under title.

</PropListing>
<PropListing
    name="nodeLabels"
    options={['name', 'value', 'full']}
    defaultValue="name"
>

Adds labels to the nodes of the diagram

</PropListing>
<PropListing
    name="linkLabels"
    options={['full', 'value', 'percent']}
    defaultValue="full (requires percentCol)"
>

Adds labels to the links between nodes

</PropListing>
<PropListing
    name="chartAreaHeight"
    options="number"
    defaultValue="180"
>

Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX.

</PropListing>

### Custom Echarts Options

<PropListing
    name="echartsOptions"
    options="{`{{exampleOption:'exampleValue'}}`}"
>

Custom Echarts options to override the default options. See [reference page](/components/echarts-options/) for available options.

</PropListing>
<PropListing
    name="printEchartsConfig"
    options={['true', 'false']}
    defaultValue="false"
>

Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options

</PropListing>

---
evidence/sites/docs/pages/components/details/index.md
---
---
title: Details
sidebar_position: 1
---

The details component allows you to add a collapsible section to your markdown. This is useful for adding additional information that you don't want to be visible by default.

## Default state

<DocTab>
    <div slot='preview'>
        <Details title="Definitions">
            
            Definition of metrics in Solutions Targets

            ### Time to Proposal

            Average number of days it takes to create a proposal for a customer

            *Calculation:*
            Sum of the number of days it took to create each proposal, divided by the number of proposals created

            *Source:*
            Hubspot

        </Details>
    </div>

````markdown
<Details title="Definitions">
    
    Definition of metrics in Solutions Targets

    ### Time to Proposal

    Average number of days it takes to create a proposal for a customer

    *Calculation:*
    Sum of the number of days it took to create each proposal, divided by the number of proposals created

    *Source:*
    Hubspot

</Details>
````
</DocTab>

## Expanded state

<DocTab>
    <div slot='preview'>
        <Details title="Definitions" open=true>
            
            Definition of metrics in Solutions Targets

            ### Time to Proposal

            Average number of days it takes to create a proposal for a customer

            *Calculation:*
            Sum of the number of days it took to create each proposal, divided by the number of proposals created

            *Source:*
            Hubspot

        </Details>
    </div>

```markdown
<Details title="Definitions">
    
    Definition of metrics in Solutions Targets

    ### Time to Proposal

    Average number of days it takes to create a proposal for a customer

    *Calculation:*
    Sum of the number of days it took to create each proposal, divided by the number of proposals created

    *Source:*
    Hubspot

</Details>
```
</DocTab>

## Options

<PropListing 
    name="title"
    defaultValue="Details"
>

The text shown next to the triangle icon.

</PropListing>
<PropListing 
    name="open"
    options={['true', 'false']}
    defaultValue="false"
>

Whether expanded by default.

</PropListing>

---
evidence/sites/docs/pages/components/bubble-chart/index.md
---
---
title: Bubble Chart
sidebar_position: 1
queries:
- price_vs_volume.sql
---

<DocTab>
    <div slot='preview'>
        <BubbleChart 
            data={price_vs_volume}
            x=price
            y=number_of_units
            xFmt=usd0
            series=category
            size=total_sales
        />
    </div>

```markdown
<BubbleChart 
    data={price_vs_volume}
    x=price
    y=number_of_units
    xFmt=usd0
    series=category
    size=total_sales
/>
```
</DocTab>

## Examples

### Default

<DocTab>
    <div slot='preview'>
        <BubbleChart 
            data={price_vs_volume}
            x=price
            y=number_of_units
            size=total_sales
        />
    </div>

```markdown
<BubbleChart 
    data={price_vs_volume}
    x=price
    y=number_of_units
    size=total_sales
/>
```
</DocTab>


### Multi-Series

<DocTab>
    <div slot='preview'>
        <BubbleChart 
            data={price_vs_volume}
            x=price
            y=number_of_units
            series=category
            size=total_sales
        />
    </div>

```markdown
<BubbleChart 
    data={price_vs_volume}
    x=price
    y=number_of_units
    series=category
    size=total_sales
/>
```
</DocTab>

## Options

### Data

<PropListing 
    name="data"
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing 
    name="x"
    description="Column to use for the x-axis of the chart"
    required=true
    options="column name"
    defaultValue="First column"
/>
<PropListing 
    name="y"
    description="Column(s) to use for the y-axis of the chart"
    required=true
    options="column name | array of column names"
    defaultValue="Any non-assigned numeric columns"
/>
<PropListing 
    name="series"
    description="Column to use as the series (groups) in a multi-series chart"
    required=false
    options="column name"
/>
<PropListing 
    name="size"
    description="Column to use to scale the size of the bubbles"
    required=true
    options="column name"
/>
<PropListing 
    name="sort"
    description="Whether to apply default sort to your data. Default is x ascending for number and date x-axes, and y descending for category x-axes"
    required=false
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing 
    name="tooltipTitle"
    description="Column to use as the title for each tooltip. Typically, this is a name to identify each point."
    required=false
    options="column name"
/>
<PropListing 
    name="emptySet"
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    required=false
    options={['error', 'warn', 'pass']}
    defaultValue='error'
/>
<PropListing 
    name="emptyMessage"
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    required=false
    options="string"
    defaultValue='No records'
/>

### Formatting & Styling

<PropListing 
    name="xFmt"
    description="Format to use for x column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing 
    name="yFmt"
    description="Format to use for y column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing 
    name="sizeFmt"
    description="Format to use for size column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name="seriesLabelFmt"
    description="Format to use for series label (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="-"
/>
<PropListing 
    name="shape"
    description="Options for which shape to use for bubble points"
    required=false
    options="circle | emptyCircle | rect | triangle | diamond"
    defaultValue='circle'
/>
<PropListing 
    name="scaleTo"
    description="Scale the size of the bubbles by this factor (e.g., 2 will double the size)"
    required=false
    options="number"
    defaultValue=1
/>
<PropListing 
    name="opacity"
    description="% of the full color that should be rendered, with remainder being transparent"
    required=false
    options="number (0 to 1)"
    defaultValue=0.7
/>
<PropListing 
    name="fillColor"
    description="Color to override default series color. Only accepts a single color."
    required=false
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing 
    name="outlineWidth"
    description="Width of line surrounding each shape"
    required=false
    options="number"
    defaultValue=0
/>
<PropListing 
    name="outlineColor"
    description="Color to use for outline if outlineWidth > 0"
    required=false
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing 
    name="colorPalette"
    description="Array of custom colours to use for the chart. E.g., ['#cf0d06','#eb5752','#e88a87'] Note that the array must be surrounded by curly braces."
    required=false
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue='built-in color palette'
/>
<PropListing 
    name="seriesColors"
    description="Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal. Note the double curly braces required in the syntax"
    required=false
    options="object with series names and assigned colors"
    defaultValue='colors applied by order of series in data'
/>
<PropListing
    name="seriesOrder"
    description="Apply a specific order to the series in a multi-series chart."
    required=false
    options="Array of series names in the order they should be used in the chart seriesOrder={`{['series one', 'series two']}`}"
    defaultValue="default order implied by the data"
/>

### Axes

<PropListing 
    name="yLog"
    description="Whether to use a log scale for the y-axis"
    required=false
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing 
    name="yLogBase"
    description="Base to use when log scale is enabled"
    required=false
    options="number"
    defaultValue=10
/>
<PropListing 
    name="xAxisTitle"
    description="Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false"
    required=false
    options="true | string | false"
    defaultValue=true
/>
<PropListing 
    name="yAxisTitle"
    description="Name to show beside y-axis. If 'true', formatted column name is used."
    required=false
    options="true | string | false"
    defaultValue=true
/>
<PropListing 
    name="xGridlines"
    description="Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)"
    required=false
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing 
    name="yGridlines"
    description="Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)"
    required=false
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing 
    name="xAxisLabels"
    description="Turns on/off value labels on the x-axis"
    required=false
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing 
    name="yAxisLabels"
    description="Turns on/off value labels on the y-axis"
    required=false
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing 
    name="xBaseline"
    description="Turns on/off thick axis line (line appears at y=0)"
    required=false
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing 
    name="yBaseline"
    description="Turns on/off thick axis line (line appears directly alongside the y-axis labels)"
    required=false
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing 
    name="xTickMarks"
    description="Turns on/off tick marks for each of the x-axis labels"
    required=false
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing 
    name="yTickMarks"
    description="Turns on/off tick marks for each of the y-axis labels"
    required=false
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing 
    name="yMin"
    description="Starting value for the y-axis"
    required=false
    options="number"
/>
<PropListing 
    name="yMax"
    description="Maximum value for the y-axis"
    required=false
    options="number"
/>

### Chart

<PropListing 
    name="title"
    description="Chart title. Appears at top left of chart."
    required=false
    options="string"
/>
<PropListing 
    name="subtitle"
    description="Chart subtitle. Appears just under title."
    required=false
    options="string"
/>
<PropListing 
    name="legend"
    description="Turns legend on or off. Legend appears at top center of chart."
    required=false
    options={['true', 'false']}
    defaultValue='true for multiple series'
/>
<PropListing 
    name="chartAreaHeight"
    description="Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX."
    required=false
    options="number"
    defaultValue=180
/>
<PropListing 
    name="renderer"
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    required=false
    options="canvas | svg"
    defaultValue='canvas'
/>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

### Custom Echarts Options

<PropListing 
    name="echartsOptions"
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleOption:'exampleValue'}}`}"
/>
<PropListing 
    name="seriesOptions"
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
/>
<PropListing 
    name="printEchartsConfig"
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    options={['true', 'false']}
    defaultValue="false"
/>


### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>


## Annotations

Bubble charts can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

<DocTab>
    <div slot='preview'>
        <BubbleChart 
            data={price_vs_volume}
            x=price
            xFmt=usd0
            y=number_of_units
            size=total_sales
        >
            <ReferenceLine
                x=75
                label="Consumer Limit"
            />
        </BubbleChart>
    </div>

```markdown
<BubbleChart 
    data={price_vs_volume}
    x=price
    xFmt=usd0
    y=number_of_units
    size=total_sales
>
    <ReferenceLine
        x=75
        label="Consumer Limit"
    />
</BubbleChart>
```
</DocTab>



---
evidence/sites/docs/pages/components/echarts-options/index.md
---
---
sidebar_position: 98
title: ECharts Options
---

<Alert status=warning>

`echartsOptions` allow you to customize your chart with any combination of eCharts config options. Many config combinations can result in "broken" looking charts. Proceed with caution, and test your charts, particularly at different screen widths.

</Alert>

ECharts settings are specified in config object. Evidence generates this config for you through the props you pass to your chart. 

If you can't get your chart to look "just right" with standard chart , you can use `echartsOptions` to customize your chart by adding or overriding the eCharts config directly.

## ECharts Options Object

The options object is passed as follows. **Note the double curly braces.**

```markdown
<BarChart
    data={query_name}
    x=column_x
    y=column_y
    echartsOptions={{exampleOption: 'exampleValue'}}
/>
```

See the [eCharts docs](https://echarts.apache.org/en/option.html) for a full reference of config options.

Note that LLMs such as ChatGPT and GitHub Copilot are reasonably good at generating eCharts options if you explain what you are trying to achieve.


## Series Options Object

Often if you are making custom changes to a chart, you will need to adjust options within ECharts' `series`. When you have a multi-series chart, each series shows up separately in the ECharts configuration generated by Evidence. 

For example, if you have a stacked bar with 4 series, this is what the underlying config object might look like:
```javascript
series: [
    {type: 'bar', barWidth: 5, name: 'Canada', data: [200,5525,222,444,666]},
    {type: 'bar', barWidth: 5, name: 'US', data: [1200,1555,1222,4144,6616]},
    {type: 'bar', barWidth: 5, name: 'UK', data: [2060,525,262,4844,4666]},
    {type: 'bar', barWidth: 5, name: 'Australia', data: [2200,5555,2252,8444,3666]}
]
```

If you wanted to add a custom border to the bars with `echartsOptions`, you would need to manually repeat for each series. E.g.,

<DocTab>
    <div slot='preview'>
        <BarChart
            data={country_sales}
            x=year
            y=sales
            series=country
            echartsOptions={{
                    series: [
                        {itemStyle: {
                            borderWidth: 1,
                            borderColor: 'red'
                        }},
                        {itemStyle: {
                            borderWidth: 1,
                            borderColor: 'red'
                        }},
                        {itemStyle: {
                            borderWidth: 1,
                            borderColor: 'red'
                        }},
                        {itemStyle: {
                            borderWidth: 1,
                            borderColor: 'red'
                        }}
                    ]
                }}
        />
    </div>

```html
<BarChart
    data={country_sales}
    x=date
    y=sales
    series=country
    echartsOptions={{
        series: [
            {itemStyle: {
                borderWidth: 1,
                borderColor: 'red'
            }},
            {itemStyle: {
                borderWidth: 1,
                borderColor: 'red'
            }},
            {itemStyle: {
                borderWidth: 1,
                borderColor: 'red'
            }},
            {itemStyle: {
                borderWidth: 1,
                borderColor: 'red'
            }}
        ]
    }}
/>
```
</DocTab>


With `seriesOptions`, you can specify the changes once and have them applied to all series in the chart, like so:

```country_sales
select 'Canada' as country, 2020 as year, 100 as sales
union all
select 'Canada' as country, 2021 as year, 150 as sales
union all
select 'Canada' as country, 2022 as year, 200 as sales
union all
select 'Canada' as country, 2023 as year, 250 as sales
union all
select 'US' as country, 2020 as year, 200 as sales
union all
select 'US' as country, 2021 as year, 350 as sales
union all
select 'US' as country, 2022 as year, 400 as sales
union all
select 'US' as country, 2023 as year, 450 as sales
```

<DocTab>
    <div slot='preview'>
        <BarChart
            data={country_sales}
            x=year
            y=sales
            series=country
            seriesOptions={{
                itemStyle: {
                    borderWidth: 1,
                    borderColor: 'red'
                }
            }}
        />
    </div>

```svelte
<BarChart
    data={country_sales}
    x=date
    y=sales
    series=country
    seriesOptions={{
        itemStyle: {
            borderWidth: 1,
            borderColor: 'red'
        }
    }}
/>
```
</DocTab>



## Print ECharts Config

You can print the current eCharts config for a chart by adding `printEchartsConfig=true` to the chart. This will print the full config just below the chart. 

This includes both any default Evidence config and any `echartsOptions` you have specified, and so can be useful for debugging.

```svelte
<BarChart
    data={query_name}
    x=column_x
    y=column_y
    echartsOptions={{exampleOption: 'exampleValue'}}
    printEchartsConfig=true
/>
```


## Example Configs

### Customize the Legend Position

<DocTab>
    <div slot='preview'>
        <BarChart
            data={country_sales}
            x=year
            y=sales
            series=country
        echartsOptions={{
            legend: {
                right: 'right',
                top: 'middle',
                align: 'auto',
                orient: 'vertical',
                padding: 7,
                borderColor: '#ccc',
                borderWidth: 1,
            },
            grid: {
                right: '120px'
            }
        }}
        />
    </div>

```svelte
echartsOptions={{
    legend: {
        right: 'right',
        top: 'middle',
        align: 'auto',
        orient: 'vertical',
        padding: 7,
        borderColor: '#ccc',
        borderWidth: 1,
    },
    grid: {
        right: '120px'
    }
}}
```
</DocTab>



### Add Data Zoom

<DocTab>
    <div slot='preview'>
        <BarChart
            data={country_sales}
            x=year
            y=sales
            series=country
        echartsOptions={{
            dataZoom: [
                {
                    start: 0,
                    end: 100,
                },
            ],
            grid: {
                bottom: '50px',
            },
        }}
        />
    </div>

```svelte
echartsOptions={{
    dataZoom: [
        {
            start: 0,
            end: 100,
        },
    ],
    grid: {
        bottom: '50px',
    },
}}
```
</DocTab>

### Add Series Labels Next to Chart

<DocTab>
    <div slot='preview'>
        <LineChart
            data={country_sales}
            x=year
            y=sales
            series=country
            legend=false
        echartsOptions={{
            series: [
            {
                endLabel: {
                    show: true,
                    formatter: (params) => params.seriesName,
                    offset: [0, 0], // [x, y] offset from the end of the line
                }
            },
            {
                endLabel: {
                    show: true,
                    formatter: (params) => params.seriesName,
                    offset: [0, 0], // [x, y] offset from the end of the line
                }
            }
            ],
            grid: {
                right: '50px',
                top: '10px'
            }
        }}
        />
    </div>

```svelte
echartsOptions={{
    series: [
    {
        endLabel: {
            show: true,
            formatter: (params) => params.seriesName,
            offset: [0, 0], // [x, y] offset from the end of the line
        }
    },
    {
        endLabel: {
            show: true,
            formatter: (params) => params.seriesName,
            offset: [0, 0], // [x, y] offset from the end of the line
        }
    }
    ],
    grid: {
        right: '50px',
        top: '10px'
    }
}}
```
</DocTab>

### Add Axis Pointer to Tooltip

<DocTab>
    <div slot='preview'>
        <BarChart
            data={country_sales}
            x=year
            y=sales
            series=country
            echartsOptions={{
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross',
                    label: {
                        backgroundColor: '#6a7985'
                    }
                }
            },
        }}
        />
    </div>

```svelte
echartsOptions={{
    tooltip: {
        trigger: 'axis',
        axisPointer: {
            type: 'cross',
            label: {
                backgroundColor: '#6a7985'
            }
        }
    },
}}
```
</DocTab>



---
evidence/sites/docs/pages/components/link-button/index.md
---
---
title: Link Button
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
      <LinkButton url='/components/link-button'>
        My Link Button
      </LinkButton>
    </div>

```markdown
<LinkButton url='/components/link-button'>
  My Link Button
</LinkButton>
```
</DocTab>

## Options


<PropListing name="url" required options='string'>

Renders a button that, when clicked, navigates to the specified URL. It can accept either a full external link (e.g. `https://google.com`) or link to another page within your evidence app (e.g. `/sales/performance`).
</PropListing>

---
evidence/sites/docs/pages/components/download-data/index.md
---
---
title: Download Data
sidebar_position: 1
---

```categories
select category, sum(sales) as sales from needful_things.orders
group by all
order by sales desc
```

The Download Data component allows you to place a link on your page to download a specified dataset to CSV.

<DocTab>
    <div slot='preview'>
        <DownloadData data={categories}/>
    </div>

```svelte
<DownloadData data={categories}/>
```
</DocTab>

## Examples

### Custom Text
<LineBreak/>

<DocTab>
    <div slot='preview'>
        <DownloadData data={categories} text="Click Here"/>
    </div>

```svelte
<DownloadData data={categories} text="Click Here"/>
```
</DocTab>


### Custom Query ID
<LineBreak/>

<DocTab>
    <div slot='preview'>
        <DownloadData data={categories} queryID=my_file/>
    </div>

```svelte
<DownloadData data={categories} queryID=my_file/>
```
</DocTab>

## Options

<PropListing
    name=data
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing 
    name="display"
    options={['true', 'false']}
    defaultValue="true"
>

Whether link is visible. If using as part of a custom component, you can pass a variable representing the hover state of your component to control visibility.

</PropListing>
<PropListing 
    name="text"
    options=string
    defaultValue="Download"
>

Label to show on the link

</PropListing>
<PropListing 
    name="queryID"
    options=string
>

Label to include as the start of the CSV filename. If no queryID is supplied, "evidence_download" is used.

</PropListing>

---
evidence/sites/docs/pages/components/slider/index.md
---
---
title: Slider
sidebar_position: 1
---

Creates a Slider input with default min, max and step values

<DocTab>
    <div slot="preview">
        <Slider
            title="sales" 
            name=sales
            defaultValue=50
            fmt="usd0"
        />
    </div>

````markdown
<Slider
    title="sales" 
    name=sales
    defaultValue=50
    fmt="usd0"
/>
````
</DocTab>

Min and Max values can be defined, the step property and define the incremental value of the slider

<DocTab>
    <div slot="preview">
<Slider
    title="Months" 
    name=monthsWithSteps
    min=0
    max=36
    step=12
/>
    </div>

````markdown
<Slider
    title="Months" 
    name=monthsWithSteps
    min=0
    max=36
    step=12
/>
````
</DocTab>

showMaxMin property can hide the Max and Min values with false, by default showMaxMin is true

<DocTab>
 <div slot="preview">
<Slider
    title="Months" 
    name=monthsWithoutMinMax
    min=0
    max=36
    showMaxMin=false
/>
 </div>

````markdown
<Slider
    title="Months" 
    name=monthsWithoutMinMax
    min=0
    max=36
    showMaxMin=false
/>
````
</DocTab>

The default size of the slider can be altered with the size property using; medium, large or full

<DocTab>
    <div slot="preview">
<Slider
    title="Months Medium" 
    name=monthsMedium
    defaultValue=4
    min=0
    max=36
    size=medium
/>
    </div>

````markdown
<Slider
    title="Months Medium" 
    name=monthsMedium
    defaultValue=4
    min=0
    max=36
    size=medium
/>
````
</DocTab>


<DocTab>
    <div slot="preview">
<Slider
    title="Months Large" 
    name=monthsLarge
    defaultValue=18
    min=0
    max=36
    size=large
/>
    </div>

````markdown
<Slider
    title="Months Large" 
    name=monthsLarge
    defaultValue=18
    min=0
    max=36
    size=large
/>
````
</DocTab>

<DocTab>
    <div slot="preview">
<Slider
    title="Months Full" 
    name=monthsFull
    defaultValue=26
    min=0
    max=36
    size=full
/>
    </div>

````markdown
<Slider
    title="Months Full" 
    name=monthsFull
    min=0
    max=36
    size=full
/>
````
</DocTab>


````sql flight_data
		SELECT
	  CAST(fare AS INT) AS fare,
	  CAST((SELECT MAX(fare) FROM flights) AS INT) AS max_fare,
	FROM flights
	LIMIT 100
````

## Specifying Dynamic Columns

Supply data with specified column names for minColumn, maxColumn, and/or defaultValue. The first row’s value in each of these columns will determine the minimum, maximum, or default value, respectively.

<Slider
    title='data slider'
    size=large
    step=100
    data={flight_data}
    maxColumn=max_fare
    defaultValue=max_fare
/>

````markdown
<Slider
    title='data slider'
    size=large
    step=100
    data={flight_data}
    maxColumn=max_fare
    defaultValue=max_fare
/>
````

# Slider

## Options

<PropListing 
    name="Name"
    required
>

name of the slider, used to reference the selected value elsewhere as `{inputs.name}`

</PropListing>
<PropListing 
    name="defaultValue"
>

Sets the initial value of the silder

</PropListing>
<PropListing 
    name="min"
    options=number
    defaultValue=0
>

Sets the minimum value on the slider. Negative Values accepted.

</PropListing>
<PropListing 
    name="max"
    options=number
    defaultValue=100
>
Sets the maximum value on the slider. This value must be larger than the min.
</PropListing>
<PropListing
    name="data"
    description="Query name, wrapped in curly braces"
    options="query name"
/>
<PropListing
    name="maxColumn"
    description="Takes the first value of a column and assigns it to the max value"
    options="string - column name"
/>
<PropListing
    name="minColumn"
    description="Takes the first value of a column and assigns it to the min value"
    options="string - column name"
/>
<PropListing 
    name="step"
    options=number
    defaultValue=1
>
Defines the incremental value of the slider
</PropListing>
<PropListing 
    name="showMinMax"
    options="boolean"
    defaultValue="true"
>

Hides or shows min and max value markers on slider.  

</PropListing>
<PropListing 
    name="size"
    size="string"
    defaultValue=""
>

Sets the length of the slider. Options are "medium", large" or "full". A empty string of any other strings will not result in default size.
</PropListing>
<PropListing
    name="fmt"
    description="Sets format for the value (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format | custom format"
/>








---
evidence/sites/docs/pages/components/scatter-plot/index.md
---
---
title: Scatter Plot
sidebar_position: 1
queries:
- price_vs_volume.sql
---

<DocTab>
  <div slot='preview'>
    <ScatterPlot 
        data={price_vs_volume}
        x=price
        y=number_of_units
        xFmt=usd0
        series=category
    />
  </div>

```markdown
<ScatterPlot 
    data={price_vs_volume}
    x=price
    y=number_of_units
    xFmt=usd0
    series=category
/>
```
</DocTab>

## Examples

### Default

<DocTab>
  <div slot='preview'>
    <ScatterPlot 
        data={price_vs_volume}
        x=price
        y=number_of_units
    />
  </div>

```markdown
<ScatterPlot 
    data={price_vs_volume}
    x=price
    y=number_of_units
/>
```
</DocTab>

### Multi-Series

<DocTab>
  <div slot='preview'>
        <ScatterPlot 
            data={price_vs_volume}
            x=price
            y=number_of_units
            series=category
        />
  </div>

```markdown
<ScatterPlot 
    data={price_vs_volume}
    x=price
    y=number_of_units
    series=category
/>
```
</DocTab>


## Options

### Data

<PropListing
    name="data"
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name="x"
    required
    options="column name"
    defaultValue="First column"
>

Column to use for the x-axis of the chart

</PropListing>
<PropListing
    name="y"
    required
    options="column name | array of column names"
    defaultValue="Any non-assigned numeric columns"
>

Column(s) to use for the y-axis of the chart

</PropListing>
<PropListing
    name="series"
    options="column name"
>

Column to use as the series (groups) in a multi-series chart

</PropListing>
<PropListing
    name="sort"
    options={['true', 'false']}
    defaultValue="true"
>

Whether to apply default sort to your data. Default is x ascending for number and date x-axes, and y descending for category x-axes

</PropListing>
<PropListing
    name="tooltipTitle"
    options="column name"
>

Column to use as the title for each tooltip. Typically, this is a name to identify each point.

</PropListing>
<PropListing
    name="emptySet"
    options={['error', 'warn', 'pass']}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name="emptyMessage"
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>

### Formatting & Styling

<PropListing
    name="xFmt"
    options="Excel-style format | built-in format name | custom format name"
>

Format to use for x column ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="yFmt"
    options="Excel-style format | built-in format name | custom format name"
>

Format to use for y column ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="seriesLabelFmt"
    description="Format to use for series label (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="-"
/>
<PropListing
    name="shape"
    options="circle | emptyCircle | rect | triangle | diamond"
    defaultValue="circle"
>

Options for which shape to use for scatter points

</PropListing>
<PropListing
    name="pointSize"
    options="number"
    defaultValue="10"
>

Change size of all points on the chart

</PropListing>
<PropListing
    name="opacity"
    options="number (0 to 1)"
    defaultValue="0.7"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing
    name="fillColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color. Only accepts a single color.

</PropListing>
<PropListing
    name="outlineWidth"
    options="number"
    defaultValue="0"
>

Width of line surrounding each shape

</PropListing>
<PropListing
    name="outlineColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to use for outline if outlineWidth > 0

</PropListing>
<PropListing
    name="colorPalette"
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue="built-in color palette"
>

Array of custom colours to use for the chart. E.g., `{['#cf0d06','#eb5752','#e88a87']}`

</PropListing>
<PropListing
    name="seriesColors"
    options="object with series names and assigned colors"
    defaultValue="colors applied by order of series in data"
>

Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal. Note the double curly braces required in the syntax `seriesColors={{"Canada": "red", "US": "blue"}}`

</PropListing>
<PropListing
    name="seriesOrder"
    options="Array of series names in the order they should be used in the chart seriesOrder={`{['series one', 'series two']}`}"
    defaultValue="default order implied by the data"
>

Apply a specific order to the series in a multi-series chart.

</PropListing>

### Axes

<PropListing
    name="yLog"
    options={['true', 'false']}
    defaultValue='false'
>

Whether to use a log scale for the y-axis

</PropListing>
<PropListing
    name="yLogBase"
    options='number'
    defaultValue='10'
>

Base to use when log scale is enabled

</PropListing>
<PropListing
    name="xAxisTitle"
    options='true | string | false'
    defaultValue='true'
>

Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false

</PropListing>
<PropListing
    name="yAxisTitle"
    options='true | string | false'
    defaultValue='true'
>

Name to show beside y-axis. If 'true', formatted column name is used.

</PropListing>
<PropListing
    name="xGridlines"
    options={['true', 'false']}
    defaultValue='false'
>

Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)

</PropListing>
<PropListing
    name="yGridlines"
    options={['true', 'false']}
    defaultValue='true'
>

Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)

</PropListing>
<PropListing
    name="xAxisLabels"
    options={['true', 'false']}
    defaultValue='true'
>

Turns on/off value labels on the x-axis

</PropListing>
<PropListing
    name="yAxisLabels"
    options={['true', 'false']}
    defaultValue='true'
>

Turns on/off value labels on the y-axis

</PropListing>
<PropListing
    name="xBaseline"
    options={['true', 'false']}
    defaultValue='true' 
>

Turns on/off thick axis line (line appears at y=0)

</PropListing>
<PropListing
    name="yBaseline"
    options={['true', 'false']}
    defaultValue='false'
>

Turns on/off thick axis line (line appears directly alongside the y-axis labels)

</PropListing>
<PropListing
    name="xTickMarks"
    options={['true', 'false']}
    defaultValue='false'
>

Turns on/off tick marks for each of the x-axis labels

</PropListing>
<PropListing
    name="yTickMarks"
    options={['true', 'false']}
    defaultValue='false'
>

Turns on/off tick marks for each of the y-axis labels

</PropListing>
<PropListing
    name="xMin"
    options='number'
>

Starting value for the x-axis

</PropListing>
<PropListing
    name="xMax"
    options='number'
>

Maximum value for the x-axis

</PropListing>
<PropListing
    name="yMin"
    options='number'
>

Starting value for the y-axis

</PropListing>
<PropListing
    name="yMax"
    options='number'
>

Maximum value for the y-axis

</PropListing>

### Chart

<PropListing
    name="title"
    options='string'
>

Chart title. Appears at top left of chart.

</PropListing>
<PropListing
    name="subtitle"
    options='string'
>

Chart subtitle. Appears just under title.

</PropListing>
<PropListing
    name="legend"
    options={['true', 'false']}
    defaultValue='true for multiple series'
>

Turns legend on or off. Legend appears at top center of chart.

</PropListing>
<PropListing
    name="chartAreaHeight"
    options='number'
    defaultValue='180'
>

Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX.

</PropListing>
<PropListing
    name="renderer"
    options='canvas | svg'
    defaultValue='canvas'
>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

Which chart renderer type (canvas or SVG) to use. See ECharts' [documentation on renderers](https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/).

</PropListing>

### Custom Echarts Options

<PropListing
    name="echartsOptions"
    options="{`{{exampleOption:'exampleValue'}}`}"
>

Custom Echarts options to override the default options. See [reference page](/components/echarts-options/) for available options.

</PropListing>
<PropListing
    name="seriesOptions"
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
>

Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See [reference page](/components/echarts-options/) for available options.

</PropListing>
<PropListing
    name="printEchartsConfig"
    options={['true', 'false']}
    defaultValue="false"
>

Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options

</PropListing>

### Interactivity

<PropListing
    name="connectGroup"
>

Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected

</PropListing>


## Annotations

Scatter plots can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

```html
<ScatterPlot data={sales_data} x=date y=sales>
  <ReferenceLine data={target_data} y=target label=name/>
  <ReferenceArea xMin='2020-03-14' xMax='2020-05-01'/>
</ScatterPlot>
```


---
evidence/sites/docs/pages/components/bar-chart/index.md
---
---
title: Bar Chart
sidebar_position: 1
queries: 
- orders_by_month.sql
- orders_by_category_2021.sql
- orders_by_item_all_time.sql
- categories_by_channel.sql
---

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            series=category
            title="Sales by Category"
        />
    </div>

```markdown
<BarChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    series=category
    title="Sales by Category"
/>
```
</DocTab>

## Examples

### Default

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_month}
            x=month
            y=sales
        />
    </div>

```markdown
<BarChart 
    data={orders_by_month}
    x=month
    y=sales
/>
```
</DocTab>

### Stacked

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            series=category
        />
    </div>

```markdown
<BarChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    series=category
/>
```
</DocTab>


### 100% Stacked

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            yFmt=pct0
            series=category
            type=stacked100
        />
    </div>

```markdown
<BarChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    yFmt=pct0
    series=category
    type=stacked100
/>
```
</DocTab>


### Grouped

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            series=category
            type=grouped
        />
    </div>

```markdown
<BarChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    series=category
    type=grouped
/>
```
</DocTab>

### Horizontal

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_item_all_time}
            x=item
            y=sales 
            swapXY=true
            yFmt=usd0k
        />
    </div>

```markdown
<BarChart 
    data={orders_by_item_all_time}
    x=item
    y=sales 
    swapXY=true
    yFmt=usd0k
/>
```
</DocTab>

### Horizontal Stacked

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={categories_by_channel}
            x=category
            y=sales
            series=channel
            swapXY=true
        />
    </div>

```markdown
<BarChart 
    data={categories_by_channel}
    x=category
    y=sales
    series=channel
    swapXY=true
/>
```
</DocTab>


### Horizontal 100% Stacked

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={categories_by_channel}
            x=category
            y=sales
            series=channel
            type=stacked100
            swapXY=true
        />
    </div>

```markdown
<BarChart 
    data={categories_by_channel}
    x=category
    y=sales
    series=channel
    type=stacked100
    swapXY=true
/>
```
</DocTab>


### Horizontal Grouped

<DocTab>
    <div slot='preview'>
        <BarChart
            data={categories_by_channel}
            x=category
            y=sales
            series=channel
            type=grouped
            swapXY=true
        />
    </div>

```markdown
<BarChart
    data={categories_by_channel}
    x=category
    y=sales
    series=channel
    type=grouped
    swapXY=true
/>
```
</DocTab>


### Value Labels

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            yFmt=usd1k
            series=category
            labels=true
        />
    </div>

```markdown
<BarChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    yFmt=usd1k
    series=category
    labels=true
/>
```
</DocTab>

### Custom Color Palette

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_category_2021}
            x=month 
            y=sales 
            series=category 
            colorPalette={[
                '#cf0d06',
                '#eb5752',
                '#e88a87',
                '#fcdad9',
                ]}
        />
    </div>

```markdown
<BarChart 
    data={orders_by_category_2021}
    x=month 
    y=sales 
    series=category 
    colorPalette={[
        '#cf0d06',
        '#eb5752',
        '#e88a87',
        '#fcdad9',
        ]}
/>
```
</DocTab>



### Secondary / Dual y Axis

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_month} 
            x=month 
            y=sales
            yFmt=usd0k
            y2=num_orders
        />
    </div>

```markdown
<BarChart 
    data={orders_by_month} 
    x=month 
    y=sales_usd0k 
    y2=num_orders_num0
/>
```
</DocTab>


### Secondary / Dual Axis with Line

<DocTab>
    <div slot='preview'>
        <BarChart 
            data={orders_by_month} 
            x=month 
            y=sales
            yFmt=usd0k
            y2=num_orders
            y2SeriesType=line
        />
    </div>

```markdown
<BarChart 
    data={orders_by_month} 
    x=month 
    y=sales
    yFmt=usd0k
    y2=num_orders
    y2SeriesType=line
/>
```
</DocTab>

## Options

### Data

<PropListing
    name=data
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing
    name=x
    description="Column to use for the x-axis of the chart"
    options="column name"
    defaultValue="First column"
/>
<PropListing
    name=y
    description="Column(s) to use for the y-axis of the chart"
    options="column name | array of column names"
    defaultValue="Any non-assigned numeric columns"
/>
<PropListing
    name=y2
    description="Column(s) to include on a secondary y-axis"
    options="column name | array of column names"
/>
<PropListing
    name=y2SeriesType
    description="Chart type to apply to the series on the y2 axis"
    options={['bar', 'line', 'scatter']}
    defaultValue=bar
/>
<PropListing
    name=series
    description="Column to use as the series (groups) in a multi-series chart"
    options="column name"
/>
<PropListing
    name=sort
    description="Whether to apply default sort to your data. Default sort is x ascending for number and date x-axes, and y descending for category x-axes"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=type
    description="Grouping method to use for multi-series charts"
    options={['stacked', 'grouped', 'stacked100']}
    defaultValue=stacked
/>
<PropListing
    name=stackName
    description="Name for an individual stack. If separate Bar components are used with different stackNames, the chart will show multiple stacks"
    options="string"
/>
<PropListing
    name=emptySet
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    options={['error', 'warn', 'pass']}
    defaultValue=error
/>
<PropListing
    name=emptyMessage
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    options="string"
    defaultValue="No records"
/>

### Formatting & Styling

<PropListing
    name=xFmt
    description="Format to use for x column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=yFmt
    description="Format to use for y column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=y2Fmt
    description="Format to use for y2 column(s) (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name="seriesLabelFmt"
    description="Format to use for series label (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="-"
/>
<PropListing
    name=fillColor
    description="Color to override default series color. Only accepts a single color."
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=fillOpacity
    description="% of the full color that should be rendered, with remainder being transparent"
    options="number (0 to 1)"
    defaultValue=1
/>
<PropListing
    name=outlineWidth
    description="Width of line surrounding each bar"
    options="number"
    defaultValue=0
/>
<PropListing
    name=outlineColor
    description="Color to use for outline if outlineWidth > 0"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=colorPalette
    description="Array of custom colours to use for the chart. E.g., <code class=markdown>{`{['#cf0d06','#eb5752','#e88a87']}`}</code>"
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue="built-in color palette"
/>
<PropListing
    name=seriesColors
    description="Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal. Note the double curly braces required in the syntax"
    options="object with series names and assigned colors"
    defaultValue="colors applied by order of series in data"
/>
<PropListing
    name="seriesOrder"
    description="Apply a specific order to the series in a multi-series chart."
    required=false
    options="Array of series names in the order they should be used in the chart seriesOrder={`{['series one', 'series two']}`}"
    defaultValue="default order implied by the data"
/>

### Value Labels

<PropListing
    name=labels
    description="Show value labels"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=stackTotalLabel
    description="If using labels, whether to show a total at the top of stacked bar chart"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=seriesLabels
    description="If using labels, whether to show series labels"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=labelSize
    description="Font size of value labels"
    options="number"
    defaultValue=11
/>
<PropListing
    name=labelPosition
    description="Where label will appear on your series"
    options={['outside', 'inside']}
    defaultValue="Single Series: outside, Stacked: inside, Grouped: outside"
/>
<PropListing
    name=labelColor
    description="Font color of value labels"
    options="CSS name | hexademical | RGB | HSL"
    defaultValue="Automatic based on color contrast of background"
/>
<PropListing
    name=labelFmt
    description="Format to use for value labels (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="same as y column"
/>
<PropListing
    name=yLabelFmt
    description="Format to use for value labels for series on the y axis. Overrides any other formats (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=y2LabelFmt
    description="Format to use for value labels for series on the y2 axis. Overrides any other formats (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=showAllLabels
    description="Allow all labels to appear on chart, including overlapping labels"
    options={['true', 'false']}
    defaultValue=false
/>

### Axes

<PropListing
    name=swapXY
    description="Swap the x and y axes to create a horizontal chart"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=yLog
    description="Whether to use a log scale for the y-axis"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=yLogBase
    description="Base to use when log scale is enabled"
    options="number"
    defaultValue=10
/>
<PropListing
    name=xAxisTitle
    description="Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false"
    options={['true', 'string', 'false']}
    defaultValue=false
/>
<PropListing
    name=yAxisTitle
    description="Name to show beside y-axis. If 'true', formatted column name is used."
    options={['true', 'string', 'false']}
    defaultValue=false
/>
<PropListing
    name=y2AxisTitle
    description="Name to show beside y2 axis. If 'true', formatted column name is used."
    options={['true', 'string', 'false']}
    defaultValue=false
/>
<PropListing
    name=xGridlines
    description="Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=yGridlines
    description="Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=y2Gridlines
    description="Turns on/off gridlines extending from y2-axis tick marks (horizontal lines when swapXY=false)"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=xAxisLabels
    description="Turns on/off value labels on the x-axis"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=yAxisLabels
    description="Turns on/off value labels on the y-axis"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=y2AxisLabels
    description="Turns on/off value labels on the y2-axis"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=xBaseline
    description="Turns on/off thick axis line (line appears at y=0)"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name=yBaseline
    description="Turns on/off thick axis line (line appears directly alongside the y-axis labels)"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=y2Baseline
    description="Turns on/off thick axis line (line appears directly alongside the y2-axis labels)"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=xTickMarks
    description="Turns on/off tick marks for each of the x-axis labels"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=yTickMarks
    description="Turns on/off tick marks for each of the y-axis labels"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=y2TickMarks
    description="Turns on/off tick marks for each of the y2-axis labels"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=yMin
    description="Starting value for the y-axis"
    options="number"
/>
<PropListing
    name=yMax
    description="Maximum value for the y-axis"
    options="number"
/>
<PropListing
    name=yScale
    description="Whether to scale the y-axis to fit your data. `yMin` and `yMax` take precedence over `yScale`"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=y2Min
    description="Starting value for the y2-axis"
    options="number"
/>
<PropListing
    name=y2Max
    description="Maximum value for the y2-axis"
    options="number"
/>
<PropListing
    name=y2Scale
    description="Whether to scale the y-axis to fit your data. `y2Min` and `y2Max` take precedence over `y2Scale`"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=showAllXAxisLabels
    description="Force every x-axis value to be shown. This can truncate labels if there are too many."
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name=yAxisColor
    description="Turns on/off color on the y-axis (turned on by default when secondary y-axis is used). Can also be used to set a specific color"
    options={['true', 'false', 'color string (CSS name | hexademical | RGB | HSL)']}
    defaultValue="true when y2 used; false otherwise"
/>

### Chart

<PropListing
    name=title
    description="Chart title. Appears at top left of chart."
    options="string"
/>
<PropListing
    name=subtitle
    description="Chart subtitle. Appears just under title."
    options="string"
/>
<PropListing
    name=legend
    description="Turns legend on or off. Legend appears at top center of chart."
    options={['true', 'false']}
    defaultValue="true for multiple series"
/>
<PropListing
    name=chartAreaHeight
    description="Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX."
    options="number"
    defaultValue=180
/>
<PropListing
    name=renderer
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    options={['canvas', 'svg']}
    defaultValue=canvas
/>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

### Custom Echarts Options

<PropListing
    name=echartsOptions
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleOption:'exampleValue'}}`}"
/>
<PropListing
    name=seriesOptions
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
/>
<PropListing
    name=printEchartsConfig
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    options={['true', 'false']}
    defaultValue=false
/>

### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>



## Annotations

```sql target_data
select 8333 as target, '100k ARR' as name
```

Bar charts can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

<BarChart data={orders_by_month} x=month y=sales>
  <ReferenceArea xMin='2020-03-14' xMax='2021-05-01' label='COVID-19 Lockdown'/>
  <ReferenceLine data={target_data} y=target label=name/>
</BarChart>

```html
<BarChart data={orders_by_month} x=month y=sales>
  <ReferenceArea xMin='2020-03-14' xMax='2021-05-01' label='COVID-19 Lockdown'/>
  <ReferenceLine data={target_data} y=target label=name/>
</BarChart>
```


---
evidence/sites/docs/pages/components/big-link/index.md
---
---
title: Big Link
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
      <BigLink href='/components/big-link/'>My Big Link</BigLink> 
    </div>

```markdown
<BigLink href='/components/big-link/'>
  My Big Link
</BigLink>
```
</DocTab>

## Options

<PropListing name="href" required options='string'>

Renders a link that, when clicked, navigates to the specified URL. It can accept either a full external link (e.g. `https://google.com`) or link to another page within your evidence app (e.g. `/sales/performance`).
</PropListing>


---
evidence/sites/docs/pages/components/dropdown/index.md
---
---
title: Dropdown
sidebar_position: 1
---

Creates a dropdown menu with a list of options that can be selected. The selected option can be used to filter queries or in markdown.

To see how to filter a query using a dropdown, see [Filters](/core-concepts/filters).

```sql categories
select distinct category as category_name, upper(left(category, 3)) as abbrev from needful_things.orders
```

<DocTab>
    <div slot='preview'>
        <Dropdown data={categories} name=category1 value=category_name title="Select a Category" defaultValue="Sinister Toys"/>

        Selected: {inputs.category1.value}
    </div>

````markdown
<Dropdown 
    data={categories} 
    name=category1 
    value=category_name 
    title="Select a Category" 
    defaultValue="Sinister Toys"
/>

Selected: {inputs.category1.value}
````
</DocTab>

## Examples

### Dropdown using Options from a Query

<DocTab>
    <div slot='preview'>
        <Dropdown data={categories} name=category2 value=category_name/>
        
        Selected: {inputs.category2.value}
    </div>

````markdown
<Dropdown 
    data={categories} 
    name=category2 
    value=category_name 
/>
````

Selected: {inputs.category2.value}
</DocTab>

### With a Title

<DocTab>
    <div slot='preview'>
        <Dropdown data={categories} name=category3 value=category_name title="Select a Category" defaultValue="Sinister Toys"/>
        
        Selected: {inputs.category3.value}
    </div>

````markdown
<Dropdown 
    data={categories} 
    name=category3 
    value=category_name 
    title="Select a Category" 
    defaultValue="Sinister Toys"
/>

Selected: {inputs.category3.value}
````

</DocTab>

### With a Default Value


<DocTab>
    <div slot='preview'>
        <Dropdown
            data={categories} 
            name=category4
            value=category_name
            title="Select a Category"
            defaultValue="Odd Equipment"
        />

        Selected: {inputs.category4.value}
    </div>

````markdown
<Dropdown
    data={categories} 
    name=category4
    value=category_name
    title="Select a Category"
    defaultValue="Odd Equipment"
/>

Selected: {inputs.category4.value}
````
</DocTab>


### With Hardcoded Options

<DocTab>
    <div slot='preview'>
        <Dropdown name=hardcoded>
            <DropdownOption valueLabel="Option One" value="1" />
            <DropdownOption valueLabel="Option Two" value="2" />
            <DropdownOption valueLabel="Option Three" value="3" />
        </Dropdown>
        
        Selected: {inputs.hardcoded.value}
    </div>

````markdown
<Dropdown name=hardcoded>
    <DropdownOption valueLabel="Option One" value="1" />
    <DropdownOption valueLabel="Option Two" value="2" />
    <DropdownOption valueLabel="Option Three" value="3" />
</Dropdown>

Selected: {inputs.hardcoded.value}
````
</DocTab>

### Alternative Labels

This example uses a column called `abbrev`, which contains an alternate label for each category

<DocTab>
    <div slot='preview'>
        <Dropdown
            data={categories} 
            name=category_abbrev
            value=category_name
            label=abbrev
        />

        Selected: {inputs.category_abbrev.value}
    </div>

````markdown
<Dropdown
    data={categories} 
    name=category_abbrev
    value=category_name
    label=abbrev
/>
````

Selected: {inputs.category_abbrev.value}
</DocTab>


### Multi-Select

When using multi-select dropdowns, you need to use an alternative SQL expression:

`where column_name IN ${inputs.my_input.value}`

Note: 
- The use of the IN operator
- No single quotes used around the `${}`

<DocTab>
    <div slot='preview'>
        <Dropdown
            data={categories} 
            name=category_multi
            value=category_name
            multiple=true
        />
        
        Selected: {inputs.category_multi.value}
    </div>

````markdown
<Dropdown
    data={categories} 
    name=category_multi
    value=category_name
    multiple=true
/>

Selected: {inputs.category_multi.value}
````
</DocTab>




### Filtering a Query


```sql order_history
select id, order_datetime, category, item, sales  from needful_things.orders
limit 100
```

Starting with this table of orders:

<DocTab>
    <div slot='preview'>
        <DataTable data={order_history}/>
    </div>

````markdown
```sql order_history
select id, order_datetime, category, item, sales  from needful_things.orders
limit 100
```

<DataTable data={order_history}/>
````
</DocTab>

Use this input to filter the results:

```sql orders_filtered
select * from ${order_history}
where category in ${inputs.category.value}
```

<DocTab>
    <div slot='preview'>
        <Dropdown
            data={categories} 
            name=category
            value=category_name
            multiple=true
            defaultValue={['Sinister Toys']}
        />

        Filtered Row Count: {orders_filtered.length}

        <DataTable data={orders_filtered}/>
    </div>

````markdown
<Dropdown
    data={query_name} 
    name=name_of_dropdown
    value=column_name
/>

```sql filtered_query
select *
from source_name.table
where column_name like '${inputs.name_of_dropdown.value}'
```

Filtered Row Count: {orders_filtered.length}

<DataTable data={orders_filtered}/>
````
</DocTab>


### Multiple defaultValues

<DocTab>
    <div slot='preview'>
        <Dropdown
            data={categories} 
            name=category_multi_default
            value=category_name
            multiple=true
            defaultValue={['Sinister Toys', 'Mysterious Apparel']}
        />

        Selected: {inputs.category_multi_default.value}
    </div>

````svelte
<Dropdown
    data={query_name} 
    name=name_of_dropdown
    value=column_name
    multiple=true
	defaultValue={['Sinister Toys', 'Mysterious Apparel']}
/>

Selected: {inputs.category_multi_default.value}
````
</DocTab>

### Select all by Default Value with Multiple

Select and return all values in the dropdown list, requires "multiple" prop.

<DocTab>
    <div slot='preview'>
        <Dropdown
            data={categories} 
            name=category_multi_selectAllByDefault
            value=category_name
            title="Select a Category"
            multiple=true
            selectAllByDefault=true
        />

        Selected: {inputs.category_multi_selectAllByDefault.value}
    </div>

````markdown
<Dropdown
    data={categories} 
    name=category_multi_selectAllByDefault
    value=category_name
    title="Select a Category"
    multiple=true
    selectAllByDefault=true
/>

Selected: {inputs.category_multi_selectAllByDefault.value}
````
</DocTab>

# Dropdown

## Options

<PropListing 
    name="name"
    description="Name of the dropdown, used to reference the selected value elsewhere as {`{inputs.name.value}`}"
    required
/>
<PropListing 
    name="data"
    description="Query name, wrapped in curly braces"
    options="query name"
/>
<PropListing 
    name="value"
    description="Column name from the query containing values to pick from"
    options="column name"
/>
<PropListing 
    name="multiple"
    description="Enables multi-select which returns a list"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="defaultValue"
    description="Value to use when the dropdown is first loaded. Must be one of the options in the dropdown. Arrays supported for multi-select."
    options="value from dropdown | array of values e.g. {`{['Value 1', 'Value 2']}`}"
/>
<PropListing 
    name="selectAllByDefault"
    description="Selects and returns all values, multiple property required"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="noDefault"
    description="Stops any default from being selected. Overrides any set `defaultValue`."
    options="boolean"
    defaultValue="false"
/>
<PropListing 
    name="disableSelectAll"
    description="Removes the `Select all` button. Recommended for large datasets."
    options="boolean"
    defaultValue="false"
/>
<PropListing 
    name="label"
    description="Column name from the query containing labels to display instead of the values (e.g., you may want to have the drop-down use `customer_id` as the value, but show `customer_name` to your users)"
    options="column name"
    defaultValue="Uses the column in value"
/>
<PropListing 
    name="title"
    description="Title to display above the dropdown"
    options="string"
/>
<PropListing 
    name="order"
    description="Column to sort options by, with optional ordering keyword"
    options="column name [ asc | desc ]"
    defaultValue="Ascending based on dropdown value (or label, if specified)"
/>
<PropListing 
    name="where"
    description="SQL where fragment to filter options by (e.g., where sales > 40000)"
    options="SQL where clause"
/>
<PropListing 
    name="hideDuringPrint"
    description="Hide the component when the report is printed"
    options={["true", "false"]}
    defaultValue="true"
/>

# DropdownOption

## Options

The DropdownOption component can be used to manually add options to a dropdown. This is useful to add a default option, or to add options that are not in a query.

<PropListing 
    name="value"
    description="Value to use when the option is selected"
    required
/>
<PropListing 
    name="valueLabel"
    description="Label to display for the option in the dropdown"
    defaultValue="Uses the value"
/>


---
evidence/sites/docs/pages/components/modal/index.md
---
---
title: Modal
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
        <Modal title="Title" buttonText='Open Modal'> 
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
        Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
        Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
        </Modal>
    </div>

```markdown
<Modal title="Title" buttonText='Open Modal'> 

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 

</Modal>
```
</DocTab>

## Styling

Modals support markdown in the body, but you need to leave whitespace between the text and the modal tags. 

<DocTab>
    <div slot='preview'>
        <Modal title="Title" buttonText='Open Modal'>

        **bold** and _italic_ text is supported.

        </Modal>
    </div>

```markdown
<Modal title="Title" buttonText='Open Modal'>

**bold** and _italic_ text is supported.

</Modal>
```
</DocTab>


## Including Components

```sql orders_by_month
select order_month, sum(sales) as sales_usd0k from needful_things.orders
group by all
```

You can include components inside a Modal, like charts or tables:

<DocTab>
    <div slot='preview'>
        <Modal title='Chart Example' buttonText='Click to See Chart'>
            <LineChart
                data={orders_by_month}
                x=order_month
                y=sales_usd0k
            />
        </Modal>
    </div>

```svelte
<Modal title='Chart Example' buttonText='Click to See Chart'>
    <LineChart
        data={orders_by_month}
        x=order_month
        y=sales_usd0k
    />
</Modal>
```
</DocTab>

## Options

<PropListing
    name=buttonText
    description="The text displayed on the button that triggers the modal."
    required
    options=string
/>
<PropListing
    name=title
    description="The title of the modal. Visible at the top of the modal when it is open"
    options=string
/>
<PropListing
    name=open
    description="A boolean value that determines whether the modal is closed by default."
    options={['true', 'false']}
    default=false
/>

---
evidence/sites/docs/pages/components/heatmap/index.md
---
---
title: Heatmap
sidebar_position: 1
---

```orders
select category, dayname(order_datetime) as day, dayofweek(order_datetime) as day_num, count(*) as order_count from needful_things.orders
group by all
order by category, day_num  
```

<DocTab>
    <div slot='preview'>
        <Heatmap 
            data={orders} 
            x=day 
            y=category 
            value=order_count 
            valueFmt=usd 
        />
    </div>

```markdown
<Heatmap 
    data={orders} 
    x=day 
    y=category 
    value=order_count 
    valueFmt=usd 
/>
```
</DocTab>

## Data Structure

Heatmap requires your data to contain 2 categorical columns (1 for the x-axis and 1 for the y-axis) and 1 numeric column.

#### Example

```sql example
SELECT 'West' as region, 'A' as product, 120 as sales
UNION ALL
SELECT 'West', 'B', 200
UNION ALL
SELECT 'West', 'C', 150
UNION ALL
SELECT 'East', 'A', 110
UNION ALL
SELECT 'East', 'B', 315
UNION ALL
SELECT 'East', 'C', 450
```

<DataTable data={example} />


### Unpivoting your Data
If you have data spread across columns, you can use the `UNPIVOT` feature in your SQL query to prepare the data for the heatmap.

#### Example
If you have a query result called `region_sales`:

```sql region_sales
SELECT 'West' as region, 120 as "A", 200 as "B", 150 as "C"
UNION ALL
SELECT 'East', 110, 315, 450
```

<DataTable data={region_sales} formatColumnTitles=false/>

You can use `UNPIVOT` like so:

```sql
UNPIVOT ${region_sales}
on COLUMNS(* EXCLUDE(region))
INTO
    NAME product
    VALUE sales
```

Which will return this table, which can be passed into the Heatmap:

```sql region_sales_unpivoted
SELECT 'West' as region, 'A' as product, 120 as sales
UNION ALL
SELECT 'West', 'B', 200
UNION ALL
SELECT 'West', 'C', 150
UNION ALL
SELECT 'East', 'A', 110
UNION ALL
SELECT 'East', 'B', 315
UNION ALL
SELECT 'East', 'C', 450
order by region desc, product
```

<DataTable data={region_sales_unpivoted} formatColumnTitles=false />


<Alert status=info>

**Note on Date Columns**

Heatmap currently only works with string columns. If you would like to use a date column, cast it to a string in your SQL query before passing it into the Heatmap

</Alert>


## Examples

### Basic Heatmap

<DocTab>
    <div slot='preview'>
        <Heatmap 
            data={orders} 
            x=day 
            y=category 
            value=order_count 
            valueFmt=usd 
        />
    </div>

```markdown
<Heatmap 
    data={orders} 
    x=day 
    y=category 
    value=order_count 
    valueFmt=usd 
/>
```
</DocTab>


### Custom Color Palette


<DocTab>
    <div slot='preview'>
        <Heatmap 
            data={orders} 
            x=day 
            y=category 
            value=order_count 
            valueFmt=usd 
            colorPalette={['white', 'green']}
        />
    </div>

```svelte
<Heatmap 
    data={orders} 
    x=day 
    y=category 
    value=order_count 
    valueFmt=usd 
    colorPalette={['white', 'green']}
/>
```
</DocTab>

### Rotated Labels


```item_state
select item, state, count(1) as orders from needful_things.orders
group by all
order by state asc, item asc
```

<DocTab>
    <div slot='preview'>
        <Heatmap 
            data={item_state} 
            x=item 
            y=state 
            value=orders 
            xLabelRotation=-45
            colorPalette={['white', 'maroon']} 
            title="Item Sales"
            subtitle="By State"
            rightPadding=40
            cellHeight=25
            nullsZero=false
        />
    </div>

```svelte
<Heatmap 
    data={item_state} 
    x=item 
    y=state 
    value=orders 
    xLabelRotation=-45
    colorPalette={['white', 'maroon']} 
    title="Item Sales"
    subtitle="By State"
    rightPadding=40
    cellHeight=25
    nullsZero=false
/>
```
</DocTab>

## Options

### Data

<PropListing
    name=data
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing
    name=x
    description="Categorical column to use for the x-axis. If you want to use dates, cast them to strings in your query first"
    required=true
    options="column name"
/>
<PropListing
    name=y
    description="Categorical column to use for the y-axis. If you want to use dates, cast them to strings in your query first"
    required=true
    options="column name"
/>
<PropListing
    name=value
    description="Numeric column to use for the y-axis"
    required=true
    options="column name"
/>
<PropListing
    name=min
    description="Minimum number for the heatmap's color scale"
    options="number"
    defaultValue="min of value column"
/>
<PropListing
    name=max
    description="Maximum number for the heatmap's color scale"
    options="number"
    defaultValue="max of value column"
/>
<PropListing
    name=emptySet
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    options={['error', 'warn', 'pass']}
    defaultValue="error"
/>
<PropListing
    name=emptyMessage
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    options="string"
    defaultValue="No records"
/>

### Formatting & Styling

<PropListing
    name=nullsZero
    description="Whether to treats nulls or missing values as zero"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing
    name=zeroDisplay
    description="String to display in place of zeros"
    options="string"
/>
<PropListing
    name=colorPalette
    description="Array of colors to form the gradient for the heatmap."
    options="array of color codes - e.g., {`{['navy', 'white', '#c9c9c9']}`}"
/>
<PropListing
    name=valueFmt
    description="Format to use for value column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=cellHeight
    description="Number representing the height of cells in the heatmap"
    options="number"
    defaultValue="30"
/>
<PropListing
    name=leftPadding
    description="Number representing the padding (whitespace) on the left side of the chart. Useful to avoid labels getting cut off"
    options="number"
    defaultValue="0"
/>
<PropListing
    name=rightPadding
    description="Number representing the padding (whitespace) on the left side of the chart. Useful to avoid labels getting cut off"
    options="number"
    defaultValue="2"
/>
<PropListing
    name=valueLabels
    description="Turn on or off value labels in the heatmap cells"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing
    name=mobileValueLabels
    description="Turn on or off value labels in the heatmap cells when app is viewed on a mobile device screen size"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing
    name=borders
    description="Turn on or off borders around cells. Default is to show light grey border around each cell. To customize border appearance, use `echartsOptions`"
    options={['true', 'false']}
    defaultValue="true"
/>

### Axes

<PropListing
    name=xTickMarks
    description="Turns on/off tick marks for the x-axis labels"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing
    name=yTickMarks
    description="Turns on/off tick marks for the y-axis labels"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing
    name=xLabelRotation
    description="Degrees to rotate the labels on the x-axis. Can be negative number to reverse direction. `45` and `-45` are common options"
    options="number"
    defaultValue="0"
/>
<PropListing
    name=xAxisPosition
    description="Position of x-axis and labels. Can be top or bottom. top recommended for longer charts"
    options={['top', 'bottom']}
    defaultValue="top"
/>
<PropListing
    name=xSort
    description="Column to sort x values by"
    options="column name"
/>
<PropListing
    name=xSortOrder
    description="Sets direction of sort"
    options={['asc', 'desc']}
    defaultValue="asc"
/>
<PropListing
    name=ySort
    description="Column to sort y values by"
    options="column name"
/>
<PropListing
    name=ySortOrder
    description="Sets direction of sort"
    options={['asc', 'desc']}
    defaultValue="asc"
/>

### Chart

<PropListing
    name=title
    description="Chart title. Appears at top left of chart."
    options="string"
/>
<PropListing
    name=subtitle
    description="Chart subtitle. Appears just under title."
    options="string"
/>
<PropListing
    name=chartAreaHeight
    description="Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX."
    options="number"
    defaultValue="auto set based on y-axis values"
/>
<PropListing
    name=legend
    description="Turn on or off the legend"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing
    name=filter
    description="Allow draggable filtering on the legend. Must be used with `legend=true`"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing
    name=renderer
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    options={['canvas', 'svg']}
    defaultValue="canvas"
/>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>


### Custom Echarts Options

<PropListing
    name=echartsOptions
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleOption:'exampleValue'}}`}"
/>
<PropListing
    name=seriesOptions
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
/>
<PropListing
    name=printEchartsConfig
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    options={['true', 'false']}
    defaultValue="false"
/>

### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>


---
evidence/sites/docs/pages/components/tabs/index.md
---
---
title: Tabs
sidebar_position: 1
---

<DocTab>
  <div slot='preview'>
    <Tabs>
        <Tab label="First Tab">
            Content of the First Tab

            You can use **markdown** here too!
        </Tab>
        <Tab label="Second Tab">
            Content of the Second Tab

            Here's a [link](https://www.google.com)
        </Tab>
    </Tabs>
  </div>

```markdown
<Tabs>
    <Tab label="First Tab">
        Content of the First Tab

        You can use **markdown** here too!
    </Tab>
    <Tab label="Second Tab">
        Content of the Second Tab

        Here's a [link](https://www.google.com)
    </Tab>
</Tabs>
```
</DocTab>




## Examples

### Custom Color

<DocTab>
  <div slot='preview'>
    <Tabs color=#ff0000>
        <Tab label="Red Tabs">
            Content of the First Tab
        </Tab>
        <Tab label="Second Tab">
            Content of the Second Tab
        </Tab>
    </Tabs>
  </div>

```markdown
<Tabs color=#ff0000>
    <Tab label="Red Tabs">
        Content of the First Tab
    </Tab>
    <Tab label="Second Tab">
        Content of the Second Tab
    </Tab>
</Tabs>
```
</DocTab>

### Persist Selected Tab to URL

<DocTab>
  <div slot='preview'>
    <Tabs id="example-tab">
        <Tab label="One">
            Click Second id Tab and notice the the url updates!
        </Tab>
        <Tab label="Two">
            Refresh the page and the tab you selected persists!
        </Tab>
    </Tabs>
  </div>

```markdown
<Tabs id="example-tab">
    <Tab label="One">
        Click Second id Tab and notice the the url updates!
    </Tab>
    <Tab label="Two">
        Refresh the page and the tab you selected persists!
    </Tab>
</Tabs>
```
</DocTab>

# Tabs

## Options

<PropListing
    name="id"
    options="string"
>

Unique Id for this set of tabs. When set, the selected tab is included in the URL so it can be shared.

</PropListing>
<PropListing
    name="color"
    options="Any valid hex, rgb, or hsl string"
    defaultValue="blue"
>

Color for the active tab.

</PropListing>

# Tab

## Options

<PropListing
    name="label"
    required
>

Label for the tab

</PropListing>
<PropListing
    name="id"
>

Unique Id for this tab. Only needed if 2 tabs have the same label (not recommended).

</PropListing>

---
evidence/sites/docs/pages/components/sparkline/index.md
---
---
title: Sparkline
sidebar_position: 1
---

```sql orders_by_month
select order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders
group by all
```

```sql orders_by_category
select category, order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders
group by all
```

<DocTab>
  <div slot='preview'>
    <Sparkline 
        data={orders_by_month}
        dateCol=month
        valueCol=sales_usd0k 
        color=navy
    />
  </div>

```markdown
<Sparkline 
    data={sales_by_date} 
    dateCol=date 
    valueCol=sales 
/>
```
</DocTab>

## Examples

### Connected Sparkline

<DocTab>
  <div slot='preview'>
    <Sparkline data={orders_by_month} dateCol=month valueCol=sales_usd0k type=bar  valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>
    <Sparkline data={orders_by_month} dateCol=month valueCol=sales_usd0k type=area color=maroon valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>
    <Sparkline data={orders_by_month} dateCol=month valueCol=sales_usd0k type=line color=purple valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>
  </div>

```html
<Sparkline data={sales_by_date} dateCol=date valueCol=sales type=bar  valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>
<Sparkline data={sales_by_date} dateCol=date valueCol=sales type=area color=maroon valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>
<Sparkline data={sales_by_date} dateCol=date valueCol=sales type=line color=purple valueFmt=eur dateFmt=mmm connectGroup=mysparkline/>
```
</DocTab>


## Options

### Data

<PropListing
    name="data"
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name="dateCol"
    required
    options="column name"
>

Categorical column to use for the x-axis

</PropListing>
<PropListing
    name="valueCol"
    required
    options="column name"
>

Numeric column to use for the y-axis

</PropListing>
<PropListing
    name="type"
    options={['line', 'area', 'bar']}
    defaultValue="line"
>

Chart type for sparkline

</PropListing>
<PropListing
    name="emptySet"
    options={['error', 'warn', 'pass']}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name="emptyMessage"
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>

### Formatting & Styling

<PropListing
    name="color"
    options="CSS name | hexademical | RGB | HSL"
>

Color to use for the visualization. For area sparklines, choose the color for the line and the area color will be automatically appplied in a lighter shade.

</PropListing>
<PropListing
    name="valueFmt"
    options="Excel-style format | built-in format name | custom format name"
>

Format to use for value column ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="dateFmt"
    options="Excel-style format | built-in format name | custom format name"
>

Format to use for date column ([see available formats](/core-concepts/formatting))

</PropListing>

### Axes

<PropListing
    name="yScale"
    options={['true', 'false']}
    defaultValue="false"
>

Whether to truncate the y-axis to enhance visibility

</PropListing>

### Sizing

<PropListing
    name="height"
    options="number"
    defaultValue="15"
>

Height of sparkline in pixels

</PropListing>
<PropListing
    name="width"
    options="number"
    defaultValue="50"
>

Width of sparkline in pixels

</PropListing>

### Interactivity

<PropListing
    name="interactive"
    options={['true', 'false']}
    defaultValue="true"
>

Turn on or off tooltip behaviour on hover. If off, chart will be a staticly rendered SVG (better for page performance). If on, you will be able to see dates/values when hovering over the sparkline

</PropListing>
<PropListing
    name="connectGroup"
    options="string"
>

Group name to connect this sparkline to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected

</PropListing>


---
evidence/sites/docs/pages/components/all-components/index.md
---
---
sidebar_position: 0
title: All Components
hide_title: false
hide_table_of_contents: false
description:  A list of all the components available in the Evidence library.
---

## Data Components

<Grid cols=2>

<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
    <a href="/components/value">

    ### [Value](/components/value)

    <img src="/img/value-needful-things.png" alt="Value" class="markdown">
    </a>
</div>
<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    ### [Big Value](/components/big-value)
    <a href="/components/big-value">

        <img src="/img/bigvalue-needful-things.png" alt="Big Value" class="markdown">
    </a>
</div>
<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    ### [Data Table](/components/data-table)
    <a href="/components/data-table">

        <img src="/img/datatable-all.png" alt="Big Value" class="markdown">
    </a>
</div>
<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    ### [Dimension Grid](/components/dimension-grid)
    <a href="/components/dimension-grid">

    <img src="/img/dimension-grid.png" alt="Dimension Grid" class="markdown">

    </a>
</div>
    
</Grid>

## Charts





### [Line](/components/line-chart)

<Grid cols=2>
<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
    <b>Line Chart - Single Series</b>
    <a href="/components/line-chart#line">

    <img src="/img/exg-line-nt.svg" alt="line" class="markdown">

    </a>
</div>
<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
    <b>Line Chart - Multiple Series</b>

    <a href="/components/line-chart#multi-series-line">

    <img src="/img/exg-multi-series-line-nt.svg" alt="multi-series-line" class="markdown">

    </a>
</div>
<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
    <b>Line Chart - Multiple Y Columns</b>

    <a href="/components/line-chart#multiple-y-columns">

    <img src="/img/exg-multiple-y-line-nt.svg" alt="multiple-y-line" class="markdown">

    </a>
</div>
</Grid>

### [Area](/components/area-chart)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Area Chart</b>

        <a href="/components/area-chart#area">
    
        <img src="/img/exg-area-nt.svg" alt="area" class=markdown/>
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Stacked Area Chart</b>
        <a href="/components/area-chart#stacked-area">
    
        <img src="/img/exg-stacked-area-nt.svg" alt="stacked-area" class=markdown/>
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>100% Stacked Area Chart</b>
        <a href="/components/area-chart#100-stacked-area">
    
        <img src="/img/100-stacked-area.svg" alt="100-stacked-area" class=markdown/>

    
        </a>
    </div>
</Grid>

### [Bar](/components/bar-chart)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Bar Chart</b>
        <a href="/components/bar-chart#bar">
    
        <img src="/img/exg-bar-nt.svg" alt="bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Stacked Bar Chart</b>
        <a href="/components/bar-chart#stacked-bar">
    
        <img src="/img/exg-stacked-bar-nt.svg" alt="stacked-bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>100% Stacked Bar Chart</b>
        <a href="/components/bar-chart#100-stacked-bar">
    
        <img src="/img/100-stacked-bar.svg" alt="stacked-bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Grouped Bar Chart</b>
        <a href="/components/bar-chart#grouped-bar">
    
        <img src="/img/exg-grouped-bar-nt.svg" alt="grouped-bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Horizontal Bar Chart</b>
        <a href="/components/bar-chart#horizontal-bar">
    
        <img src="/img/exg-horizontal-bar-nt.svg" alt="horizontal-bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Horizontal Stacked Bar Chart</b>
        <a href="/components/bar-chart#horizontal-stacked-bar">
    
        <img src="/img/exg-horizontal-stacked-bar-nt.svg" alt="horizontal-stacked-bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Horizontal 100% Stacked Bar Chart</b>
        <a href="/components/bar-chart#horizontal-100-stacked-bar">
    
        <img src="/img/100-horiz-stacked-bar.svg" alt="horizontal-stacked-bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Horizontal Grouped Bar Chart</b>
        <a href="/components/bar-chart#horizontal-grouped-bar">
    
        <img src="/img/exg-horizontal-grouped-bar-nt.svg" alt="horizontal-grouped-bar" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Long Bar Chart</b>
        <a href="/components/bar-chart#long-bar-chart">
    
        <img src="/img/exg-long-bar.svg" alt="long-bar" class="markdown">
    
        </a>
    </div>
</Grid>

### [Scatter](/components/scatter-plot)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Scatter Plot</b>
        <a href="/components/scatter-plot#scatter-plot">
    
        <img src="/img/exg-scatter-nt.svg" alt="scatter" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Scatter Plot - Multiple Series</b>
        <a href="/components/scatter-plot#multi-series-scatter-plot">
    
        <img src="/img/exg-multi-series-scatter-nt.svg" alt="multi-series-scatter" class="markdown">
    
        </a>
    </div>
</Grid>

### [Bubble](/components/bubble-chart)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Bubble Chart</b>
        <a href="/components/bubble-chart#bubble">
    
        <img src="/img/exg-bubble-nt.svg" alt="bubble" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Bubble Chart - Multiple Series</b>
        <a href="/components/bubble-chart#multi-series-bubble">
    
        <img src="/img/exg-multi-series-bubble-nt.svg" alt="multi-series-bubble" class="markdown">
    
        </a>
    </div>
</Grid>

### [Funnel](/components/funnel-chart)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Funnel Default</b>
        <a href="/components/funnel-chart">
    
        <img src="/img/funnel-default.png" alt="map" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Funnel Side Aligned</b>
        <a href="/components/funnel-chart#alignment">
    
        <img src="/img/funnel-align.png" alt="map" class="markdown">
    
        </a>
    </div>
</Grid>

### [Sankey](/components/sankey-diagram)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Default Sankey</b>
        <a href="/components/sankey-diagram">
    
        <img src="/img/sankey_example.png" alt="map" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Vertical Sankey</b>
        <a href="/components/sankey-diagram#vertical">
    
        <img src="/img/exg-sankey-vertical.svg" alt="map" class="markdown">
    
        </a>
    </div>
</Grid>

### [Heatmap](/components/heatmap)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Basic Heatmap</b>
        <a href="/components/heatmap#basic-heatmap">
    
        <img src="/img/heatmap-basic.png" alt="map" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Customized Heatmap</b>
        <a href="/components/heatmap#rotated-labels">
    
        <img src="/img/heatmap-item-state.png" alt="map" class="markdown">
    
        </a>
    </div>
</Grid>

### [Calendar Heatmap](/components/heatmap)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Default Calendar Heatmap</b>
        <a href="/components/calendar-heatmap#custom-color-palette">
    
        <img src="/img/calendar-heatmap-customcolor.png" alt="map" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
       <b> Multi-year Calendar Heatmap</b>
        <a href="/components/calendar-heatmap#multi-year-calendar-heatmap">
    
        <img src="/img/calendar-heatmap-multiyear.png" alt="map" class="markdown">
    
        </a>
    </div>
</Grid>

### [Histogram](/components/histogram)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Default Histogram</b>
        <a href="/components/histogram#histogram">
    
        <img src="/img/exg-histogram-nt.svg" alt="histogram" class="markdown">
    
        </a>
    </div>
</Grid>

### [Box Plot](/components/box-plot)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Default Box Plot</b>
        <a href="/components/box-plot#basic-box-plot">
    
        <img src="/img/boxplot-basic.png" alt="box" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Horizontal Box Plot</b>
        <a href="/components/box-plot#horizontal-box-plot">
    
        <img src="/img/boxplot-horiz.png" alt="box-horiz" class="markdown">
    
        </a>
    </div>
</Grid>

### [Mixed Type Charts](/components/mixed-type-charts)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Bar and Line</b>
        <a href="/components/mixed-type-charts">
    
        <img src="/img/bar-line.png" alt="bar-line" class="markdown">
    
        </a>
    </div>
</Grid>

### [Annotations](/components/annotations)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Reference Line - y-axis</b>
        <a href="/components/annotations#y-axis-defined-inline">
    
        <img src="/img/refline-y-basic.png" alt="refline-y-basic" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
       <b> Reference Line - x-axis</b>
        <a href="/components/annotations#x-axis-from-data">
    
        <img src="/img/refline-x-multi.png" alt="refline-x-multi" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Reference Area - x-axis</b>
        <a href="/components/annotations#x-axis-from-data-1">
    
        <img src="/img/refarea-x-multi-data.png" alt="refarea-x-multi-data" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Reference Area - y-axis</b>
        <a href="/components/annotations#y-axis-defined-inline-1">
    
        <img src="/img/refarea-y-ranges.png" alt="refarea-x-multi-data" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Reference Area - Box</b>
        <a href="/components/annotations#reference-area-box">
    
        <img src="/img/refarea-box.png" alt="refarea-box" class="markdown">
    
        </a>
    </div>
</Grid>

### Maps

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Area Map</b>
        <a href="/components/area-map">
    
        <img src="/img/area-map.png" alt="map" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Point Map</b>
        <a href="/components/point-map">
    
        <img src="/img/point-map.png" alt="map" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Bubble Map</b>
        <a href="/components/bubble-map">
    
        <img src="/img/bubble-map.png" alt="map" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Base Map</b>
    
        <a href="/components/base-map">
        <img src="/img/base-map.png" alt="map" class="markdown">
        </a>
    
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>US Map</b>
        <a href="/components/us-map">
    
        <img src="/img/map-blue2.png" alt="map" class="markdown">
    
        </a>
    </div>
</Grid>

### [Custom ECharts](/components/custom-echarts)

<Grid>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Custom ECharts Treemap</b>
        <a href="/components/custom-echarts#simple-treemap">
    
        <img src="/img/custom-treemap.png" alt="custom-chart" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Custom ECharts Funnel</b>
        <a href="/components/custom-echarts#funnel-chart">
    
        <img src="/img/custom-funnel.png" alt="custom-chart" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Custom ECharts Pie Chart</b>
        <a href="/components/custom-echarts#pie-chart">
    
        <img src="/img/custom-pie.png" alt="custom-chart" class="markdown">
    
        </a>
    </div>
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Custom ECharts Donut Chart</b>
        <a href="/components/custom-echarts#donut-chart">
    
        <img src="/img/custom-donut.png" alt="custom-chart" class="markdown">
    
        </a>
    </div>
    
    <div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">
        <b>Advanced ECharts Example</b>
    
            <a href="/components/custom-echarts#advanced-chart">
    
        <img src="/img/exg-custom-echarts-anscombe.svg" alt="custom-chart" class="markdown">
    
        </a>
    </div>
</Grid>

## UI Components

<Grid>


<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

### [Accordion](/components/accordion)

    <a href="/components/accordion">

    <img src="/img/accordion.png" alt="Accordion" class="markdown">

    </a>

</div>

<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

### [Alert](/components/alert)

    <a href="/components/alert">

    <img src="/img/alerts.png" alt="Alert" class="markdown">

    </a>

</div>

<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    
### [Details](/components/details)

<a href="/components/details">

<img src="/img/details-expanded.png" alt="Details" class="markdown">

</a>


</div>


<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

### [Grid](/components/grid)

<a href="/components/grid">

</a>
</div>

    

<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

### [Modal](/components/modal)

<a href="/components/modal">

<img src="/img/modal.png" alt="Modal" class="markdown">

</a>

</div>


<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

### [Tabs](/components/tabs)

<a href="/components/tabs">

<img src="/img/tabs.png" alt="Tabs" class="markdown">

</a>

</div>

</Grid>


## Input Components

<Grid>
    
<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    ### [Button Group](/components/button-group)

    <a href="/components/button-group">

    <img src="/img/button-group-title.png" alt="Button Group" class="markdown">

    </a>
    
</div>

<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    ### [Dropdown](/components/dropdown)

    <a href="/components/dropdown">

    <img src="/img/dropdown.png" alt="Dropdown" class="markdown">

    </a>
</div>

<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    ### [TextInput](/components/text-input)

    <a href="/components/text-input">

    <img src="/img/text-input.png" alt="TextInput" class="markdown">

    </a>
</div>

<div class="border rounded-lg p-4 my-2 mx-1 hover:shadow-md transition">

    ### [DateRange](/components/date-range)

    <a href="/components/date-range">

    <img src="/img/date-range.png" alt="DateRange" class="markdown">

    </a>
</div>
</Grid>



<style>
    .markdown {
        @apply mt-2;
    }
</style>

---
evidence/sites/docs/pages/components/big-value/index.md
---
---
title: Big Value
sidebar_position: 1
queries: 
- orders_with_comparisons.sql
---

Big Value displays a large value, and can be configured to include a comparison and a sparkline.

<DocTab>
    <div slot='preview'>
      <BigValue 
        data={orders_with_comparisons} 
        value=num_orders
        sparkline=month
        comparison=order_growth
        comparisonFmt=pct1
        comparisonTitle="vs. Last Month"
      />
    </div>

```markdown
<BigValue 
  data={orders_with_comparisons} 
  value=num_orders
  sparkline=month
  comparison=order_growth
  comparisonFmt=pct1
  comparisonTitle="vs. Last Month"
/>
```
</DocTab>

## Examples

### Default

<DocTab>
    <div slot='preview'>
      <BigValue 
        data={orders_with_comparisons} 
        value=num_orders
      />
    </div>

```markdown
<BigValue 
  data={orders_with_comparisons} 
  value=num_orders
/>
```
</DocTab>

### Comparisons

<DocTab>
    <div slot='preview'>
      <BigValue 
        data={orders_with_comparisons} 
        value=num_orders
        comparison=order_growth
        comparisonFmt=pct1
        comparisonTitle="MoM"
      />
    </div>

```markdown
<BigValue 
  data={orders_with_comparisons} 
  value=num_orders
  comparison=order_growth
  comparisonFmt=pct1
  comparisonTitle="MoM"
/>
```
</DocTab>

### Multiple cards

Multiple cards will align themselves into a row.

<DocTab>
    <div slot='preview'>
      <BigValue 
        data={orders_with_comparisons} 
        value=sales
        fmt=usd0
        comparison=sales_growth
        comparisonFmt=pct1
        comparisonTitle="MoM"
      />
      <BigValue 
        data={orders_with_comparisons} 
        value=num_orders
        title="Orders"
        comparison=order_growth
        comparisonFmt=pct1
        comparisonTitle="MoM"
      />
      <BigValue 
        data={orders_with_comparisons} 
        value=aov
        title="Average Order Value"
        fmt=usd2
        comparison=aov_growth
        comparisonFmt=pct1
        comparisonTitle="MoM"
      />
    </div>

```markdown
<BigValue 
  data={orders_with_comparisons} 
  value=sales
  fmt=usd0
  comparison=sales_growth
  comparisonFmt=pct1
  comparisonTitle="MoM"
/>
<BigValue 
  data={orders_with_comparisons} 
  value=num_orders
  title="Orders"
  comparison=order_growth
  comparisonFmt=pct1
  comparisonTitle="MoM"
/>
<BigValue 
  data={orders_with_comparisons} 
  value=aov
  title="Average Order Value"
  fmt=usd2
  comparison=aov_growth
  comparisonFmt=pct1
  comparisonTitle="MoM"
/>
```
</DocTab>

### Linking to other pages

The link property makes the Value component clickable, allowing navigation to other pages.

<DocTab>
    <div slot='preview'>
      <BigValue 
        data={orders_with_comparisons} 
        value=num_orders
        sparkline=month
        comparison=order_growth
        comparisonFmt=pct1
        comparisonTitle="vs. Last Month"
        link='/components/big-value/'
      />
    </div>

```html
<BigValue 
  data={orders_with_comparisons} 
  value=num_orders
  sparkline=month
  comparison=order_growth
  comparisonFmt=pct1
  comparisonTitle="vs. Last Month"
  link='/components/big-value/'
/>
```
</DocTab>

### Non-Delta Comparisons

<DocTab>
    <div slot='preview'>
      <BigValue 
        data={orders_with_comparisons} 
        value=num_orders
        comparison=prev_month_orders
        comparisonTitle="Last Month"
        comparisonDelta=false
      />
    </div>

```html
<BigValue 
  data={orders_with_comparisons} 
  value=num_orders
  comparison=prev_month_orders
  comparisonTitle="Last Month"
  comparisonDelta=false
/>
```
</DocTab>

### Sparkline

<DocTab>
    <div slot='preview'>
      <BigValue 
        data={orders_with_comparisons} 
        value=sales
        sparkline=month
      />
    </div>

```html
<BigValue 
  data={orders_with_comparisons} 
  value=sales
  sparkline=month
/>
```
</DocTab>

## Options

### Data

<PropListing
    name="data"
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing
    name="value"
    description="Column to pull the main value from."
    required=true
    options="column name"
/>
<PropListing
    name="title"
    description="Title of the card."
    options="string"
    defaultValue="Title of the value column."
/>
<PropListing
    name="minWidth"
    description="Overrides min-width of component"
    options="% or px value"
    defaultValue="18%"
/>
<PropListing
    name="maxWidth"
    description="Adds a max-width to the component"
    options="% or px value"
/>
<PropListing
    name="fmt"
    description="Sets format for the value (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format | custom format"
/>
<PropListing
    name="emptySet"
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    options={['error', 'warn', 'pass']}
    defaultValue="error"
/>
<PropListing
    name="emptyMessage"
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    options="string"
    defaultValue="No records"
/>

<PropListing name="link">

Used to navigate to other pages. Can be a full external link like `https://google.com` or an internal link like `/sales/performance`
</PropListing>

### Comparison Options

<PropListing
    name="comparison"
    description="Column to pull the comparison value from."
    options="column name"
/>
<PropListing
    name="comparisonTitle"
    description="Text to the right of the comparison."
    options="string"
    defaultValue="Title of the comparison column."
/>
<PropListing
    name="comparisonDelta"
    description="Whether to display delta symbol and color"
    options={['true', 'false']}
    defaultValue=true
/>
<PropListing
    name="downIsGood"
    description="If present, negative comparison values appear in green, and positive values appear in red."
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name="neutralMin"
    description="Sets the bottom of the range for 'neutral' values - neutral values appear in grey rather than red or green"
    options="number"
    defaultValue=0
/>
<PropListing
    name="neutralMax"
    description="Sets the top of the range for 'neutral' values - neutral values appear in grey rather than red or green"
    options="number"
    defaultValue=0
/>
<PropListing
    name="comparisonFmt"
    description="Sets format for the comparison (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format | custom format"
/>


### Sparkline

<PropListing
    name="sparkline"
    description="Column to pull the date from to create the sparkline."
    options="column name"
/>
<PropListing
    name="sparklineType"
    description="Chart type for sparkline"
    options={['line', 'area', 'bar']}
    defaultValue="line"
/>
<PropListing
    name="sparklineValueFmt"
    description="Formatting for tooltip values"
    options="format code"
    defaultValue="same as fmt if supplied"
/>
<PropListing
    name="sparklineDateFmt"
    description="Formatting for tooltip dates"
    options="format code"
    defaultValue="YYYY-MM-DD"
/>
<PropListing
    name="sparklineColor"
    description="Color of visualization"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name="sparklineYScale"
    description="Whether to truncate the y-axis of the chart to enhance visibility"
    options={['true', 'false']}
    defaultValue=false
/>
<PropListing
    name="connectGroup"
    description="Group name to connect this sparkline to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
    options="string"
/>

---
evidence/sites/docs/pages/components/funnel-chart/index.md
---
---
title: Funnel Chart
sidebar_position: 1
---

```sql funnel_data
select * from (
    select 150 as customers, 'Show' as stage, 1 as stage_id
    union all
    select 102 as customers, 'Click' as stage, 2 as stage_id
    union all
    select 49 as customers, 'Visit' as stage, 3 as stage_id
    union all
    select 40 as customers, 'Inquiry' as stage, 4 as stage_id
    union all
    select 14 as customers, 'Order' as stage, 5 as stage_id
) order by stage_id asc
```

<DocTab>
    <div slot='preview'>
        <FunnelChart 
            data={funnel_data} 
            nameCol=stage
            valueCol=customers
        />
    </div>

```markdown
<FunnelChart 
    data={funnel_data} 
    nameCol=stage
    valueCol=customers
/>
```
</DocTab>

## Examples

### Ascending

<DocTab>
    <div slot='preview'>
        <FunnelChart 
            data={funnel_data} 
            nameCol=stage
            valueCol=customers
            funnelSort=ascending
        />
    </div>

```markdown
<FunnelChart 
    data={funnel_data} 
    nameCol=stage
    valueCol=customers
    funnelSort=ascending
/>
```
</DocTab>

### Alignment

<DocTab>
    <div slot='preview'>
        <FunnelChart 
            data={funnel_data} 
            nameCol=stage
            valueCol=customers
            funnelAlign=left
        />
    </div>

```markdown
<FunnelChart 
    data={funnel_data} 
    nameCol=stage
    valueCol=customers
    funnelAlign=left
/>
```
</DocTab>

### Show Percent Label

<DocTab>
    <div slot='preview'>
        <FunnelChart 
            data={funnel_data} 
            nameCol=stage
            valueCol=customers
            showPercent=true
        />
    </div>

```markdown
<FunnelChart 
    data={funnel_data} 
    nameCol=stage
    valueCol=customers
    showPercent=true
/>
```
</DocTab>

## Options

### Data

<PropListing
    name=data
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing
    name=nameCol
    description="Column to use for the name of the chart"
    required=true
    options="column name"
/>
<PropListing
    name=valueCol
    description="Column to use for the value of the chart"
    required=true
    options="column name"
/>
<PropListing
    name=emptySet
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    options={['error', 'warn', 'pass']}
    defaultValue="error"
/>
<PropListing
    name=emptyMessage
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    options="string"
    defaultValue="No records"
/>

### Formatting & Styling

<PropListing
    name=valueFmt
    description="Format to use for `valueCol` (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format | custom format"
/>
<PropListing
    name=outlineColor
    description="Border color. Only accepts a single color."
    options="CSS name | hexademical | RGB | HSL"
    defaultValue="transparent"
/>
<PropListing
    name=outlineWidth
    description="Border Width. It should be a natural number."
    options="number"
    defaultValue="1"
/>
<PropListing
    name=labelPosition
    description="Position of funnel item's label."
    options={['left', 'right', 'inside']}
    defaultValue="inside"
/>
<PropListing
    name=showPercent
    description="Show percentage in data labels"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing
    name=funnelSort
    description="Data sorting of the chart."
    options={['none', 'ascending', 'descending']}
    defaultValue="none"
/>
<PropListing
    name=funnelAlign
    description="Alignment of funnel."
    options={['left', 'right', 'center']}
    defaultValue="center"
/>
<PropListing
    name=colorPalette
    description="Array of custom colours to use for the chart. E.g., <code class=markdown>{`{['#cf0d06','#eb5752','#e88a87']}`}</code>"
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue="built-in color palette"
/>

### Chart

<PropListing
    name=title
    description="Chart title. Appears at top left of chart."
    options="string"
/>
<PropListing
    name=subtitle
    description="Chart subtitle. Appears just under title."
    options="string"
/>
<PropListing
    name=legend
    description="Turns legend on or off. Legend appears at top center of chart."
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing
    name=renderer
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    options={['canvas', 'svg']}
    defaultValue="canvas"
/>

### Custom Echarts Options

<PropListing
    name=echartsOptions
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleOption:'exampleValue'}}`}"
/>
<PropListing
    name=seriesOptions
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
/>
<PropListing
    name=printEchartsConfig
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    options={['true', 'false']}
    defaultValue="false"
/>


### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>


---
evidence/sites/docs/pages/components/text-input/index.md
---
---
title: Text Input
sidebar_position: 1
---

Creates a text input that can be used to filter or search

To see how to filter a query using a text input, see [Filters](/core-concepts/filters).

<DocTab>
  <div slot='preview'>
    <TextInput
        name=text_input_name
        title="Search"
    />

    Selected: {inputs.text_input_name}
  </div>

````markdown
<TextInput
    name=name_of_input
    title="Search"
/>

Selected: {inputs.text_input_name}
````
</DocTab>

## Examples

### Basic Text Input

<DocTab>
  <div slot='preview'>
    <TextInput
        name=name_of_input
    />

    Selected: {inputs.name_of_input}
  </div>

````markdown
<TextInput
    name=name_of_input
/>

Selected: {inputs.name_of_input}
````
</DocTab>



### With Title

<DocTab>
  <div slot='preview'>
    <TextInput
        name=text_input2
        title="Search"
    />

    Selected: {inputs.text_input2}
  </div>

````markdown
<TextInput
    name=name_of_input
    title="Search"
/>

Selected: {inputs.text_input2}
````
</DocTab>


### With Placeholder

<DocTab>
  <div slot='preview'>
    <TextInput
        name=text_input3
        title="Freetext Search"
        placeholder="Start typing"
    />

    Selected: {inputs.text_input3}
  </div>


````markdown
<TextInput
    name=name_of_input
    title="Freetext Search"
    placeholder="Start typing"
/>

Selected: {inputs.text_input3}
````
</DocTab>


### With Default Text Prefilled

<DocTab>
  <div slot='preview'>
    <TextInput
        name=text_input4
        title="Default Selected"
        defaultValue="Sporting"
    />

    Selected: {inputs.text_input4}
  </div>


````markdown
<TextInput
    name=name_of_input
    title="Default Selected"
    defaultValue="Sporting"
/>

Selected: {inputs.text_input4}
````
</DocTab>



### Fuzzy Finding (Searching)


`TextInput` provides an easy-to-use shortcut for [fuzzy finding](https://duckdb.org/docs/sql/functions/char#text-similarity-functions). Note that this is different than `LIKE`, as it does not require a direct substring, and is useful in situtations where spelling may be unknown, like names.

You can reference it by using the syntax `{inputs.your_input_name.search('column_name')}`, and it returns a number between 0 and 1.

## Usage

Assuming you had some TextInput `first_name_search`:

```sql
SELECT * FROM users
ORDER BY {inputs.first_name_search.search('first_name')}
LIMIT 10 -- Optionally limit to only show the 10 closest results
```

becomes

```sql
SELECT * FROM users
ORDER BY damerau_levenshtein(first_name, '{inputs.first_name_search}')
LIMIT 10 -- Optionally limit to only show the 10 closest results
```

## Options

<PropListing 
    name="name"
    required
    options=string
>

Name of the text input, used to reference the selected value elsewhere as `{inputs.name.value}`

</PropListing>
<PropListing 
    name="title"
    options=string
>

Title displayed above the text input

</PropListing>
<PropListing 
    name="placeholder"
    options=string
    defaultValue="Type to search"
>

Alternative placeholder text displayed in the text input

</PropListing>
<PropListing 
    name="hideDuringPrint"
    options={['true', 'false']}
    defaultValue="true"
>

Hide the component when the report is printed

</PropListing>

---
evidence/sites/docs/pages/components/last-refreshed/index.md
---
---
title: Last Refreshed
sidebar_position: 1
---

Displays the last time the data was refreshed. This component is useful for showing users how up-to-date the data is.

<DocTab>
    <div slot='preview'>
        <LastRefreshed/>
    </div>

```markdown
<LastRefreshed/>
```
</DocTab>

## Examples

### Alternative Prefix

<DocTab>
    <div slot='preview'>
        <LastRefreshed prefix="Data last updated"/>
    </div>

```markdown
<LastRefreshed prefix="Data last updated"/>
```
</DocTab>

## Options

<PropListing
    name=prefix
    description="Text to display before the last refreshed time"
    options=string
    defaultValue="Last refreshed"
/>

---
evidence/sites/docs/pages/components/box-plot/index.md
---
---
title: Box Plot
sidebar_position: 1
queries: 
- sales_distribution_by_channel.sql
---

<DocTab>
    <div slot='preview'>
        <BoxPlot 
            data={sales_distribution_by_channel}
            title="Daily Sales Distribution by Channel"
            name=channel
            intervalBottom=first_quartile
            midpoint=median
            intervalTop=third_quartile
            yFmt=usd0
        />
    </div>

```markdown
<BoxPlot 
    data={sales_distribution_by_channel}
    name=channel
    intervalBottom=first_quartile
    midpoint=median
    intervalTop=third_quartile
    yFmt=usd0
/>
```
</DocTab>


## Data Structure
The BoxPlot component requires pre-aggregated data, with one row per box you would like to display. There are 2 ways to pass in the values needed to construct the box:

**1. Explicitly define each value (e.g., `min`, `intervalBottom`, `midpoint`, `intervalTop`, `max`)**

```sql boxplot
select 
    channel as name,
    first_quartile as intervalBottom,
    median as midpoint,
    third_quartile as intervalTop
from ${sales_distribution_by_channel}
```

<DataTable data={boxplot} formatColumnTitles=false>
    <Column id="name" />
    <Column id="intervalBottom" fmt=num2/>
    <Column id="midpoint" fmt=num2/>
    <Column id="intervalTop" fmt=num2/>
</DataTable>

This example table excludes whiskers which would be defined with `min` and `max` columns

**2. Define a `midpoint` and a `confidenceInterval` - this will add the interval to the midpoint to get the max, and subtract to get the min**

```sql boxplot_with_confidence_interval
select 
    channel as name,
    median as midpoint,
    20 as confidence_interval
from ${sales_distribution_by_channel}
```

<DataTable data={boxplot_with_confidence_interval} formatColumnTitles=false>
    <Column id="name" />
    <Column id="midpoint" fmt=num2/>
    <Column id="confidence_interval" fmt=num2/>
</DataTable>

## Examples

### Basic Box Plot

<DocTab>
    <div slot='preview'>
        <BoxPlot 
            data={sales_distribution_by_channel}
            name=channel
            intervalBottom=first_quartile
            midpoint=median
            intervalTop=third_quartile
            yFmt=usd0
        />
    </div>

```markdown
<BoxPlot 
    data={sales_distribution_by_channel}
    name=channel
    intervalBottom=first_quartile
    midpoint=median
    intervalTop=third_quartile
    yFmt=usd0
/>
```
</DocTab>


### Horizontal Box Plot

<DocTab>
    <div slot='preview'>
        <BoxPlot 
            data={sales_distribution_by_channel}
            name=channel
            intervalBottom=first_quartile
            midpoint=median
            intervalTop=third_quartile
            yFmt=usd0
            swapXY=true
        />
    </div>

```markdown
<BoxPlot 
    data={sales_distribution_by_channel}
    name=channel
    intervalBottom=first_quartile
    midpoint=median
    intervalTop=third_quartile
    yFmt=usd0
    swapXY=true
/>
```
</DocTab>


### Box Plot with Whiskers

<DocTab>
    <div slot='preview'>
        <BoxPlot 
            data={sales_distribution_by_channel}
            name=channel
            min=min
            intervalBottom=first_quartile
            midpoint=median
            intervalTop=third_quartile
            max=max
            yFmt=usd0
            yMin=0
        />
    </div>

```markdown
<BoxPlot 
    data={sales_distribution_by_channel}
    name=channel
    min=min
    intervalBottom=first_quartile
    midpoint=median
    intervalTop=third_quartile
    max=max
    yFmt=usd0
/>
```
</DocTab>

### Box Plot with Custom Colors

<DocTab>
    <div slot='preview'>
        <BoxPlot 
            data={sales_distribution_by_channel}
            name=channel
            intervalBottom=first_quartile
            midpoint=median
            intervalTop=third_quartile
            yFmt=usd0
            color=color
        />
    </div>

```markdown
<BoxPlot 
    data={sales_distribution_by_channel}
    name=channel
    intervalBottom=first_quartile
    midpoint=median
    intervalTop=third_quartile
    yFmt=usd0
    color=color
/>
```
</DocTab>

## Options

### Data

<PropListing 
    name="data"
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing 
    name="name"
    description="Column to use for the names of each box in your plot"
    required=true
    options="column name"
/>
<PropListing 
    name="min"
    description="Column containing minimum values, appearing as whisker"
    options="column name"
/>
<PropListing 
    name="intervalBottom"
    description="Column containing values for bottom of box"
    options="column name"
/>
<PropListing 
    name="midpoint"
    description="Column containing values for midpoint of box"
    required=true
    options="column name"
/>
<PropListing 
    name="intervalTop"
    description="Column containing values for top of box"
    options="column name"
/>
<PropListing 
    name="max"
    description="Column containing maximum values, appearing as whisker"
    options="column name"
/>
<PropListing 
    name="confidenceInterval"
    description="Column containing value to use in place of intervalBottom and intervalTop. Is subtracted from midpoint to get the bottom and added to midpoint to get the top"
    options="column name"
/>
<PropListing 
    name="emptySet"
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    options={['error', 'warn', 'pass']}
    defaultValue="error"
/>
<PropListing 
    name="emptyMessage"
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    options="string"
    defaultValue="No records"
/>

### Formatting & Styling

<PropListing 
    name="color"
    description="Column containing color strings"
    options="column name"
/>
<PropListing 
    name="yFmt"
    description="Format to use for y column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing 
    name="seriesColors"
    description="Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal."
    options="object with series names and assigned colors"
    defaultValue="colors applied by order of series in data"
/>

### Axes

<PropListing 
    name="swapXY"
    description="Swap the x and y axes to create a horizontal chart"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="xAxisTitle"
    description="Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false"
    options={['true', 'string', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="yAxisTitle"
    description="Name to show beside y-axis. If 'true', formatted column name is used."
    options={['true', 'string', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="xGridlines"
    description="Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="yGridlines"
    description="Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing 
    name="xAxisLabels"
    description="Turns on/off value labels on the x-axis"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing 
    name="yAxisLabels"
    description="Turns on/off value labels on the y-axis"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing 
    name="xBaseline"
    description="Turns on/off thick axis line (line appears at y=0)"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing 
    name="yBaseline"
    description="Turns on/off thick axis line (line appears directly alongside the y-axis labels)"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="xTickMarks"
    description="Turns on/off tick marks for each of the x-axis labels"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="yTickMarks"
    description="Turns on/off tick marks for each of the y-axis labels"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="yMin"
    description="Starting value for the y-axis"
    options="number"
/>
<PropListing 
    name="yMax"
    description="Maximum value for the y-axis"
    options="number"
/>
<PropListing 
    name="showAllXAxisLabels"
    description="Force every x-axis value to be shown. This can truncate labels if there are too many."
    options={['true', 'false']}
    defaultValue="false"
/>

### Chart

<PropListing 
    name="title"
    description="Chart title. Appears at top left of chart."
    options="string"
/>
<PropListing 
    name="subtitle"
    description="Chart subtitle. Appears just under title."
    options="string"
/>
<PropListing 
    name="chartAreaHeight"
    description="Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX."
    options="number"
    defaultValue="180"
/>
<PropListing 
    name="renderer"
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    options={['canvas', 'svg']}
    defaultValue="canvas"
/>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

### Custom Echarts Options

<PropListing 
    name="echartsOptions"
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleOption:'exampleValue'}}`}"
/>
<PropListing 
    name="seriesOptions"
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
/>
<PropListing 
    name="printEchartsConfig"
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    options={['true', 'false']}
    defaultValue="false"
/>

### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>


## Annotations

Box plots can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

```html
<BoxPlot 
    data={box}
    name=experiment
    midpoint=value
    confidenceInterval=confidence
>
    <ReferenceLine y=0.04 label='Target'/>
</BoxPlot>
```

---
evidence/sites/docs/pages/components/index/index.md
---
---
title: "Components"
sidebar_position: 2
sidebar_link: false
---

---
evidence/sites/docs/pages/components/data-table/index.md
---
---
title: Data Table
sidebar_position: 1
---

## Examples

### Displaying All Columns in Query

```orders_summary
select * from needful_things.orders
order by id
limit 100
```

<DocTab>
    <div slot='preview'>
        <DataTable data={orders_summary}/>
    </div>

```svelte
<DataTable data={orders_summary}/>
```
</DocTab>



### Selecting Specific Columns

<DocTab>
    <div slot='preview'>
        <DataTable data={orders_summary}> 
            <Column id=state title="Sales State"/> 
            <Column id=item/> 
            <Column id=category/> 
            <Column id=sales fmt=usd/> 
            <Column id=channel/> 
        </DataTable>
    </div>

```svelte
<DataTable data={orders_summary}> 
    <Column id=state title="Sales State"/> 
	<Column id=item/> 
	<Column id=category/> 
	<Column id=sales fmt=usd/> 
	<Column id=channel/> 
</DataTable>
```
</DocTab>



### Custom Column Formatting

You can use the `fmt` prop to format your columns using [built-in format names or Excel format codes](/core-concepts/formatting/)

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country />
            <Column id=category />
            <Column id=value_usd fmt=eur/>
            <Column id=yoy title="Y/Y Growth" fmt=pct3/>
        </DataTable>
    </div>

```svelte
<DataTable data={country_summary}>
	<Column id=country />
	<Column id=category />
	<Column id=value_usd fmt=eur/>
    <Column id=yoy title="Y/Y Growth" fmt=pct3/>
</DataTable>
```
</DocTab>



#### Formatting Driven by Another Column

```country_summary_fmts
select *,
case
    when country in ('Austria', 'Ukraine') then 'eur'
    when country = 'Sweden' then 'sek'
    when country = 'Vietnam' then '"₫"#,##0'
    else 'usd' end as custom_format
from ${country_summary}
```

This example includes a `custom_format` column, which contains a different currency format code for many of the rows.

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary_fmts}>
            <Column id=country />
            <Column id=category />
            <Column id=value_usd fmtColumn=custom_format/>
            <Column id=yoy title="Y/Y Growth" fmt=pct1/>
        </DataTable>
    </div>

```svelte
<DataTable data={country_summary_fmts}>
	<Column id=country />
	<Column id=category />
	<Column id=value_usd fmtColumn=custom_format/>
    <Column id=yoy title="Y/Y Growth" fmt=pct3/>
</DataTable>
```
</DocTab>

### Search

<DocTab>
    <div slot='preview'>
        <DataTable data={orders_summary} search=true/>
    </div>

```svelte
<DataTable data={orders_summary} search=true/>
```
</DocTab>

### Sort

```svelte
<DataTable data={orders_summary} sort="sales desc">
    <Column id=category/> 
    <Column id=item/> 
    <Column id=sales fmt=usd/> 
</DataTable>
```

<DataTable data={orders_summary} sort="sales desc">
    <Column id=category/> 
    <Column id=item/> 
    <Column id=sales fmt=usd/> 
</DataTable>

### Deltas

```sql country_summary
select date '2020-04-30' as date, 87 as value_usd, 0.0234 as yoy, 'Austria' as country, 'B' as category, 100384 as country_id, 'AT' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AT.png' as flag, 'https://www.google.ca/search?q=austria' as country_url
union all
select date '2020-05-01' as date, 95 as value_usd, 0.0534 as yoy, 'Australia' as country, 'C' as category, 104942 as country_id, 'AU' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/AU.png' as flag, 'https://www.google.ca/search?q=australia' as country_url
union all
select date '2020-05-02' as date, 163 as value_usd, 0.0264 as yoy, 'Brazil' as country, 'A' as category, 100842 as country_id, 'BR' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/BR.png' as flag, 'https://www.google.ca/search?q=brazil' as country_url
union all
select date '2020-05-03' as date, 174 as value_usd, 0.0727 as yoy, 'Canada' as country, 'A' as category, 104975 as country_id, 'CA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CA.png' as flag, 'https://www.google.ca/search?q=canada' as country_url
union all
select date '2020-05-04' as date, 214 as value_usd, -0.1223 as yoy, 'Chile' as country, 'B' as category, 100644 as country_id, 'CL' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/CL.png' as flag, 'https://www.google.ca/search?q=chile' as country_url
union all
select date '2020-05-05' as date, 342 as value_usd, 0.0124 as yoy, 'Denmark' as country, 'B' as category, 102948 as country_id, 'DK' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/DK.png' as flag, 'https://www.google.ca/search?q=denmark' as country_url
union all
select date '2020-05-06' as date, 331 as value_usd, 0.0252 as yoy, 'Estonia' as country, 'D' as category, 102495 as country_id, 'EE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/EE.png' as flag, 'https://www.google.ca/search?q=estonia' as country_url
union all
select date '2020-05-07' as date, 98 as value_usd, 0.0754 as yoy, 'Finland' as country, 'B' as category, 104962 as country_id, 'FI' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/FI.png' as flag, 'https://www.google.ca/search?q=finland' as country_url
union all
select date '2020-05-08' as date, 128 as value_usd, -0.0246 as yoy, 'Ghana' as country, 'C' as category, 100599 as country_id, 'GH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/GH.png' as flag, 'https://www.google.ca/search?q=ghana' as country_url
union all
select date '2020-05-09' as date, 153 as value_usd, 0.0447 as yoy, 'Honduras' as country, 'D' as category, 102494 as country_id, 'HN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/HN.png' as flag, 'https://www.google.ca/search?q=honduras' as country_url
union all
select date '2020-05-10' as date, 384 as value_usd, -0.0255 as yoy, 'India' as country, 'A' as category, 101948 as country_id, 'IN' as country_code,  'https://flaglog.com/codes/standardized-rectangle-120px/IN.png' as flag, 'https://www.google.ca/search?q=india' as country_url
union all
select date '2020-05-11' as date, 234 as value_usd, 0.0855 as yoy, 'Ireland' as country, 'B' as category, 100987 as country_id, 'IE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/IE.png' as flag, 'https://www.google.ca/search?q=ireland' as country_url
union all
select date '2020-05-12' as date, 67 as value_usd, 0.0635 as yoy, 'Jamaica' as country, 'C' as category, 101248 as country_id, 'JM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/JM.png' as flag, 'https://www.google.ca/search?q=jamaica' as country_url
union all
select date '2020-05-13' as date, 125 as value_usd, -0.0232 as yoy, 'Kenya' as country, 'C' as category, 101947 as country_id, 'KE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/KE.png' as flag, 'https://www.google.ca/search?q=kenya' as country_url
union all
select date '2020-05-14' as date, 118 as value_usd, -0.0343 as yoy, 'Lebanon' as country, 'D' as category, 108849 as country_id, 'LB' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/LB.png' as flag, 'https://www.google.ca/search?q=lebanon' as country_url
union all
select date '2020-05-15' as date, 263 as value_usd, 0.0883 as yoy, 'Mexico' as country, 'B' as category, 100763 as country_id, 'MX' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/MX.png' as flag, 'https://www.google.ca/search?q=mexico' as country_url
union all
select date '2020-05-16' as date, 211 as value_usd, 0.0395 as yoy, 'Nigeria' as country, 'A' as category, 100837 as country_id, 'NG' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/NG.png' as flag, 'https://www.google.ca/search?q=nigeria' as country_url
union all
select date '2020-05-17' as date, 192 as value_usd, 0.0234 as yoy, 'Oman' as country, 'D' as category, 100993 as country_id, 'OM' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/OM.png' as flag, 'https://www.google.ca/search?q=oman' as country_url
union all
select date '2020-05-18' as date, 59 as value_usd, 0.0828 as yoy, 'Philippines' as country, 'D' as category, 104128 as country_id, 'PH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/PH.png' as flag, 'https://www.google.ca/search?q=philippines' as country_url
union all
select date '2020-05-19' as date, 113 as value_usd, 0.0554 as yoy, 'Qatar' as country, 'C' as category, 100181 as country_id, 'QA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/QA.png' as flag, 'https://www.google.ca/search?q=qatar' as country_url
union all
select date '2020-05-20' as date, 190 as value_usd, 0.0134 as yoy, 'Romania' as country, 'A' as category, 101384 as country_id, 'RO' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/RO.png' as flag, 'https://www.google.ca/search?q=romania ! startups' as country_url
union all
select date '2020-05-21' as date, 190 as value_usd, -0.0554 as yoy, 'Sweden' as country, 'B' as category, 101847 as country_id, 'SE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/SE.png' as flag, 'https://www.google.ca/search?q=sweden' as country_url
union all
select date '2020-05-22' as date, 248 as value_usd, 0.0254 as yoy, 'Thailand' as country, 'C' as category, 104837 as country_id, 'TH' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/TH.png' as flag, 'https://www.google.ca/search?q=thailand' as country_url
union all
select date '2020-05-23' as date, 168 as value_usd, 0.0294 as yoy, 'Ukraine' as country, 'C' as category, 101938 as country_id, 'UA' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/UA.png' as flag, 'https://www.google.ca/search?q=ukraine' as country_url
union all
select date '2020-05-24' as date, 101 as value_usd, 0.0234 as yoy, 'Vietnam' as country, 'A' as category, 104948 as country_id, 'VN' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/VN.png' as flag, 'https://www.google.ca/search?q=vietnam' as country_url
union all
select date '2020-05-25' as date, 67 as value_usd, 0.0294 as yoy, 'Yemen' as country, 'B' as category, 100774 as country_id, 'YE' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/YE.png' as flag, 'https://www.google.ca/search?q=yemen' as country_url
union all
select date '2020-05-26' as date, 100 as value_usd, 0.011 as yoy, 'Zimbabwe' as country, 'A' as category, 100337 as country_id, 'ZW' as country_code, 'https://flaglog.com/codes/standardized-rectangle-120px/ZW.png' as flag, 'https://www.google.ca/search?q=zimbabwe' as country_url
```


<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country />
            <Column id=category />
            <Column id=value_usd />
            <Column id=yoy contentType=delta fmt=pct title="Y/Y Chg"/>
        </DataTable>
    </div>

```svelte
<DataTable data={country_summary}>
	<Column id=country />
	<Column id=category />
	<Column id=value_usd />
    <Column id=yoy contentType=delta fmt=pct title="Y/Y Chg"/>
</DataTable>
```
</DocTab>



### Sparklines

Sparklines require an array inside a cell of your table. You can create an array using the `array_agg()` function in DuckDB syntax. Below is an example query using this function, and the resulting DataTable.

<CodeBlock language=sql source={`WITH monthly_sales AS (
    SELECT 
        category,
        DATE_TRUNC('month', order_datetime) AS date,
        SUM(sales) AS monthly_sales
    FROM 
        needful_things.orders
    GROUP BY 
        category, DATE_TRUNC('month', order_datetime)
)
SELECT 
    category,
    sum(monthly_sales) as total_sales,
    ARRAY_AGG({'date': date, 'sales': monthly_sales}) AS sales
FROM 
    monthly_sales
GROUP BY 
    category
order by total_sales desc`}
/>


```sql categories
WITH monthly_sales AS (
    SELECT 
        category,
        DATE_TRUNC('month', order_datetime) AS date,
        SUM(sales) AS monthly_sales
    FROM 
        needful_things.orders
    GROUP BY 
        category, DATE_TRUNC('month', order_datetime)
)
SELECT 
    category,
    sum(monthly_sales) as total_sales,
    ARRAY_AGG({'date': date, 'sales': monthly_sales}) AS sales
FROM 
    monthly_sales
GROUP BY 
    category
order by total_sales desc
```

<DocTab>
    <div slot='preview'>
        <DataTable data={categories}>
            <Column id=category/>
            <Column id=sales title="Orders" contentType=sparkline sparkX=date sparkY=sales />
            <Column id=sales title="Sales" contentType=sparkarea sparkX=date sparkY=sales sparkColor=#53768a/>
            <Column id=sales title="AOV" contentType=sparkbar sparkX=date sparkY=sales sparkColor=#97ba99/>
        </DataTable>
    </div>

```svelte
<DataTable data={categories}>
    <Column id=category/>
    <Column id=sales title="Orders" contentType=sparkline sparkX=date sparkY=sales />
    <Column id=sales title="Sales" contentType=sparkarea sparkX=date sparkY=sales sparkColor=#53768a/>
    <Column id=sales title="AOV" contentType=sparkbar sparkX=date sparkY=sales sparkColor=#97ba99/>
</DataTable>
```
</DocTab>

### Bar Chart Column

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country />
            <Column id=category align=center/>
            <Column id=value_usd title="Sales" contentType=bar/>
              <Column id=value_usd title="Sales" contentType=bar barColor=#aecfaf/>
              <Column id=value_usd title="Sales" contentType=bar barColor=#ffe08a backgroundColor=#ebebeb/>
        </DataTable>
    </div>

```svelte
<DataTable data={country_summary}>
	<Column id=country />
	<Column id=category align=center/>
	<Column id=value_usd title="Sales" contentType=bar/>
  	<Column id=value_usd title="Sales" contentType=bar barColor=#aecfaf/>
  	<Column id=value_usd title="Sales" contentType=bar barColor=#ffe08a backgroundColor=#ebebeb/>
</DataTable>
```
</DocTab>



### Total Row

Default total aggregation is `sum`

<DocTab>
    <div slot='preview'>
        <DataTable data={country_example} totalRow=true rows=5>
          <Column id=country/>
          <Column id=gdp_usd/>
          <Column id=gdp_growth fmt='pct2'/>
          <Column id=population fmt='#,##0"M"'/>
        </DataTable>
    </div>

```svelte
<DataTable data={country_example} totalRow=true rows=5>
  <Column id=country/>
  <Column id=gdp_usd/>
  <Column id=gdp_growth fmt='pct2'/>
  <Column id=population fmt='#,##0"M"'/>
</DataTable>
```
</DocTab>

#### Using Built-in Aggregation Functions

```country_example
select * from ${countries}
limit 5
```

<DocTab>
    <div slot='preview'>
        <DataTable data={country_example} totalRow=true rows=5>
        <Column id=country/>
        <Column id=gdp_usd totalAgg=sum/>
        <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct2'/>
        <Column id=population totalAgg=mean fmt='#,##0"M"'/>
        </DataTable>
    </div>

```svelte
<DataTable data={country_example} totalRow=true rows=5>
  <Column id=country/>
  <Column id=gdp_usd totalAgg=sum/>
  <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct2'/>
  <Column id=population totalAgg=mean fmt='#,##0"M"'/>
</DataTable>
```
</DocTab>



#### Custom Aggregations Values

<DocTab>
    <div slot='preview'>
        <DataTable data={country_example} totalRow=true rows=5>
          <Column id=country totalAgg="Just the USA"/>
          <Column id=gdp_usd totalAgg={countries[0].gdp_usd} totalFmt=usd/>
        </DataTable>
    </div>

```svelte
<DataTable data={countries} totalRow=true rows=5>
  <Column id=country totalAgg="Just the USA"/>
  <Column id=gdp_usd totalAgg={countries[0].gdp_usd} totalFmt=usd/>
</DataTable>
```
</DocTab>

#### Custom Total Formats

<DocTab>
    <div slot='preview'>
        <DataTable data={country_example} totalRow=true rows=5>
          <Column id=country totalAgg="All Countries"/>
          <Column id=continent totalAgg=countDistinct totalFmt='# "Unique continents"'/>
          <Column id=gdp_usd totalAgg=sum fmt='$#,##0"B"' totalFmt='$#,##0.0,"T"'/>
          <Column id=gdp_growth totalAgg=mean fmt='pct2' totalFmt='pct1'/>
          <Column id=interest_rate totalAgg=mean fmt='pct2' totalFmt='pct1'/>
          <Column id=inflation_rate totalAgg=mean fmt='pct2' totalFmt='pct1'/>
          <Column id=jobless_rate totalAgg=mean fmt='pct0'/>
          <Column id=gov_budget totalAgg=mean fmt='0.0"%"'/>
          <Column id=debt_to_gdp totalAgg=mean fmt='0"%"'/>
          <Column id=current_account totalAgg=mean fmt='0.0"%"'/>
          <Column id=population totalAgg=sum fmt='#,##0"M"'/>
        </DataTable>
    </div>

```svelte
<DataTable data={countries} totalRow=true rows=5>
  <Column id=country totalAgg="All Countries"/>
  <Column id=continent totalAgg=countDistinct totalFmt='# "Unique continents"'/>
  <Column id=gdp_usd totalAgg=sum fmt='$#,##0"B"' totalFmt='$#,##0.0,"T"'/>
  <Column id=gdp_growth totalAgg=mean fmt='pct2' totalFmt='pct1'/>
  <Column id=interest_rate totalAgg=mean fmt='pct2' totalFmt='pct1'/>
  <Column id=inflation_rate totalAgg=mean fmt='pct2' totalFmt='pct1'/>
  <Column id=jobless_rate totalAgg=mean fmt='pct0'/>
  <Column id=gov_budget totalAgg=mean fmt='0.0"%"'/>
  <Column id=debt_to_gdp totalAgg=mean fmt='0"%"'/>
  <Column id=current_account totalAgg=mean fmt='0.0"%"'/>
  <Column id=population totalAgg=sum fmt='#,##0"M"'/>
</DataTable>
```
</DocTab>


### Conditional Formatting

#### Default (`scaleColor=green`)

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country />
            <Column id=country_id align=center/>
            <Column id=category align=center/>
            <Column id=value_usd contentType=colorscale/>
        </DataTable>
    </div>

```svelte
<DataTable data={countries}>
    <Column id=country />
    <Column id=country_id align=center/>
    <Column id=category align=center/>
    <Column id=value_usd contentType=colorscale/>
</DataTable>
```
</DocTab>


#### `scaleColor=red`

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country />
            <Column id=country_id align=center/>
            <Column id=category align=center/>
            <Column id=value_usd contentType=colorscale scaleColor=red/>
        </DataTable>
    </div>

```svelte
<DataTable data={countries}>
    <Column id=country />
    <Column id=country_id align=center/>
    <Column id=category align=center/>
    <Column id=value_usd contentType=colorscale scaleColor=red/>
</DataTable>
```
</DocTab>

#### `scaleColor=blue`

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country />
            <Column id=country_id align=center/>
            <Column id=category align=center/>
            <Column id=value_usd contentType=colorscale scaleColor=blue/>
        </DataTable>
    </div>

```svelte
<DataTable data={countries}>
    <Column id=country />
    <Column id=country_id align=center/>
    <Column id=category align=center/>
    <Column id=value_usd contentType=colorscale scaleColor=blue/>
</DataTable>
```
</DocTab>


#### Custom Colors

When you pass a custom color to `scaleColor`, Evidence will create a color palette for you, starting at white and ending at the color you provided. See examples further down the page to see how to specify a custom color palette with multiple colors.

```orders_by_category
select order_month as month, category, sum(sales) as sales_usd0k, count(1) as num_orders_num0,
sum(sales) / count(1) as aov_usd2
from needful_things.orders
group by all
```

<DocTab>
    <div slot='preview'>
        <DataTable data={orders_by_category} rowNumbers=true>
          <Column id=month/>
          <Column id=category/>
          <Column id=sales_usd0k contentType=colorscale scaleColor=#a85ab8 align=center/>
          <Column id=num_orders_num0 contentType=colorscale scaleColor=#e3af05 align=center/>
          <Column id=aov_usd2 contentType=colorscale scaleColor=#c43957 align=center/>
        </DataTable>
    </div>

```svelte
<DataTable data={orders_by_category} rowNumbers=true>
  <Column id=month/>
  <Column id=category/>
  <Column id=sales_usd0k contentType=colorscale scaleColor=#a85ab8 align=center/>
  <Column id=num_orders_num0 contentType=colorscale scaleColor=#e3af05 align=center/>
  <Column id=aov_usd2 contentType=colorscale scaleColor=#c43957 align=center/>
</DataTable>
```
</DocTab>




### Custom Color Palettes

```numbers
 select 'A' as name, 1 as number
 union all
 select 'B',2
union all
 select 'C',3
 union all
 select 'D',4
 union all
 select 'E',5
 union all
 select 'F',6
 union all
 select 'G',7
 union all
 select 'H',8
 union all
 select 'I',9
 union all
 select 'J',10
 order by number asc
 ```

#### Diverging Scale

<DocTab>
    <div slot='preview'>
        <DataTable data={numbers}>
          <Column id=name/>
          <Column id=number contentType=colorscale scaleColor={['#6db678','white','#ce5050']}/>
        </DataTable>
    </div>

```svelte
<DataTable data={numbers}>
  <Column id=name/>
  <Column id=number contentType=colorscale scaleColor={['#6db678','white','#ce5050']}/>
</DataTable>
```
</DocTab>


#### Heatmap

<DocTab>
    <div slot='preview'>
        <DataTable data={numbers}>
          <Column id=name/>
          <Column id=number contentType=colorscale scaleColor={['#6db678','#ebbb38','#ce5050']}/>
        </DataTable>
    </div>

```svelte
<DataTable data={numbers}>
  <Column id=name/>
  <Column id=number contentType=colorscale scaleColor={['#6db678','#ebbb38','#ce5050']}/>
</DataTable>
```
</DocTab>



#### Color Breakpoints
Use `colorBreakpoints` or `colorMid`/`colorMin`/`colorMax` to control which values are assigned to which sections of the color scale

<DocTab>
    <div slot='preview'>
        <DataTable data={negatives} rows=all>
          <Column id=name/>
          <Column id=number contentType=colorscale scaleColor={['#ce5050','white','#6db678']} colorMid=0/>
        </DataTable>
    </div>

```svelte
<DataTable data={negatives} rows=all>
  <Column id=name/>
  <Column id=number contentType=colorscale scaleColor={['#ce5050','white','#6db678']} colorMid=0/>
</DataTable>
```
</DocTab>


#### Create Scale from Another Column

The `number` column in this example has a color scale defined by the `scale_defining_number` column, rather than by its own values.

```numbers_othercol
 select 'A' as name, 1 as number, 2 as scale_defining_number, 'usd' as fmt
 union all
 select 'B',2,10,'eur'
union all
 select 'C',3,30,'num0'
 union all
 select 'D',4,20,'pct'
 union all
 select 'E',5,10,'usd'
 union all
 select 'F',6,5,'pct'
 union all
 select 'G',7,1,'pct'
 union all
 select 'H',8,44,'eur'
 union all
 select 'I',9,4,'#,##0.00"kg"'
 union all
 select 'J',10,55, 'usd'
 order by number asc
 ```

<DocTab>
    <div slot='preview'>
        <DataTable data={numbers_othercol}>
          <Column id=name/>
          <Column id=scale_defining_number fontColor={['green','red']}/>
          <Column id=number contentType=colorscale scaleColor={['#6db678','white','#ce5050']} scaleColumn=scale_defining_number fmtCol=fmt/>
        </DataTable>
    </div>

```svelte
<DataTable data={numbers_othercol}>
  <Column id=name/>
  <Column id=scale_defining_number fontColor={['green','red']}/>
  <Column id=number contentType=colorscale scaleColor={['#6db678','white','#ce5050']} scaleColumn=scale_defining_number fmtCol=fmt/>
</DataTable>
```
</DocTab>


### Red Negatives

```negatives
select 'A' as name, -5 as number,0 as status
union all
select 'B', -4 as number, 1 as status
union all
select 'C', -3 as number, 2 as status
union all
select 'D', -2 as number,0
union all
select 'E', -1 as number,1
union all
select 'F', 0 as number,1
union all
select 'G', 1 as number,2
union all
select 'H', 2 as number,2
union all
select 'I', 3 as number,0
union all
select 'J', 4 as number,0
order by number asc
```

<DocTab>
    <div slot='preview'>
        <DataTable data={negatives}>
        <Column id=name/>
        <Column id=number redNegatives=true/>
        </DataTable>
    </div>

```svelte
<DataTable data={negatives}>
  <Column id=name/>
  <Column id=number redNegatives=true/>
</DataTable>
```
</DocTab>



### Including Images
You can include images by indicating either an absolute path e.g. `https://www.example.com/images/image.png` or a relative path e.g. `/images/image.png`. For relative paths, see [storing static files in a static folder](/reference/markdown/#storing-images-and-static-files). 

In this example, `flag` is either an absolute path or a relative path to the image.

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=flag contentType=image height=30px align=center />
            <Column id=country />
            <Column id=country_id align=center />
            <Column id=category />
            <Column id=value_usd />
        </DataTable>
    </div>

```svelte
<DataTable data={countries}>
	<Column id=flag contentType=image height=30px align=center />
	<Column id=country />
	<Column id=country_id align=center />
	<Column id=category />
	<Column id=value_usd />
</DataTable>
```
</DocTab>



### Link Columns

#### Link Column with Unique Labels

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country_url contentType=link linkLabel=country />
            <Column id=country_id align=center />
            <Column id=category />
            <Column id=value_usd />
        </DataTable>
    </div>

```svelte
<DataTable data={countries}>
	<Column id=country_url contentType=link linkLabel=country />
	<Column id=country_id align=center />
	<Column id=category />
	<Column id=value_usd />
</DataTable>
```
</DocTab>


#### Link Column with Consistent String Label

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country />
            <Column id=country_id align=center />
            <Column id=category />
            <Column id=value_usd />
            <Column id=country_url contentType=link linkLabel="Details &rarr;" />
        </DataTable>
    </div>

```svelte
<DataTable data={countries}>
	<Column id=country />
	<Column id=country_id align=center />
	<Column id=category />
	<Column id=value_usd />
	<Column id=country_url contentType=link linkLabel="Details &rarr;" />
</DataTable>
```
</DocTab>


### HTML Content

```sql html_in_table
select '<b>Bold</b> text' as "HTML in Table", 0 as row_number union all
select '<i>Italic</i> text', 1 union all
select '<a href="https://evidence.dev">Link</a>', 2 union all
select '<img src="https://raw.githubusercontent.com/evidence-dev/media-kit/main/png/wordmark-gray-800.png" width="200px"/>', 3 union all
select 'Inline <code class=markdown>Code</code></br> is supported', 4
order by row_number
```

<DocTab>
    <div slot='preview'>


        <DataTable data={html_in_table}>
            <Column id="HTML in Table" contentType=html/>
        </DataTable>
    </div>

````markdown
```sql html_in_table
select '<b>Bold</b> text' as "HTML in Table", 0 as row_number union all
select '<i>Italic</i> text', 1 union all
select '<a href="https://evidence.dev">Link</a>', 2 union all
select '<img src="https://raw.githubusercontent.com/evidence-dev/media-kit/main/png/wordmark-gray-800.png" width="200px"/>', 3 union all
select 'Inline <code class=markdown>Code</code></br> is supported', 4
order by row_number
```


<DataTable data={html_in_table}>
    <Column id="HTML in Table" contentType=html/>
</DataTable>
````
</DocTab>

To apply styling to most HTML tags, you should add the `class=markdown` attribute to the tag in your column. This will apply the same styling as the markdown renderer.

### Row Links

#### External Links

This example includes a column `country_url` which contains a country name as a search term in Google (e.g., `https://google.ca/search?q=canada`)

<DocTab>
    <div slot='preview'>
Click on a row to navigate using the row link:

<DataTable data={country_summary} search=true link=country_url>
	<Column id=country />
	<Column id=country_id align=center />
	<Column id=category />
	<Column id=value_usd />
</DataTable>
    </div>

```svelte
<DataTable data={countries} search=true link=country_url showLinkCol/>
```
</DocTab>


#### Link to Pages in Your App

In this example, the SQL query contains a column with links to parameterized pages in the app. Below is an example of the SQL that could be used to generate such links:

```sql
select
    category,
    '/parameterized-pages/' || category as category_link,
    sum(sales) as sales_usd0
from needful_things.orders
group by 1
```

You can then use the `link` property of the DataTable to use your link column as a row link (`category_link` in this example):

```svelte
<DataTable data={orders} link=category_link />
```

By default, the link column of your table is hidden. If you would like it to be displayed in the table, you can use `showLinkCol=true`.

<img src='/img/datatable-internal-linkedtable.gif' width='500px'/>

### Styling

#### Row Shading + Row Lines

<DocTab>
    <div slot='preview'>
        <DataTable data={countries} rowShading=true />
    </div>

```svelte
<DataTable data={countries} rowShading=true />
```
</DocTab>

#### Row Shading + No Row Lines

<DocTab>
    <div slot='preview'>
        <DataTable data={countries} rowShading=true rowLines=false />
    </div>

```svelte
<DataTable data={countries} rowShading=true rowLines=false />
```
</DocTab>

#### No Lines or Shading

<DocTab>
    <div slot='preview'>
        <DataTable data={countries} rowLines=false />
    </div>

```svelte
<DataTable data={countries} rowLines=false />
```
</DocTab>

### Column Alignment

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country align=right />
            <Column id=country_id align=center />
            <Column id=category align=left />
            <Column id=value_usd align=left />
        </DataTable>
    </div>

```svelte
<DataTable data={country_summary}>
	<Column id=country align=right />
	<Column id=country_id align=center />
	<Column id=category align=left />
	<Column id=value_usd align=left />
</DataTable>
```
</DocTab>


### Custom Column Titles

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary}>
            <Column id=country title="Country Name" />
            <Column id=country_id align=center title="ID" />
            <Column id=category align=center title="Product Category" />
            <Column id=value_usd title="Sales in 2022" />
        </DataTable>
    </div>

```svelte
<DataTable data={country_summary}>
	<Column id=country title="Country Name" />
	<Column id=country_id align=center title="ID" />
	<Column id=category align=center title="Product Category" />
	<Column id=value_usd title="Sales in 2022" />
</DataTable>
```
</DocTab>


### Raw Column Names

<DocTab>
    <div slot='preview'>
        <DataTable data={country_summary} formatColumnTitles=false />
    </div>

```svelte
<DataTable data={country_summary} formatColumnTitles=false />
```
</DocTab>

### Groups - Accordion

#### Without subtotals

```orders
select state, category, item, count(1) as orders, sum(sales) as sales, if(random() > 0.3, 1, -1) * 0.1 * random() as growth from needful_things.orders
group by all
limit 25
```

<DocTab>
    <div slot='preview'>
        <DataTable data={orders} groupBy=state>
             <Column id=state/> 
            <Column id=category totalAgg=""/> 
            <Column id=item totalAgg=""/> 
            <Column id=orders/> 
            <Column id=sales fmt=usd/> 
            <Column id=growth fmt=pct1/> 
        </DataTable>
    </div>

```svelte
<DataTable data={orders} groupBy=state>
 	<Column id=state/> 
	<Column id=category totalAgg=""/> 
	<Column id=item totalAgg=""/> 
	<Column id=orders/> 
	<Column id=sales fmt=usd/> 
	<Column id=growth fmt=pct1/> 
</DataTable>
```
</DocTab>


#### With Subtotals

<DocTab>
    <div slot='preview'>
        <DataTable data={orders} groupBy=state subtotals=true> 
             <Column id=state/> 
            <Column id=category totalAgg=""/> 
            <Column id=item totalAgg=""/> 
            <Column id=orders/> 
            <Column id=sales fmt=usd/> 
            <Column id=growth fmt=pct1/> 
        </DataTable>
    </div>

```svelte
<DataTable data={orders} groupBy=state subtotals=true> 
 	<Column id=state/> 
	<Column id=category totalAgg=""/> 
	<Column id=item totalAgg=""/> 
	<Column id=orders/> 
	<Column id=sales fmt=usd/> 
	<Column id=growth fmt=pct1/> 
</DataTable>
```
</DocTab>


#### Closed by Default

<DocTab>
    <div slot='preview'>
        <DataTable data={orders} groupBy=state subtotals=true totalRow=true groupsOpen=false> 
             <Column id=state totalAgg=countDistinct totalFmt='0 "states"'/> 
            <Column id=category totalAgg=countDistinct totalFmt='[=1]0 "category";0 "categories"'/> 
            <Column id=item  totalAgg=countDistinct totalFmt='[=1]0 "item";0 "items"'/> 
            <Column id=orders/> 
            <Column id=sales fmt=usd0k/> 
            <Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> 
        </DataTable>
    </div>

```svelte
<DataTable data={orders} groupBy=state subtotals=true totalRow=true groupsOpen=false> 
 	<Column id=state totalAgg=countDistinct totalFmt='0 "states"'/> 
	<Column id=category totalAgg=countDistinct totalFmt='[=1]0 "category";0 "categories"'/> 
	<Column id=item  totalAgg=countDistinct totalFmt='[=1]0 "item";0 "items"'/> 
	<Column id=orders/> 
	<Column id=sales fmt=usd0k/> 
	<Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> 
</DataTable>
```
</DocTab>


#### With Configured Columns

<DocTab>
    <div slot='preview'>
        <DataTable data={orders} groupBy=category subtotals=true totalRow=true> 
             <Column id=state totalAgg=countDistinct totalFmt='0 "states"'/> 
            <Column id=category totalAgg=Total/> 
            <Column id=item  totalAgg=countDistinct totalFmt='0 "items"'/> 
            <Column id=orders contentType=colorscale/> 
            <Column id=sales fmt=usd0k/> 
            <Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> 
        </DataTable>
    </div>

```svelte
<DataTable data={orders} groupBy=category subtotals=true totalRow=true> 
 	<Column id=state totalAgg=countDistinct totalFmt='0 "states"'/> 
	<Column id=category totalAgg=Total/> 
	<Column id=item  totalAgg=countDistinct totalFmt='0 "items"'/> 
	<Column id=orders contentType=colorscale/> 
	<Column id=sales fmt=usd0k/> 
	<Column id=growth contentType=delta fmt=pct totalAgg=weightedMean weightCol=sales/> 
</DataTable>
```
</DocTab>


### Groups - Section

#### Without subtotals

<DocTab>
    <div slot='preview'>
        <DataTable data={orders} groupBy=state groupType=section/>
    </div>

```svelte
<DataTable data={orders} groupBy=state groupType=section/>
```
</DocTab>


#### With Subtotals

<DocTab>
    <div slot='preview'>
        <DataTable data={orders} groupBy=state subtotals=true groupType=section>
             <Column id=state totalAgg=countDistinct totalFmt='[=1]0 "state";0 "states"'/> 
            <Column id=category totalAgg=Total/> 
            <Column id=item  totalAgg=countDistinct totalFmt='0 "items"'/> 
            <Column id=orders/> 
            <Column id=sales fmt=usd1k/> 
            <Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> 
        </DataTable>
    </div>

```svelte
<DataTable data={orders} groupBy=state subtotals=true groupType=section>
 	<Column id=state totalAgg=countDistinct totalFmt='[=1]0 "state";0 "states"'/> 
	<Column id=category totalAgg=Total/> 
	<Column id=item  totalAgg=countDistinct totalFmt='0 "items"'/> 
	<Column id=orders/> 
	<Column id=sales fmt=usd1k/> 
	<Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> 
</DataTable>
```
</DocTab>


#### With Configured Columns

<DocTab>
    <div slot='preview'>
        <DataTable data={orders} groupBy=category groupType=section subtotals=true totalRow=true totalRowColor=#fff0cc> 
             <Column id=state totalAgg=countDistinct totalFmt='[=1]0 "state";0 "states"'/> 
            <Column id=category totalAgg=Total/> 
            <Column id=item  totalAgg=countDistinct totalFmt='0 "items"'/> 
            <Column id=orders contentType=colorscale/> 
            <Column id=sales fmt=usd1k/> 
            <Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> 
        </DataTable>
    </div>

```svelte
<DataTable data={orders} groupBy=category groupType=section subtotals=true totalRow=true totalRowColor=#fff0cc> 
 	<Column id=state totalAgg=countDistinct totalFmt='[=1]0 "state";0 "states"'/> 
	<Column id=category totalAgg=Total/> 
	<Column id=item  totalAgg=countDistinct totalFmt='0 "items"'/> 
	<Column id=orders contentType=colorscale/> 
	<Column id=sales fmt=usd1k/> 
	<Column id=growth contentType=delta neutralMin=-0.02 neutralMax=0.02 fmt=pct1 totalAgg=weightedMean weightCol=sales /> 
</DataTable>
```
</DocTab>


### Column Groups

```sql countries
SELECT 'United States' as country, 'North America' as continent, 22996 as gdp_usd, 0.017 as gdp_growth, 0.025 as interest_rate, 0.085 as inflation_rate, 0.037 as jobless_rate, -16.7 as gov_budget, 137.2 as debt_to_gdp, -3.6 as current_account, 332.4 as population
UNION ALL
SELECT 'China', 'Asia', 17734, 0.004, 0.0365, 0.027, 0.054, -3.7, 66.8, 1.8, 1412.6
UNION ALL
SELECT 'Japan', 'Asia', 4937, 0.002, -0.001, 0.026, 0.026, -12.6, 266.2, 3.2, 125.31
UNION ALL
SELECT 'Germany', 'Europe', 4223, 0.017, 0.005, 0.079, 0.055, -3.7, 69.3, 7.4, 83.16
UNION ALL
SELECT 'United Kingdom', 'Europe', 3187, 0.029, 0.0175, 0.101, 0.038, -6, 95.9, -2.6, 67.53
UNION ALL
SELECT 'India', 'Asia', 3173, 0.135, 0.054, 0.0671, 0.078, -9.4, 73.95, -1.7, 1380
UNION ALL
SELECT 'France', 'Europe', 2937, 0.042, 0.005, 0.058, 0.074, -6.5, 112.9, 0.4, 67.63
UNION ALL
SELECT 'Italy', 'Europe', 2100, 0.047, 0.005, 0.084, 0.079, -7.2, 150.8, 2.5, 59.24
UNION ALL
SELECT 'Canada', 'North America', 1991, 0.029, 0.025, 0.076, 0.049, -4.7, 117.8, 0.1, 38.44
UNION ALL
SELECT 'South Korea', 'Asia', 1799, 0.029, 0.025, 0.057, 0.029, -6.1, 42.6, 3.5, 51.74
UNION ALL
SELECT 'Russia', 'Europe', 1776, -0.04, 0.08, 0.151, 0.039, 0.8, 18.2, 6.8, 145.55
UNION ALL
SELECT 'Brazil', 'South America', 1609, 0.032, 0.1375, 0.1007, 0.091, -4.5, 80.27, -1.8, 213.32
```

<DocTab>
    <div slot='preview'>
        <DataTable data={countries} totalRow=true rows=5 groupBy=continent groupType=section totalRowColor=#f2f2f2>
          <Column id=continent totalAgg="Total" totalFmt='# "Unique continents"'/>
          <Column id=country totalAgg=countDistinct totalFmt='0 "countries"'/>
          <Column id=gdp_usd totalAgg=sum fmt='$#,##0"B"' totalFmt='$#,##0.0,"T"' colGroup="GDP"/>
          <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' colGroup="GDP" contentType=delta/>
          <Column id=jobless_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' contentType=colorscale scaleColor=red colGroup="Labour Market"/>
          <Column id=population totalAgg=sum fmt='#,##0"M"' totalFmt='#,##0.0,"B"' colGroup="Labour Market"/>
          <Column id=interest_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' wrapTitle=false colGroup="Other"/>
          <Column id=inflation_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' colGroup="Other"/>
          <Column id=gov_budget totalAgg=weightedMean weightCol=gdp_usd fmt='0.0"%"' contentType=delta colGroup="Other"/>
          <Column id=current_account totalAgg=weightedMean weightCol=gdp_usd fmt='0.0"%"' colGroup="Other"/>
        </DataTable>
    </div>

```svelte
<DataTable data={countries} totalRow=true rows=5 groupBy=continent groupType=section totalRowColor=#f2f2f2>
  <Column id=continent totalAgg="Total" totalFmt='# "Unique continents"'/>
  <Column id=country totalAgg=countDistinct totalFmt='0 "countries"'/>
  <Column id=gdp_usd totalAgg=sum fmt='$#,##0"B"' totalFmt='$#,##0.0,"T"' colGroup="GDP"/>
  <Column id=gdp_growth totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' colGroup="GDP" contentType=delta/>
  <Column id=jobless_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct1' contentType=colorscale scaleColor=red colGroup="Labour Market"/>
  <Column id=population totalAgg=sum fmt='#,##0"M"' totalFmt='#,##0.0,"B"' colGroup="Labour Market"/>
  <Column id=interest_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' wrapTitle=false colGroup="Other"/>
  <Column id=inflation_rate totalAgg=weightedMean weightCol=gdp_usd fmt='pct2' colGroup="Other"/>
  <Column id=gov_budget totalAgg=weightedMean weightCol=gdp_usd fmt='0.0"%"' contentType=delta colGroup="Other"/>
  <Column id=current_account totalAgg=weightedMean weightCol=gdp_usd fmt='0.0"%"' colGroup="Other"/>
</DataTable>
```
</DocTab>

### Wrap Titles

<DocTab>
    <div slot='preview'>
        <DataTable data={countries} wrapTitles=true /> 
    </div>

```svelte
<DataTable data={countries} wrapTitles=true /> 
```
</DocTab>

# DataTable

## Options
<PropListing
    name=data
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name=rows
    options="number | all"
    defaultValue=10
>

Number of rows to show in the table before paginating results. Use `rows=all` to show all rows in the table.

</PropListing>
<PropListing
    name=headerColor
    required=false
    options="Hex color code | css color name"
>

Background color of the header row

</PropListing>
<PropListing
    name=headerFontColor
    required=false
    options="Hex color code | css color name"
>

Font color of the header row

</PropListing>

<PropListing
    name=totalRow
    options={['true', 'false']}
    defaultValue=false
>

Show a total row at the bottom of the table, defaults to sum of all numeric columns

</PropListing>
<PropListing
    name=totalRowColor
    options="Hex color code | css color name"
>

Background color of the total row

</PropListing>
<PropListing
    name=totalFontColor
    options="Hex color code | css color name"
>

Font color of the total row

</PropListing>
<PropListing
    name=rowNumbers
    options={['true', 'false']}
    defaultValue=false
>

Turns on or off row index numbers

</PropListing>
<PropListing
    name=rowLines
    options={['true', 'false']}
    defaultValue=true
>

Turns on or off borders at the bottom of each row

</PropListing>
<PropListing
    name=rowShading
    options={['true', 'false']}
    defaultValue=false
>

Shades every second row in light grey

</PropListing>
<PropListing
    name=backgroundColor
    options="Hex color code | css color name"
    defaultValue="-"
>

Background color of the table

</PropListing>
<PropListing
    name=sortable
    options={['true', 'false']}
    defaultValue=true
>

Enable sort for each column - click the column title to sort

</PropListing>
<PropListing
    name=sort
    options='column name + asc/desc'
    defaultValue="-"
>

Column to sort by on initial page load. Sort direction is asc if unspecified. Can only sort by one column using this prop. If you need multi-column sort, use the order by clause in your sql in combination with this prop.

</PropListing>
<PropListing
    name=search
    options={['true', 'false']}
    defaultValue=false
>

Add a search bar to the top of your table

</PropListing>
<PropListing
    name=downloadable
    options={['true', 'false']}
    defaultValue=true
>

Enable download data button below the table on hover

</PropListing>
<PropListing
    name=formatColumnTitles
    options={['true', 'false']}
    defaultValue=true
>

Enable auto-formatting of column titles. Turn off to show raw SQL column names

</PropListing>
<PropListing
    name=wrapTitles
    options={['true', 'false']}
    defaultValue=false
>

Wrap column titles

</PropListing>
<PropListing
    name="compact"
    options={['true', 'false']}
    defaultValue=false
>

Enable a more compact table view that allows more content vertically and horizontally

</PropListing>

<PropListing
    name=link
    options="column name"
    defaultValue="-"
>

Makes each row of your table a clickable link. Accepts the name of a column containing the link to use for each row in your table

</PropListing>
<PropListing
    name=showLinkCol
    options={['true', 'false']}
    defaultValue=false
>

Whether to show the column supplied to the `link` prop

</PropListing>
<PropListing
    name=generateMarkdown
    options={['true', 'false']}
    defaultValue=false
>

Helper for writing DataTable syntax with many columns. When set to true, markdown for the DataTable including each `Column` contained within the query will be generated and displayed below the table.

</PropListing>
<PropListing
    name=emptySet
    options={["error", "warn", "pass"]}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name=emptyMessage
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>

### Groups
Groups allow you to create sections within your table, increasing the density of the content you're displaying. Groups are currently limited to 1 level, but will be expanded in future versions.

<PropListing
    name=groupBy
    options="column name"
>

Column to use to create groups. Note that groups are currently limited to a single group column.

</PropListing>
<PropListing
    name=groupType
    options={['accordion', 'section']}
    defaultValue="accordion"
>

How the groups are shown in the table. Can be accordion (expand/collapse) or section (group column values are merged across rows)

</PropListing>
<PropListing
    name=subtotals
    options={['true', 'false']}
    defaultValue=false
>

Whether to show aggregated totals for the groups

</PropListing>
<PropListing
    name=subtotalFmt
    options="Excel-style format | built-in format | custom format"
>

Specify an override format to use in the subtotal row ([see available formats](/core-concepts/formatting)). Custom strings or values are unformatted by default.

</PropListing>
<PropListing
    name=groupsOpen
    options={['true', 'false']}
    defaultValue=true
>

[groupType=accordion] Whether to show the accordions as open on page load

</PropListing>
<PropListing
    name=accordionRowColor
    options="Hex color code | css color name"
>

[groupType=accordion] Background color for the accordion row

</PropListing>
<PropListing
    name=subtotalRowColor
    options="Hex color code | css color name"
>

[groupType=section] Background color for the subtotal row

</PropListing>
<PropListing
    name=subtotalFontColor
    options="Hex color code | css color name"
>

[groupType=section] Font color for the subtotal row

</PropListing>
<PropListing
    name=groupNamePosition
    options={['top', 'middle', 'bottom']}
    defaultValue="middle"
>

[groupType=section] Where the group label will appear in its cell

</PropListing>

# Column

Use the `Column` component to choose specific columns to display in your table, and to apply options to specific columns. If you don't supply any columns to the table, it will display all columns from your query result.

## Options

<PropListing
    name=id
    required
    options="column name"
>

Column id (from SQL query)

</PropListing>
<PropListing
    name=title
    options="string"
    defaultValue="column name (formatted)"
>

Override title of column

</PropListing>
<PropListing
    name=align
    options={['left', 'center', 'right']}
    defaultValue="left"
>

Align column text

</PropListing>
<PropListing
    name=fmt
    options="Excel-style format | built-in format | custom format"
>

Format the values in the column ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name=fmtColumn
    options="column name"
>

Column to use to format values in this column. This is used to achieve different value formats by row. The fmtColumn should contain strings of format codes - either Evidence built-in formats or Excel codes.

</PropListing>
<PropListing
    name=totalAgg
    options={['sum', 'mean', 'weightedMean', 'median', 'min', 'max', 'count', 'countDistinct', 'custom string or value']}
    defaultValue="sum"
>

Specify an aggregation function to use for the total row. Accepts predefined functions, custom strings or values

</PropListing>
<PropListing
    name=totalFmt
    options="Excel-style format | built-in format | custom format"
>

Specify an override format to use in the total row ([see available formats](/core-concepts/formatting)). Custom strings or values are unformatted by default.

</PropListing>
<PropListing
    name=weightCol
    options="column name"
>

Column to use as the weight values for weighted mean aggregation. If not specified, a weight of 1 for each value will be used and the result will be the same as the `mean` aggregation.

</PropListing>
<PropListing
    name=wrap
    options={['true', 'false']}
    defaultValue="false"
>

Wrap column text

</PropListing>
<PropListing
    name=wrapTitle
    options={['true', 'false']}
    defaultValue="false"
>

Wrap column title

</PropListing>
<PropListing
    name=contentType
    options={['link', 'image', 'delta', 'colorscale', 'html']}
>

Lets you specify how to treat the content within a column. See below for contentType-specific options.

</PropListing>
<PropListing
    name=colGroup
    options="string"
>

Group name to display above a group of columns. Columns with the same group name will get a shared header above them

</PropListing>

<PropListing
    name="redNegatives"
    options={[`true`, `false`]}
    defaultValue="false"
>

Conditionally sets the font color to red based on whether the selected value is less than 0

</PropListing>

### Images

`contentType=image`

<PropListing
    name=height
    options="number"
    defaultValue="original height of image"
>

Height of image in pixels

</PropListing>
<PropListing
    name=width
    options="number"
    defaultValue="original width of image"
>

Width of image in pixels

</PropListing>
<PropListing
    name=alt
    options="column name"
    defaultValue="Name of the image file (excluding the file extension)"
>

Alt text for image

</PropListing>

### Links

`contentType=link`

<PropListing
    name=linkLabel
    options="column name | string"
    defaultValue="raw url"
>

Text to display for link

</PropListing>
<PropListing
    name=openInNewTab
    options={['true', 'false']}
    defaultValue="false"
>

Whether to open link in new tab

</PropListing>

### Deltas

`contentType=delta`

<PropListing
    name=deltaSymbol
    options={['true', 'false']}
    defaultValue="true"
>

Whether to show the up/down delta arrow symbol

</PropListing>
<PropListing
    name=downIsGood
    options={['true', 'false']}
    defaultValue="false"
>

If present, negative comparison values appear in green, and positive values appear in red.

</PropListing>
<PropListing
    name=showValue
    options={['true', 'false']}
    defaultValue="true"
>

Whether to show the delta value. Set this to false to show only the delta arrow indicator.

</PropListing>
<PropListing
    name=neutralMin
    options="number"
    defaultValue="0"
>

Start of the range for 'neutral' values, which appear in grey font with a dash instead of an up/down arrow. By default, neutral is not applied to any values.

</PropListing>
<PropListing
    name=neutralMax
    options="number"
    defaultValue="0"
>

End of the range for 'neutral' values, which appear in grey font with a dash instead of an up/down arrow. By default, neutral is not applied to any values.

</PropListing>
<PropListing
    name=chip
    options={['true', 'false']}
    defaultValue="false"
>

Whether to display the delta as a 'chip', with a background color and border.

</PropListing>


### Sparklines

`contentType=sparkline`
`contentType=sparkarea`
`contentType=sparkbar`

<PropListing
    name=sparkX
    options="column from array cell"
>

Column within an array cell to use as the x-axis for the spark viz. Arrays can be created inside a query using the `array_agg()` function from DuckDB

</PropListing>

<PropListing
    name=sparkY
    options="column from array cell"
>

Column within an array cell to use as the y-axis for the spark viz. Arrays can be created inside a query using the `array_agg()` function from DuckDB

</PropListing>

<PropListing
    name=sparkYScale
    options={['true', 'false']}
    defaultValue="false"
>

Whether to truncate the y-axis

</PropListing>

<PropListing
    name=sparkHeight
    options="number"
    defaultValue=18
>

Height of the spark viz. Making the viz taller will increase the height of the full table row

</PropListing>

<PropListing
    name=sparkWidth
    options="number"
    defaultValue=90
>

Width of the spark viz

</PropListing>

<PropListing
    name=sparkColor
    options={[ 'Hex color code', 'css color name']}
>

Color of the spark viz

</PropListing>

### Bar Chart Column

`contentType=bar`

<PropListing
    name=barColor
    options={[ 'Hex color code', 'css color name']}
>

Color of the bars. Affects positive bars only. See `negativeBarColor` to change color of negative bars

</PropListing>

<PropListing
    name=negativeBarColor
    options={[ 'Hex color code', 'css color name']}
>

Color of negative bars

</PropListing>

<PropListing
    name=hideLabels
    options={['true', 'false']}
    defaultValue="false"
>

Whether to hide the data labels on the bars

</PropListing>

<PropListing
    name=backgroundColor
    options={[ 'Hex color code', 'css color name']}
    defaultValue="transparent"
>

Background color for bar chart

</PropListing>

### Conditional Formatting (Color Scales)

`contentType=colorscale`

<PropListing
    name=scaleColor
    options={['green', 'blue', 'red', 'Hex color code', 'css color name']}
    defaultValue="green"
>

Color to use for the scale

</PropListing>
<PropListing
    name=colorMin
    options="number"
    defaultValue="min of column"
>

Set a minimum for the scale. Any values below that minimum will appear in the lowest color on the scale

</PropListing>
<PropListing
    name=colorMid
    options="number"
    defaultValue="mid of column"
>

Set a midpoint for the scale

</PropListing>
<PropListing
    name=colorMax
    options="number"
    defaultValue="max of column"
>

Set a maximum for the scale. Any values above that maximum will appear in the highest color on the scale

</PropListing>
<PropListing
    name=colorBreakpoints
    options="array of numbers"
>

Array of numbers to use as breakpoints for each color in your color scale. Should line up with the colors you provide in `scaleColor`

</PropListing>

<PropListing
    name=scaleColumn
    options="column name"
>

Column to use to define the color scale range. Values in this column will have their cell color determined by the value in the scaleColumn

</PropListing>

### HTML

`contentType=html`

To apply styling to HTML tags, you will need to add the `class=markdown` attribute **to the HTML tag in your column**. This will apply the same styling as the markdown renderer. E.g., `<code class=markdown>Code</code>`


---
evidence/sites/docs/pages/components/custom-echarts/index.md
---
---
sidebar_position: 98
title: Custom ECharts
---

Our chart library is based on [ECharts](https://echarts.apache.org/examples/en/index.html), a powerful and flexible open source JavaScript chart library. We use many of the features in ECharts, and combine them with custom data transformation, logic, and theming.

## `<ECharts>` Component

If you would like to create a fully custom chart, you can use our built-in `<ECharts>` component. This component accepts a JavaScript object containing a chart configuration. To test this out, you can find an example on the [ECharts example page](https://echarts.apache.org/examples/en/index.html) and paste the option object into the Evidence `<ECharts>` component.

This will let you create a chart that matches Evidence theming, but gives you access to the [full suite](https://echarts.apache.org/en/option.html#title) of ECharts features.

The downside of this approach is that `<ECharts>` requires data to be included in the configuration object, which can be difficult depending on the type of chart you need. If you would like to use specialized ECharts features, but retain the data management you get with Evidence charts, we recommend building a [mixed-type chart](/components/mixed-type-charts) and passing in an `options` object for the specific features you need.

## How to Build the Configuration

To create a JavaScript object in an Evidence markdown page, you need to add a `&lt;script&gt;` tag. Any objects or variables you create in that script tag are then accessible by the rest of your page using curly braces. For example, if you create a variable named `myVar`, you can show the contents of that variable in your markdown using `{myVar}`.

## Examples

### Simple Treemap

[Link to ECharts example](https://echarts.apache.org/examples/en/editor.html?c=treemap-simple)

ECharts requires the data object to have a specific format. For example in the treemap chart show below it expects the columns to be called “name” and “value”. The `test_data` query in the code below renames the fields from the original query so ECharts can use them.


<DocTab>
  <div slot='preview'>

```sql sales_by_country
select 'Canada' as country, 100 as sales
union all
select 'US' as country, 250 as sales
union all
select 'UK' as country, 130 as sales
union all
select 'Australia' as country, 95 as sales
```

```sql test_data
select country as name, sales as value
from ${sales_by_country}
```

    <ECharts config={
        {
          title: {
            text: 'Treemap Example',
            left: 'center'
          },
            tooltip: {
                formatter: '{b}: {c}'
            },
          series: [
            {
              type: 'treemap',
              visibleMin: 300,
              label: {
                show: true,
                formatter: '{b}'
              },
              itemStyle: {
                borderColor: '#fff'
              },
              roam: false,
              nodeClick: false,
              data: [...test_data],
              breadcrumb: {
                show: false
              }
            }
          ]
          }
        }
    />
  </div>

````markdown
```sql sales_by_country
select 'Canada' as country, 100 as sales
union all
select 'US' as country, 250 as sales
union all
select 'UK' as country, 130 as sales
union all
select 'Australia' as country, 95 as sales
```

```sql test_data
select country as name, sales as value
from ${sales_by_country}
```

<ECharts config={
    {
      title: {
        text: 'Treemap Example',
        left: 'center'
      },
        tooltip: {
            formatter: '{b}: {c}'
        },
      series: [
        {
          type: 'treemap',
          visibleMin: 300,
          label: {
            show: true,
            formatter: '{b}'
          },
          itemStyle: {
            borderColor: '#fff'
          },
          roam: false,
          nodeClick: false,
          data: [...test_data],
          breadcrumb: {
            show: false
          }
        }
      ]
      }
    }
/>

````
</DocTab>

### Funnel Chart

[Link to ECharts example](https://echarts.apache.org/examples/en/editor.html?c=funnel)

ECharts requires the data object to have a specific format. For example in the funnel chart show below it expects the columns to be called “name” and “value”. The `funnel_data` query in the code below renames the fields from the original query so ECharts can use them.

<DocTab>
    <div slot='preview'>

```sql funnel_stages
select 'Emailed' as stage, 129 as count
union all
select 'Meeting' as stage, 86 as count
union all
select 'Proposal' as stage, 65 as count
union all
select 'Signed' as stage, 44 as count
```

```sql funnel_data
select stage as name, count as value
from ${funnel_stages}
```

      <ECharts config={
              {
                  tooltip: {
                      formatter: '{b}: {c}'
                  },
                  series: [
                      {
                      type: 'funnel',
                      data: [...funnel_data],
                      }
                  ]
              }
          }
      />
    </div>

````markdown
```sql funnel_stages
select 'Emailed' as stage, 129 as count
union all
select 'Meeting' as stage, 86 as count
union all
select 'Proposal' as stage, 65 as count
union all
select 'Signed' as stage, 44 as count
```

```sql funnel_data
select stage as name, count as value
from ${funnel_stages}
```

<ECharts config={
        {
            tooltip: {
                formatter: '{b}: {c}'
            },
            series: [
                {
                type: 'funnel',
                data: [...funnel_data],
                }
            ]
        }
    }
/>
````
</DocTab>



### Pie Chart

[Link to ECharts example](https://echarts.apache.org/examples/en/editor.html?c=pie-simple)

ECharts requires the data object to have a specific format. For example in the pie chart show below it expects the columns to be called “name” and “value”. The `pie_data` query in the code below renames the fields from the original query so ECharts can use them.

<DocTab>
    <div slot='preview'>

```sql pie_query
select 'Apple' as pie, 60 as count
union all
select 'Blueberry' as pie, 70 as count
union all
select 'Cherry' as pie, 40 as count
union all
select 'Pecan' as pie, 35 as count
```

```sql pie_data
select pie as name, count as value
from ${pie_query}
```

      <ECharts config={
          {
              tooltip: {
                  formatter: '{b}: {c} ({d}%)'
              },
              series: [
              {
                type: 'pie',
                data: [...pie_data],
              }
            ]
            }
          }
      />
    </div>

````markdown
```sql pie_query
select 'Apple' as pie, 60 as count
union all
select 'Blueberry' as pie, 70 as count
union all
select 'Cherry' as pie, 40 as count
union all
select 'Pecan' as pie, 35 as count
```

```sql pie_data
select pie as name, count as value
from ${pie_query}
```

<ECharts config={
    {
        tooltip: {
            formatter: '{b}: {c} ({d}%)'
        },
        series: [
        {
          type: 'pie',
          data: [...pie_data],
        }
      ]
      }
    }
/>
````
</DocTab>




### Donut Chart

[Link to ECharts example](https://echarts.apache.org/examples/en/editor.html?c=pie-doughnut)

ECharts requires the data object to have a specific format. For example in the donut chart show below it expects the columns to be called “name” and “value”. The `donut_data` query in the code below renames the fields from the original query so ECharts can use them.

<DocTab>
    <div slot='preview'>

```sql donut_query
select 'Glazed' as donut, 213 as count
union all
select 'Cruller' as donut, 442 as count
union all
select 'Jelly-filled' as donut, 321 as count
union all
select 'Cream-filled' as donut, 350 as count
```

```sql donut_data
select donut as name, count as value
from ${donut_query}
```

      <ECharts config={
          {
              tooltip: {
                  formatter: '{b}: {c} ({d}%)'
              },
            series: [
              {
                type: 'pie',
                radius: ['40%', '70%'],
                data: [...donut_data],
              }
            ]
            }
          }
      />
    </div>

````markdown
```sql donut_query
select 'Glazed' as donut, 213 as count
union all
select 'Cruller' as donut, 442 as count
union all
select 'Jelly-filled' as donut, 321 as count
union all
select 'Cream-filled' as donut, 350 as count
```

```sql donut_data
select donut as name, count as value
from ${donut_query}
```

<ECharts config={
    {
        tooltip: {
            formatter: '{b}: {c} ({d}%)'
        },
      series: [
        {
          type: 'pie',
          radius: ['40%', '70%'],
          data: [...donut_data],
        }
      ]
      }
    }
/>
````
</DocTab>

### Advanced Chart

[Link to ECharts example](https://echarts.apache.org/examples/en/editor.html?c=scatter-anscombe-quartet)

<script>
const dataAll = [
  [
    [10.0, 8.04],
    [8.0, 6.95],
    [13.0, 7.58],
    [9.0, 8.81],
    [11.0, 8.33],
    [14.0, 9.96],
    [6.0, 7.24],
    [4.0, 4.26],
    [12.0, 10.84],
    [7.0, 4.82],
    [5.0, 5.68]
  ],
  [
    [10.0, 9.14],
    [8.0, 8.14],
    [13.0, 8.74],
    [9.0, 8.77],
    [11.0, 9.26],
    [14.0, 8.1],
    [6.0, 6.13],
    [4.0, 3.1],
    [12.0, 9.13],
    [7.0, 7.26],
    [5.0, 4.74]
  ],
  [
    [10.0, 7.46],
    [8.0, 6.77],
    [13.0, 12.74],
    [9.0, 7.11],
    [11.0, 7.81],
    [14.0, 8.84],
    [6.0, 6.08],
    [4.0, 5.39],
    [12.0, 8.15],
    [7.0, 6.42],
    [5.0, 5.73]
  ],
  [
    [8.0, 6.58],
    [8.0, 5.76],
    [8.0, 7.71],
    [8.0, 8.84],
    [8.0, 8.47],
    [8.0, 7.04],
    [8.0, 5.25],
    [19.0, 12.5],
    [8.0, 5.56],
    [8.0, 7.91],
    [8.0, 6.89]
  ]
];
const markLineOpt = {
  animation: false,
  label: {
    formatter: 'y = 0.5 * x + 3',
    align: 'right'
  },
  lineStyle: {
    type: 'solid'
  },
  tooltip: {
    formatter: 'y = 0.5 * x + 3'
  },
  data: [
    [
      {
        coord: [0, 3],
        symbol: 'none'
      },
      {
        coord: [20, 13],
        symbol: 'none'
      }
    ]
  ]
};
let options = {
  title: {
    text: "Anscombe's quartet",
    left: 'center',
    top: 0
  },
  grid: [
    { left: '7%', top: '7%', width: '38%', height: '38%' },
    { right: '7%', top: '7%', width: '38%', height: '38%' },
    { left: '7%', bottom: '7%', width: '38%', height: '38%' },
    { right: '7%', bottom: '7%', width: '38%', height: '38%' }
  ],
  tooltip: {
    formatter: 'Group {a}: ({c})'
  },
  xAxis: [
    { gridIndex: 0, min: 0, max: 20 },
    { gridIndex: 1, min: 0, max: 20 },
    { gridIndex: 2, min: 0, max: 20 },
    { gridIndex: 3, min: 0, max: 20 }
  ],
  yAxis: [
    { gridIndex: 0, min: 0, max: 15 },
    { gridIndex: 1, min: 0, max: 15 },
    { gridIndex: 2, min: 0, max: 15 },
    { gridIndex: 3, min: 0, max: 15 }
  ],
  toolbox: {
      show: true,
      feature: {
          saveAsImage: {
              show: true
          }
      }
  },
  series: [
    {
      name: 'I',
      type: 'scatter',
      xAxisIndex: 0,
      yAxisIndex: 0,
      data: dataAll[0],
      markLine: markLineOpt
    },
    {
      name: 'II',
      type: 'scatter',
      xAxisIndex: 1,
      yAxisIndex: 1,
      data: dataAll[1],
      markLine: markLineOpt
    },
    {
      name: 'III',
      type: 'scatter',
      xAxisIndex: 2,
      yAxisIndex: 2,
      data: dataAll[2],
      markLine: markLineOpt
    },
    {
      name: 'IV',
      type: 'scatter',
      xAxisIndex: 3,
      yAxisIndex: 3,
      data: dataAll[3],
      markLine: markLineOpt
    }
  ]
};
</script>

<DocTab>
    <div slot='preview'>
        <ECharts config={options}/>
    </div>

```markdown
&lt;script&gt;
const dataAll = [
  [
    [10.0, 8.04],
    [8.0, 6.95],
    [13.0, 7.58],
    [9.0, 8.81],
    [11.0, 8.33],
    [14.0, 9.96],
    [6.0, 7.24],
    [4.0, 4.26],
    [12.0, 10.84],
    [7.0, 4.82],
    [5.0, 5.68]
  ],
  [
    [10.0, 9.14],
    [8.0, 8.14],
    [13.0, 8.74],
    [9.0, 8.77],
    [11.0, 9.26],
    [14.0, 8.1],
    [6.0, 6.13],
    [4.0, 3.1],
    [12.0, 9.13],
    [7.0, 7.26],
    [5.0, 4.74]
  ],
  [
    [10.0, 7.46],
    [8.0, 6.77],
    [13.0, 12.74],
    [9.0, 7.11],
    [11.0, 7.81],
    [14.0, 8.84],
    [6.0, 6.08],
    [4.0, 5.39],
    [12.0, 8.15],
    [7.0, 6.42],
    [5.0, 5.73]
  ],
  [
    [8.0, 6.58],
    [8.0, 5.76],
    [8.0, 7.71],
    [8.0, 8.84],
    [8.0, 8.47],
    [8.0, 7.04],
    [8.0, 5.25],
    [19.0, 12.5],
    [8.0, 5.56],
    [8.0, 7.91],
    [8.0, 6.89]
  ]
];
const markLineOpt = {
  animation: false,
  label: {
    formatter: 'y = 0.5 * x + 3',
    align: 'right'
  },
  lineStyle: {
    type: 'solid'
  },
  tooltip: {
    formatter: 'y = 0.5 * x + 3'
  },
  data: [
    [
      {
        coord: [0, 3],
        symbol: 'none'
      },
      {
        coord: [20, 13],
        symbol: 'none'
      }
    ]
  ]
};
let options = {
  title: {
    text: "Anscombe's quartet",
    left: 'center',
    top: 0
  },
  grid: [
    { left: '7%', top: '7%', width: '38%', height: '38%' },
    { right: '7%', top: '7%', width: '38%', height: '38%' },
    { left: '7%', bottom: '7%', width: '38%', height: '38%' },
    { right: '7%', bottom: '7%', width: '38%', height: '38%' }
  ],
  tooltip: {
    formatter: 'Group {a}: ({c})'
  },
  xAxis: [
    { gridIndex: 0, min: 0, max: 20 },
    { gridIndex: 1, min: 0, max: 20 },
    { gridIndex: 2, min: 0, max: 20 },
    { gridIndex: 3, min: 0, max: 20 }
  ],
  yAxis: [
    { gridIndex: 0, min: 0, max: 15 },
    { gridIndex: 1, min: 0, max: 15 },
    { gridIndex: 2, min: 0, max: 15 },
    { gridIndex: 3, min: 0, max: 15 }
  ],
  toolbox: {
      show: true,
      feature: {
          saveAsImage: {
              show: true
          }
      }
  },
  series: [
    {
      name: 'I',
      type: 'scatter',
      xAxisIndex: 0,
      yAxisIndex: 0,
      data: dataAll[0],
      markLine: markLineOpt
    },
    {
      name: 'II',
      type: 'scatter',
      xAxisIndex: 1,
      yAxisIndex: 1,
      data: dataAll[1],
      markLine: markLineOpt
    },
    {
      name: 'III',
      type: 'scatter',
      xAxisIndex: 2,
      yAxisIndex: 2,
      data: dataAll[2],
      markLine: markLineOpt
    },
    {
      name: 'IV',
      type: 'scatter',
      xAxisIndex: 3,
      yAxisIndex: 3,
      data: dataAll[3],
      markLine: markLineOpt
    }
  ]
};
&lt;/script&gt;

<ECharts config={options}/>
```
</DocTab>





---
evidence/sites/docs/pages/components/histogram/index.md
---
---
title: Histogram
sidebar_position: 1
---

```sql orders
select * from needful_things.orders limit 1000
```
```sql orders_week
select * from needful_things.orders limit 10000
```

<DocTab>
    <div slot='preview'>
        <Histogram
        data={orders}
        x=sales
        />
    </div>

```markdown
<Histogram
    data={orders}
    x=sales
/>
```
</DocTab>


## Examples

### Histogram

<DocTab>
    <div slot='preview'>
        <Histogram
        data={orders_week}
        x=sales
        xAxisTitle="Weekly Sales"
        />
    </div>

```markdown
<Histogram
    data={orders_week}
    x=sales
    xAxisTitle="Weekly Sales"
/>
```
</DocTab>

## Options

### Data

<PropListing 
    name="data"
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing 
    name="x"
    required
    options="column name"
>

Column which contains the data you want to summarize

</PropListing>
<PropListing 
    name="emptySet"
    options={['error', 'warn', 'pass']}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing 
    name="emptyMessage"
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>

### Formatting & Styling

<PropListing 
    name="xFmt"
    options="Excel-style format | built-in format name | custom format name"
>

Format to use for x column ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing 
    name="fillColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color

</PropListing>
<PropListing 
    name="fillOpacity"
    options="number (0 to 1)"
    defaultValue="1"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing 
    name="colorPalette"
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue="built-in color palette"
>

Array of custom colours to use for the chart. E.g., `{['#cf0d06','#eb5752','#e88a87']}`

</PropListing>

### Axes

<PropListing 
    name="xAxisTitle"
    options={['true', 'string', 'false']}
    defaultValue="false"
>

Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false

</PropListing>
<PropListing 
    name="yAxisTitle"
    options={['true', 'string', 'false']}
    defaultValue="false"
>

Name to show beside y-axis. If 'true', formatted column name is used.

</PropListing>
<PropListing 
    name="xGridlines"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)

</PropListing>
<PropListing 
    name="yGridlines"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)

</PropListing>
<PropListing 
    name="xAxisLabels"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off value labels on the x-axis

</PropListing>
<PropListing 
    name="yAxisLabels"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off value labels on the y-axis

</PropListing>
<PropListing 
    name="xBaseline"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off thick axis line (line appears at y=0)

</PropListing>
<PropListing 
    name="yBaseline"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off thick axis line (line appears directly alongside the y-axis labels)

</PropListing>
<PropListing 
    name="xTickMarks"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off tick marks for each of the x-axis labels

</PropListing>
<PropListing 
    name="yTickMarks"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off tick marks for each of the y-axis labels

</PropListing>
<PropListing 
    name="yMin"
    options="number"
>

Starting value for the y-axis

</PropListing>
<PropListing 
    name="yMax"
    options="number"
>

Maximum value for the y-axis

</PropListing>

### Chart

<PropListing
    name="title"
    options="string"
>

Chart title. Appears at top left of chart.

</PropListing>
<PropListing
    name="subtitle"
    options="string"
>

Chart subtitle. Appears just under title.

</PropListing>
<PropListing
    name="legend"
    options={['true', 'false']}
    defaultValue="true for multiple series"
>

Turns legend on or off. Legend appears at top center of chart.

</PropListing>
<PropListing
    name="chartAreaHeight"
    options="number"
    defaultValue="180"
>

Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX.

</PropListing>
<PropListing
    name="renderer"
    options={['canvas', 'svg']}
    defaultValue="canvas"
>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

Which chart renderer type (canvas or SVG) to use. See ECharts' [documentation on renderers](https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/).

</PropListing>

### Custom Echarts Options

<PropListing
    name="echartsOptions"
    options="{`{{exampleOption:'exampleValue'}}`}"
>

Custom Echarts options to override the default options. See [reference page](/components/echarts-options/) for available options.

</PropListing>
<PropListing
    name="seriesOptions"
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
>

Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See [reference page](/components/echarts-options/) for available options.

</PropListing>
<PropListing
    name="printEchartsConfig"
    options={['true', 'false']}
    defaultValue="false"
>

Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options

</PropListing>

### Interactivity

<PropListing
    name="connectGroup"
>

Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected

</PropListing>



## Annotations

Histograms can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

```html
<Histogram data={sales_data} x=category>
  <ReferenceLine y=20/>
  <ReferenceArea xMin=3 xMax=8/>
</Histogram>
```

---
evidence/sites/docs/pages/components/delta/index.md
---
---
sidebar_position: 1
title: Delta
---

```sql growth
select 0.366 as positive, -0.366 as negative
```

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=positive fmt=pct1 />
    </div>

```markdown
<Delta data={sales} column=growth fmt=pct1 />
```
</DocTab>

## Examples

### Value Types

```markdown
<Delta data={sales} column=growth fmt=pct1 />
```

#### Positive

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=positive fmt=pct1/>
    </div>

```markdown
<Delta data={growth} column=positive fmt=pct1 />
```
</DocTab>

#### Negative 

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=negative fmt=pct1 />
    </div>

```markdown
<Delta data={growth} column=negative fmt=pct1 />
```
</DocTab>

#### Neutral*
*Values are not defined as neutral until you define a range using the `neutralMin` and `neutralMax` props

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=positive fmt=pct1 neutralMin=0 neutralMax=0.4/>
    </div>

```markdown
<Delta data={sales} column=growth fmt=pct1 neutralMin=-0.4 neutralMax=0.4 />
```
</DocTab>

### Chips

```html
<Delta data={sales} column=growth fmt=pct1 chip=true />
```

#### Positive

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=positive fmt=pct1 chip=true/>
    </div>

````markdown
<Delta data={growth} column=positive fmt=pct1 chip=true/>
````
</DocTab>

#### Negative 

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=negative fmt=pct1 chip=true/>
    </div>

````markdown
<Delta data={growth} column=negative fmt=pct1 chip=true/>
````
</DocTab>

#### Neutral*
*Values are not defined as neutral until you define a range using the `neutralMin` and `neutralMax` props

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=positive fmt=pct1 neutralMin=0 neutralMax=0.4 chip=true/>
    </div>

```markdown
<Delta data={sales} column=growth fmt=pct1 chip=true neutralMin=-0.4 neutralMax=0.4 />
```
</DocTab>

### Symbol Position

#### Symbol on Left

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=positive fmt=pct1 symbolPosition=left/>
    </div>


```html
<Delta data={sales} column=growth fmt=pct1 symbolPosition=left/>
```
</DocTab>

#### Symbol on Left in Chip

<DocTab>
    <div slot='preview'>
        <Delta data={growth} column=negative fmt=pct1 symbolPosition=left/>
    </div>

```html
<Delta data={sales} column=growth fmt=pct1 chip=true symbolPosition=left/>
```
</DocTab>

## Options
<PropListing
    name=data
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name=column
    options="column name"
    defaultValue="First column"
>

Column to pull values from

</PropListing>
<PropListing
    name=row
    options="number"
    defaultValue="0"
>

Row number to display. 0 is the first row.

</PropListing>
<PropListing
    name=value
    options="number"
>

Pass a specific value to the component (e.g., value=100). Overridden by the data/column props.

</PropListing>
<PropListing
    name=fmt
    options="Excel-style format | built-in format | custom format"
>

Format to use for the value ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name=downIsGood
    options={['true', 'false']}
    defaultValue="false"
>

If true, negative comparison values appear in green, and positive values appear in red.

</PropListing>
<PropListing
    name=showSymbol
    options={['true', 'false']}
    defaultValue="true"
>

Whether to show the up/down delta arrow symbol

</PropListing>
<PropListing
    name=showValue
    options={['true', 'false']}
    defaultValue="true"
>

Whether to show the value. Set this to false to show only the delta arrow indicator.

</PropListing>
<PropListing
    name=text
    options="string"
>

Text to display after the delta symbol and value

</PropListing>
<PropListing
    name=neutralMin
    options="number"
    defaultValue="0"
>

Start of the range for 'neutral' values, which appear in grey font with a dash instead of an up/down arrow. By default, neutral is not applied to any values.

</PropListing>
<PropListing
    name=neutralMax
    options="number"
    defaultValue="0"
>

End of the range for 'neutral' values, which appear in grey font with a dash instead of an up/down arrow. By default, neutral is not applied to any values.

</PropListing>
<PropListing
    name=chip
    options={['true', 'false']}
    defaultValue="false"
>

Whether to display the delta as a 'chip', with a background color and border.

</PropListing>
<PropListing
    name=symbolPosition
    options={['left', 'right']}
    defaultValue="right"
>

Whether to display the delta symbol to the left or right of the value

</PropListing>
<PropListing
    name=emptySet
    options={['error', 'warn', 'pass']}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name=emptyMessage
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>

---
evidence/sites/docs/pages/components/point-map/index.md
---
---
title: Point Map
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
        <PointMap data={la_locations} lat=lat long=long value=sales valueFmt=usd pointName=point_name height=200/>
    </div>

```html
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    pointName=point_name 
    height=200
/>
```
</DocTab>


```sql la_locations
select *, 'https://www.google.com/search?q=' || point_name as link_col from la_locations
```


## Examples

### Custom Basemap
You can add a different basemap by passing in a basemap URL. You can find examples here: https://leaflet-extras.github.io/leaflet-providers/preview/

<DocTab>
    <div slot='preview'>
        <PointMap data={la_locations} lat=lat long=long value=sales valueFmt=usd pointName=point_name height=200 basemap={`https://tile.openstreetmap.org/{z}/{x}/{y}.png`} attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'/>
    </div>
<br>

**Note:** you need to wrap the url in curly braces and backticks to avoid the curly braces in the URL being read as variables on your page

```svelte
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    pointName=point_name 
    height=200 
    basemap={`https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.{ext}`}
    attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
/>
```
</DocTab>

### Custom Tooltip

#### `tooltipType=hover`

<DocTab>
    <div slot='preview'>
        <PointMap 
            data={la_locations} 
            lat=lat 
            long=long 
            value=sales 
            valueFmt=usd 
            pointName=point_name 
            height=200
            tooltipType=hover
            tooltip={[
                {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
                {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'}
            ]}
        />
    </div>

```svelte
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    pointName=point_name 
    height=200
    tooltipType=hover
    tooltip={[
        {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'}    
    ]}
/>
```
</DocTab>


#### With clickable link and `tooltipType=click`

<DocTab>
    <div slot='preview'>
        <PointMap 
            data={la_locations} 
            lat=lat 
            long=long 
            value=sales 
            valueFmt=usd 
            pointName=point_name 
            height=200
            tooltipType=click
            tooltip={[
                {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
                {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
                {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
            ]}
        />
    </div>

```svelte
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    pointName=point_name 
    height=200
    tooltipType=click
    tooltip={[
        {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
        {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
    ]}
/>
```
</DocTab>

### Custom Color Palette

<DocTab>
    <div slot='preview'>
    <PointMap 
        data={la_locations} 
        lat=lat 
        long=long 
        value=sales 
        valueFmt=usd 
        pointName=point_name 
        height=200
        colorPalette={['yellow','orange','red','darkred']}
    />   
    </div>

```svelte
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    pointName=point_name 
    height=200
    colorPalette={['yellow','orange','red','darkred']}
/>
```
</DocTab>

### Custom Styling

<DocTab>
    <div slot='preview'>
        <PointMap 
            data={la_locations} 
            lat=lat 
            long=long 
            pointName=point_name 
            height=200
            color=#128c2b
            size=10
            opacity=0.6
            borderWidth=0
        />
    </div>

```svelte
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    pointName=point_name 
    height=200
    color=#128c2b
    size=10
    opacity=0.6
    borderWidth=0
/>
```
</DocTab>

### Link Drilldown
Pass in a `link` column to enable navigation on click of the point. These can be absolute or relative URLs

<DocTab>
    <div slot='preview'>
        <PointMap 
            data={la_locations} 
            lat=lat 
            long=long 
            link=link_col 
            height=200
        />      
    </div>

```svelte
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    link=link_col 
    height=200
/>
```
</DocTab>

### Use Map as Input
Use the `name` prop to set an input name for the map - when a point is clicked, it will set the input value to that row of data

<DocTab>
    <div slot='preview'>
        <PointMap 
            data={la_locations} 
            lat=lat 
            long=long 
            name=my_point_map 
            height=200
        />
    </div>

```svelte
<PointMap 
    data={la_locations} 
    lat=lat 
    long=long 
    name=my_point_map 
    height=200
/>
```
</DocTab>


*Click a point on the map to see the input value get updated:*

#### Selected value for `{inputs.my_point_map}`: 
  
<pre class="text-sm">{JSON.stringify(inputs.my_point_map, null, 2)}</pre>

#### Selected value for `{inputs.my_point_map.point_name}`: 
  
{inputs.my_point_map.point_name}

```filtered_locations
select * from ${la_locations}
where point_name = '${inputs.my_point_map.point_name}' OR '${inputs.my_point_map.point_name}' = 'true'
```

#### Filtered Data

<DataTable data={filtered_locations}>  	
    <Column id=id/> 	
    <Column id=point_name/> 	
    <Column id=lat/> 	
    <Column id=long/> 	
    <Column id=sales fmt=usd/> 	
</DataTable>

### Legends

```grouped_locations
SELECT 
  *, 
  CASE 
    WHEN id BETWEEN 0 AND 4 THEN 'Hotels'
    WHEN id BETWEEN 5 AND 9 THEN 'Restaurants'
    WHEN id BETWEEN 10 AND 14 THEN 'Golf Courses'
    WHEN id BETWEEN 15 AND 19 THEN 'Shops'
    WHEN id BETWEEN 20 AND 24 THEN 'Bars'
    WHEN id BETWEEN 25 AND 29 THEN 'Entertainment'
    WHEN id BETWEEN 30 AND 34 THEN 'Banks'
  END AS Category
FROM la_locations
```	
#### Categorical Legend

<DocTab>
    <div slot='preview'>
        <PointMap
            data={grouped_locations}
            lat=lat
            long=long
            value=Category
        />
    </div>

```svelte
<PointMap
    data={grouped_locations}
    lat=lat
    long=long
    value=Category
/>
```
</DocTab>

#### Custom Colors
Set custom legend colors using the `colorPalette` prop to match the number of categories; excess categorical options will default to standard colors.

<DocTab>
    <div slot='preview'>
        <PointMap
            data={grouped_locations}
            lat=lat
            long=long
            value=Category
            colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}
        />
    </div>

```svelte
<PointMap
    data={grouped_locations}
    lat=lat
    long=long
    value=Category
    colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}
/>
```
</DocTab>

#### Scalar Legend

<DocTab>
    <div slot='preview'>
        <PointMap
            data={grouped_locations}
            lat=lat
            long=long
            value=sales
            valueFmt=usd
        />
    </div>

```svelte
<PointMap
    data={grouped_locations}
    lat=lat
    long=long
    value=sales
    valueFmt=usd
/>
```
</DocTab>

#### Custom Colors
Define scalar legend colors using the `colorPalette` prop, allowing specified colors to create a gradient based on the range of values.

<DocTab>
    <div slot='preview'>
        <PointMap
            data={grouped_locations}
            lat=lat
            long=long
            value=sales
            valueFmt=usd
            colorPalette={['#C65D47', '#4A8EBA']}
        />
    </div>

```svelte
<PointMap
    data={grouped_locations}
    lat=lat
    long=long
    value=sales
    valueFmt=usd
    colorPalette={['#C65D47', '#4A8EBA']}
/>
```
</DocTab>

## Options

### Points

<PropListing
name="data"
required
options="query name"
>
Query result, referenced using curly braces
</PropListing>

<PropListing
name="value"
options="column name"
>
Column that determines the value displayed at each point.
</PropListing>

<PropListing
name="valueFmt"
options="format string"
>
Format string for displaying the value.
</PropListing>

<PropListing
name="pointName"
options="column name"
>
Column containing the names/labels of the points - by default, this is shown as the title of the tooltip.
</PropListing>

### Color Scale

<PropListing
name="colorPalette"
options="array of colors"
>
Array of colors used for theming the points based on data <code></code>
</PropListing>

<PropListing
name="min"
options="number"
>
Minimum value to use for the color scale.
</PropListing>

<PropListing
name="max"
options="number"
>
Maximum value to use for the color scale.
</PropListing>

### Legend

<PropListing
    name="legend"
    description="Turns legend on or off"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
name="legendType"
options={['categorical', 'scalar']}
>
Appends a categorical or scalar legend to the map
</PropListing>

<PropListing
name="legendPosition"
options={['bottomLeft', 'topLeft','bottomRight', 'topRight']}
defaultValue='bottomLeft'
>
Determines the legend's position on the map, with options provided
</PropListing>

### Interactivity

<PropListing
name="link"
options="URL"
>
URL to navigate to when a point is clicked.
</PropListing>

<PropListing
name="name"
options="string"
>
Input name. Can be referenced on your page with `{inputs.my_input_name}`
</PropListing>

### Styling
<PropListing
name="color"
options="CSS color value"
>
Color for the points. Use when you want all points to be the same color.
</PropListing>

<PropListing
name="size"
options="number"
defaultValue=5
>
Size of the points
</PropListing>

<PropListing
name="borderWidth"
options="pixel value"
>
Width of the border around each point.
</PropListing>

<PropListing
name="borderColor"
options="CSS color value"
>
Color of the border around each point.
</PropListing>

<PropListing
name="opacity"
options="number between 0 and 1"
>
Opacity of the points.
</PropListing>


### Selected State

<PropListing
name="selectedColor"
options="CSS color value"
>
When point is selected: Color for the points. Use when you want all points to be the same color.
</PropListing>

<PropListing
name="selectedBorderWidth"
options="pixel value"
defaultValue=0.75
>
When point is selected: Width of the border around each point.
</PropListing>

<PropListing
name="selectedBorderColor"
options="CSS color value"
defaultVallue="white"
>
When point is selected: Color of the border around each point.
</PropListing>

<PropListing
name="selectedOpacity"
options="number between 0 and 1"
defaultValue=0.8
>
When point is selected: Opacity of the points.
</PropListing>


### Tooltips
<PropListing
name="showTooltip"
options="boolean"
defaultValue=true
>
Whether to show tooltips
</PropListing>

<PropListing
name="tooltipType"
options={['hover', 'click']}
defaultValue='hover'
>
Determines whether tooltips are activated by hover or click.
</PropListing>

<PropListing
name="tooltipClass"
options="CSS class"
>
CSS class applied to the tooltip content. You can pass Tailwind classes into this prop to custom-style the tooltip
</PropListing>


<PropListing
name="tooltip"
options="array of objects"
>
Configuration for tooltips associated with each area. See below example for format
</PropListing>

<LineBreak/>

#### `tooltip` example:

```javascript
tooltip={[
    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
]}
```

#### All options available in `tooltip`:
- `id`: column ID
- `title`: custom string to use as title of field
- `fmt`: format to use for value
- `showColumnName`: whether to show the column name. If `false`, only the value will be shown
- `contentType`: currently can only be "link"
- `linkLabel`: text to show for a link when contentType="link"
- `formatColumnTitle`: whether to automatically uppercase the first letter of the title. Only applies when `title` not passed explicitly
- `valueClass`: custom Tailwind classes to style the values
- `fieldClass`: custom Tailwind classes to style the column names



### Base Map

<PropListing
name="basemap"
options="URL"
>
URL template for the basemap tiles.
</PropListing>

<PropListing
name="attribution"
options="text"
>
Attribution text to display on the map (e.g., "© OpenStreetMap contributors").
</PropListing>


<PropListing
name="title"
options="text"
>
Optional title displayed above the map.
</PropListing>

<PropListing
name="startingLat"
options="latitude coordinate"
>
Starting latitude for the map center.
</PropListing>

<PropListing
name="startingLong"
options="longitude coordinate"
>
Starting longitude for the map center.
</PropListing>

<PropListing
name="startingZoom"
options="number (1 to 18)"
>
Initial zoom level of the map.
</PropListing>

<PropListing
name="height"
options="pixel value"
defaultValue="300"
>
Height of the map in pixels.
</PropListing>


---
evidence/sites/docs/pages/components/button-group/index.md
---
---
title: Button Group
sidebar_position: 1
queries:
- categories.sql
---

Creates a group of single-select buttons for quick filtering

To see how to filter a query using a Button Group, see [Filters](/core-concepts/filters).


## Examples

### Button Group using Options from a Query

<DocTab>
    <div slot='preview'>
        <ButtonGroup 
            data={categories} 
            name=category_picker 
            value=category
        />

        Selected: {inputs.category_picker}
    </div>

```markdown
<ButtonGroup 
    data={categories} 
    name=category_picker 
    value=category
/>

Selected: {inputs.category_picker}
```
</DocTab>

### With a Title

<DocTab>
    <div slot='preview'>
        <ButtonGroup 
            data={categories} 
            name=category_selector 
            value=category
            title="Select a Category"
        />

        Selected: {inputs.category_selector}
    </div>

```markdown
<ButtonGroup 
    data={categories} 
    name=category_selector 
    value=category
    title="Select a Category"
/>

Selected: {inputs.category_selector}
```
</DocTab>

### With a Default Value

<DocTab>
    <div slot='preview'>
        <ButtonGroup
            data={categories}
            name=selected_button1
            value=category
            defaultValue="Cursed Sporting Goods"
        />

        Selected: {inputs.selected_button1}
    </div>

````markdown
<ButtonGroup
    data={categories}
    name=selected_button1
    value=category
    defaultValue="Cursed Sporting Goods"
/>

Selected: {inputs.selected_button1}
````
</DocTab>

### With Hardcoded Options

<DocTab>
    <div slot='preview'>
        <ButtonGroup name=hardcoded_options>
            <ButtonGroupItem valueLabel="Option One" value="1" />
            <ButtonGroupItem valueLabel="Option Two" value="2" />
            <ButtonGroupItem valueLabel="Option Three" value="3" />
        </ButtonGroup>

        Selected: {inputs.hardcoded_options}
    </div>

````markdown
<ButtonGroup name=hardcoded_options>
    <ButtonGroupItem valueLabel="Option One" value="1" />
    <ButtonGroupItem valueLabel="Option Two" value="2" />
    <ButtonGroupItem valueLabel="Option Three" value="3" />
</ButtonGroup>

Selected: {inputs.hardcoded_options}
````
</DocTab>

### With Hardcoded Options and Default Value

<DocTab>
    <div slot='preview'>
        <ButtonGroup name=hardcoded_options_default>
            <ButtonGroupItem valueLabel="Option One" value="1" />
            <ButtonGroupItem valueLabel="Option Two" value="2" default />
            <ButtonGroupItem valueLabel="Option Three" value="3" />
        </ButtonGroup>

        Selected: {inputs.hardcoded_options_default}
    </div>

````markdown
<ButtonGroup name=hardcoded_options_default>
    <ButtonGroupItem valueLabel="Option One" value="1" />
    <ButtonGroupItem valueLabel="Option Two" value="2" default />
    <ButtonGroupItem valueLabel="Option Three" value="3" />
</ButtonGroup>

Selected: {inputs.hardcoded_options_default}
````
</DocTab>

### Alternative Labels

<DocTab>
    <div slot='preview'>
        <ButtonGroup
            data={categories} 
            name=alternative_labels_selector
            value=category
            label=short_category
        />

        Selected: {inputs.alternative_labels_selector}
    </div>

````markdown
<ButtonGroup
    data={categories} 
    name=alternative_labels_selector
    value=category
    label=short_category
/>

Selected: {inputs.alternative_labels_selector}
````
</DocTab>

### Filtering a Query

```sql filtered_query
select 
    category, item, sum(sales) as total_sales
from needful_things.orders
where category like '${inputs.category_button_group}'
group by all
```

<DocTab>
    <div slot='preview'>
        <ButtonGroup
            data={categories} 
            name=category_button_group
            value=category
        />

        <DataTable data={filtered_query} emptySet=pass emptyMessage="No category selected"/>
    </div>

````markdown
<ButtonGroup
    data={categories} 
    name=category_button_group
    value=category
/>

<DataTable data={filtered_query} emptySet=pass emptyMessage="No category selected"/>
````
</DocTab>

### Style Buttons as Tabs

<DocTab>
    <div slot='preview'>
        <ButtonGroup 
            data={categories} 
            name=buttons_as_tabs
            value=category
            display=tabs
        />

        Selected: {inputs.buttons_as_tabs}
    </div>

```markdown
<ButtonGroup 
    data={categories} 
    name=buttons_as_tabs 
    value=category
    display=tabs
/>

Selected: {inputs.buttons_as_tabs}
```
</DocTab>

### Style Buttons as Tabs: With Hardcoded Options

<DocTab>
    <div slot='preview'>
        <ButtonGroup name=button_tabs_hardcoded_options display=tabs>
            <ButtonGroupItem valueLabel="Option One" value="1" />
            <ButtonGroupItem valueLabel="Option Two" value="2" />
            <ButtonGroupItem valueLabel="Option Three" value="3" />
        </ButtonGroup>

        Selected: {inputs.button_tabs_hardcoded_options}
    </div>

````markdown
<ButtonGroup name=button_tabs_hardcoded_options display=tabs>
    <ButtonGroupItem valueLabel="Option One" value="1" />
    <ButtonGroupItem valueLabel="Option Two" value="2" />
    <ButtonGroupItem valueLabel="Option Three" value="3" />
</ButtonGroup>

Selected: {inputs.button_tabs_hardcoded_options}
````
</DocTab>

# ButtonGroup

## Options

<PropListing 
    name="name"
    description="Name of the button group, used to reference the selected value elsewhere as {`{inputs.name}`}"
    required=true
/>
<PropListing 
    name="preset"
    description="Preset values to use"
    options="dates"
/>
<PropListing 
    name="data"
    description="Query name, wrapped in curly braces"
    options="query name"
/>
<PropListing 
    name="value"
    description="Column name from the query containing values to pick from"
    options="column name"
/>
<PropListing 
    name="label"
    description="Column name from the query containing labels to display instead of the values (e.g., you may want to have the drop-down use `customer_id` as the value, but show `customer_name` to your users)"
    options="column name"
    defaultValue="Uses the column in value"
/>
<PropListing 
    name="title"
    description="Title to display above the button group"
    options="string"
/>
<PropListing 
    name="defaultValue"
    description="Sets initial active button and current value"
    options="value from button group, e.g. 'Cursed Sporting Goods'"
/>
<PropListing 
    name="order"
    description="Column to sort options by"
    options="column name"
    defaultValue="Uses the same order as the query in `data`"
/>
<PropListing 
    name="where"
    description="SQL where fragment to filter options by (e.g., where sales > 40000)"
    options="SQL where clause"
/>
<PropListing 
    name="display"
    description="Displays tabs with button functionality"
    options={['tabs', 'buttons']}
    defaultValue="buttons"
/>

# ButtonGroupItem

The ButtonGroupItem component can be used to manually add options to a button group. This is useful if you want to add a default option, or if you want to add options that are not in a query.

## Options

<PropListing 
    name="value"
    description="Value to use when the option is selected"
    required=true
/>
<PropListing 
    name="valueLabel"
    description="Label to display for the option in the dropdown"
    options="string"
    defaultValue="Uses value"
/>
<PropListing 
    name="default"
    description="Sets the option as the default"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing 
    name="hideDuringPrint"
    description="Hide the component when the report is printed"
    options={["true", "false"]}
    defaultValue=true
/>


---
evidence/sites/docs/pages/components/base-map/index.md
---
---
title: Base Map
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
        <BaseMap>
        <Areas data={la_zip_sales} geoId=ZCTA5CE10 areaCol=zip_code value=sales valueFmt=usd/>
        <Points data={la_locations} lat=lat long=long color=#179917/>
        </BaseMap>
    </div>

```html
<BaseMap>
  <Areas data={la_zip_sales} geoId=ZCTA5CE10 areaCol=zip_code value=sales valueFmt=usd/>
  <Points data={la_locations} lat=lat long=long color=#179917/>
</BaseMap>
```
</DocTab>

```sql la_zip_sales
select *, 'https://www.google.com/search?q=' || zip_code as link_col from la_zip_sales
where zip_code <> 90704
```

```sql la_locations
select *, 'https://www.google.com/search?q=' || point_name as link_col from la_locations
```

## Overview
The BaseMap component provides a flexible and extensible way to create maps with multiple layers. This component serves as the foundation for AreaMap, PointMap, and BubbleMap.

Within BaseMap, you can add layers using the following components:
- `<Areas/>`
- `<Points/>`
- `<Bubbles/>`

## Examples

See the pages for [Area Map](/components/area-map), [Point Map](/components/point-map), and [Bubble Map](/components/bubble-map) for examples specific to those layers. The same options can be applied to the layer components within BaseMap.

### Adding Multiple Layers

<DocTab>
    <div slot='preview'>
        <BaseMap>
        <Areas 
            data={la_zip_sales}
            areaCol=zip_code
            geoJsonUrl="/geo-json/ca_california_zip_codes_geo_1.min.json"
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
        />
        <Bubbles 
            data={la_locations}
            lat=lat
            long=long
            size=sales
            sizeFmt=usd
            value=sales
            valueFmt=usd
            pointName=point_name
            opacity=0.5
        />
        </BaseMap>
    </div>

```svelte
<BaseMap>
  <Areas 
    data={la_zip_sales}
    areaCol=zip_code
    geoJsonUrl="path/to/your/geoJSON"
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
  />
  <Bubbles 
    data={la_locations}
    lat=lat
    long=long
    size=sales
    sizeFmt=usd
    value=sales
    valueFmt=usd
    pointName=point_name
    colorPalette={['yellow','orange','red','darkred']}
    opacity=0.5
  />
</BaseMap>
```
</DocTab>



### Custom Basemap
You can add a different basemap by passing in a basemap URL. You can find examples here: https://leaflet-extras.github.io/leaflet-providers/preview/

<DocTab>
    <div slot='preview'>
        <BaseMap basemap={`https://tile.openstreetmap.org/{z}/{x}/{y}.png`} attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'>
            <Points 
                data={la_locations}
                lat=lat
                long=long
                value=sales
                valueFmt=usd
                pointName=point_name
                color=violet
                borderColor=black
                borderWidth=2
            />
        </BaseMap>
    </div>

```svelte
<BaseMap basemap={`https://tile.openstreetmap.org/{z}/{x}/{y}.png`} attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'>
    <Points 
        data={la_locations}
        lat=lat
        long=long
        value=sales
        valueFmt=usd
        pointName=point_name
        color=violet
        borderColor=black
        borderWidth=2
    />
</BaseMap>
```
</DocTab>

### Custom Tooltip

#### `tooltipType=hover`

<DocTab>
    <div slot='preview'>
        <BaseMap>
            <Areas 
                data={la_zip_sales} 
                areaCol=zip_code
                geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
                geoId=ZCTA5CE10
                value=sales
                valueFmt=usd
                height=250
                tooltip={[
                    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
                    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
                    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
                ]}
            />
        </BaseMap>
    </div>

```svelte
<BaseMap>
    <Areas 
        data={la_zip_sales} 
        areaCol=zip_code
        geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
        geoId=ZCTA5CE10
        value=sales
        valueFmt=usd
        height=250
        tooltip={[
            {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
            {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
            {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
        ]}
    />
</BaseMap>
```
</DocTab>


#### With clickable link and `tooltipType=click`

<DocTab>
    <div slot='preview'>
        <BaseMap>
            <Areas 
                data={la_zip_sales} 
                areaCol=zip_code
                geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
                geoId=ZCTA5CE10
                value=sales
                valueFmt=usd
                height=250
                tooltipType=click
                tooltip={[
                    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
                    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
                    {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
                ]}
            />
        </BaseMap>
    </div>

```svelte
<BaseMap>
    <Areas 
        data={la_zip_sales} 
        areaCol=zip_code
        geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
        geoId=ZCTA5CE10
        value=sales
        valueFmt=usd
        height=250
        tooltipType=click
        tooltip={[
            {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
            {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
            {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
        ]}
    />
</BaseMap>
```
</DocTab>

## Map Resources

```sql all_geojson_urls
select * exclude(properties)
from geojson_urls
order by scale, category, file
```

```sql useful_geojson_urls
select * 
from ${all_geojson_urls}
where category in ('political_countries', 'political_states')
or file ilike 'populated_places%'
order by scale desc, category, file
```

Below are a selection of publically available GeoJSON files that may be useful for mapping. These are from the [Natural Earth Data](https://www.naturalearthdata.com/) project, and hosted by [GeoJSON.xyz](https://geojson.xyz/).

### Country, State, and City Locations

<DataTable data={useful_geojson_urls} rows=100>
    <Column id=file/>
    <Column id=category/>
    <Column id=scale/>
    <Column id=summary/>
    <Column id=size fmt='0.0,," MB"'/>
    <Column id=url contentType=link title=URL/>
</DataTable>

<Details title="All GeoJSON Files">

<DataTable data={all_geojson_urls} rows=all compact>
    <Column id=file/>
    <Column id=category/>
    <Column id=scale/>
    <Column id=summary/>
    <Column id=size fmt='0.0,," MB"'/>
    <Column id=url contentType=link title=URL/>
</DataTable>

</Details>


## Base Map Options

<PropListing
name="basemap"
options="URL"
>
URL template for the basemap tiles.
</PropListing>

<PropListing
name="attribution"
options="text"
>
Attribution text to display on the map (e.g., "© OpenStreetMap contributors").
</PropListing>

<PropListing
name="title"
options="text"
>
Optional title displayed above the map.
</PropListing>

<PropListing
name="startingLat"
options="latitude coordinate"
>
Starting latitude for the map center.
</PropListing>

<PropListing
name="startingLong"
options="longitude coordinate"
>
Starting longitude for the map center.
</PropListing>

<PropListing
name="startingZoom"
options="number (1 to 18)"
>
Initial zoom level of the map.
</PropListing>

<PropListing
name="height"
options="pixel value"
defaultValue="300"
>
Height of the map in pixels.
</PropListing>

## Layer Options

### Areas
Use the `<Areas/>` component to add an area layer
<PropListing
name="data"
required
options="query name"
>
Query result, referenced using curly braces.
</PropListing>

<PropListing
name="geoJsonUrl"
required
options="URL"
>

Path to source geoJSON data from - can be a URL (see [Map Resources](#map-resources)) or a file in your project.

If the file is in your `static` directory in the root of your project, reference it as `geoJsonUrl="/your_file.geojson"`

</PropListing>

<PropListing
name="areaCol"
required
options="column name"
>
Column in the data that specifies the area each row belongs to.
</PropListing>

<PropListing
name="geoId"
required
options="geoJSON property name"
>
Property in the GeoJSON that uniquely identifies each feature.
</PropListing>

<PropListing
name="value"
options="column name"
>
Column that determines the value displayed for each area (used for color scale).
</PropListing>

<PropListing
name="valueFmt"
options="format string"
>
Format string for displaying the value.
</PropListing>

### Points
Use the `<Points/>` component to add an area layer

<PropListing
name="data"
required
options="query name"
>
Query result, referenced using curly braces.
</PropListing>

<PropListing
name="lat"
required
options="column name"
>
Column containing latitude values.
</PropListing>

<PropListing
name="long"
required
options="column name"
>
Column containing longitude values.
</PropListing>

<PropListing
name="value"
options="column name"
>
Column that determines the value displayed at each point.
</PropListing>

<PropListing
name="valueFmt"
options="format string"
>
Format string for displaying the value.
</PropListing>

<PropListing
name="pointName"
options="column name"
>
Column containing the names/labels of the points - by default, this is shown as the title of the tooltip.
</PropListing>


### Bubbles
Use the `<Bubbles/>` component to add an area layer

<PropListing
name="data"
required
options="query name"
>
Query result, referenced using curly braces.
</PropListing>

<PropListing
name="lat"
required
options="column name"
>
Column containing latitude values.
</PropListing>

<PropListing
name="long"
required
options="column name"
>
Column containing longitude values.
</PropListing>

<PropListing
name="size"
required
options="column name"
>
Column that determines the size displayed for each point.
</PropListing>

<PropListing
name="sizeFmt"
options="format string"
>
Format string for displaying the size value in tooltips.
</PropListing>

<PropListing
name="maxSize"
options="number"
defaultValue=20
>
Maximum size of the bubbles.
</PropListing>

<PropListing
name="value"
options="column name"
>
Column that determines the value displayed at each point (used for color scale).
</PropListing>

<PropListing
name="valueFmt"
options="format string"
>
Format string for displaying the value.
</PropListing>

<PropListing
name="pointName"
options="column name"
>
Column containing the names/labels of the points - by default, this is shown as the title of the tooltip.
</PropListing>

<PropListing
    name="paneType"
    options="text"
>
    Specifies the type of pane where the bubbles will be rendered.
</PropListing>

<PropListing
    name="z"
    options="number"
>
    Represents the z-index value for the pane, controlling its stacking order relative to other panes (higher values are on top, e.g., z=2 is above z=1).
</PropListing>

### Common Layer Options

#### Color Scale

<PropListing
name="colorPalette"
options="array of colors"
>
Array of colors used for theming the points or areas based on data.
</PropListing>

<PropListing
name="min"
options="number"
defaultValue="min of value column"
>
Minimum value to use for the color scale.
</PropListing>

<PropListing
name="max"
options="number"
defaultValue="max of value column"
>
Maximum value to use for the color scale.
</PropListing>

#### Interactivity

<PropListing
name="link"
options="URL"
>
URL to navigate to when a point or area is clicked.
</PropListing>

<PropListing
name="name"
options="string"
>
Input name. Can be referenced on your page with {inputs.my_input_name}.
</PropListing>

#### Styling
<PropListing
name="color"
options="CSS color value"
>
Color for the points or areas. Use when you want all points or areas to be the same color.
</PropListing>

<PropListing
name="borderWidth"
options="pixel value"
>
Width of the border around each point or area.
</PropListing>

<PropListing
name="borderColor"
options="CSS color value"
>
Color of the border around each point or area.
</PropListing>

<PropListing
name="opacity"
options="number between 0 and 1"
>
Opacity of the points or areas.
</PropListing>

#### Selected State
<PropListing
name="selectedColor"
options="CSS color value"
>
When point or area is selected: Color for the points or areas.
</PropListing>

<PropListing
name="selectedBorderWidth"
options="pixel value"
>
When point or area is selected: Width of the border around each point or area.
</PropListing>

<PropListing
name="selectedBorderColor"
options="CSS color value"
>
When point or area is selected: Color of the border around each point or area.
</PropListing>

<PropListing
name="selectedOpacity"
options="number between 0 and 1"
>
When point or area is selected: Opacity of the points or areas.
</PropListing>

#### Tooltips
<PropListing
name="showTooltip"
options="{['true','false']}"
defaultValue=true
>
Whether to show tooltips.
</PropListing>

<PropListing
name="tooltipType"
options={['hover', 'click']}
defaultValue='hover'
>
Determines whether tooltips are activated by hover or click.
</PropListing>

<PropListing
name="tooltipClass"
options="CSS class"
>
CSS class applied to the tooltip content. You can pass Tailwind classes into this prop to custom-style the tooltip.
</PropListing>


<PropListing
name="tooltip"
options="array of objects"
>
Configuration for tooltips associated with each area. See below example for format
</PropListing>

<LineBreak/>

#### `tooltip` example:

```javascript
tooltip={[
    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
]}
```

#### All options available in `tooltip`:
- `id`: column ID
- `title`: custom string to use as title of field
- `fmt`: format to use for value
- `showColumnName`: whether to show the column name. If `false`, only the value will be shown
- `contentType`: currently can only be "link"
- `linkLabel`: text to show for a link when contentType="link"
- `formatColumnTitle`: whether to automatically uppercase the first letter of the title. Only applies when `title` not passed explicitly
- `valueClass`: custom Tailwind classes to style the values
- `fieldClass`: custom Tailwind classes to style the column names



---
evidence/sites/docs/pages/components/calendar-heatmap/index.md
---
---
title: Calendar Heatmap
sidebar_position: 1
queries:
- orders_by_day.sql
- orders_by_day_2021.sql
---

<DocTab>
    <div slot='preview'>
        <CalendarHeatmap 
            data={orders_by_day_2021}    
            date=day
            value=sales
            title="Calendar Heatmap"
            subtitle="Daily Sales"
        />
    </div>

```markdown
<CalendarHeatmap 
    data={orders_by_day_2021}
    date=day
    value=sales
    title="Calendar Heatmap"
    subtitle="Daily Sales"
/>
```
</DocTab>



## Examples

### Multi-Year

<DocTab>
    <div slot='preview'>
        <CalendarHeatmap 
            data={orders_by_day}    
            date=day
            value=sales
        />
    </div>

```markdown
<CalendarHeatmap 
    data={orders_by_day}
    date=day
    value=sales
/>
```
</DocTab>


### Custom Color Palette

<DocTab>
    <div slot='preview'>
        <CalendarHeatmap
            data={orders_by_day_2021}
            date=day
            value=sales
            colorPalette={['navy', 'lightyellow', 'purple']}
        />
    </div>

```markdown
<CalendarHeatmap
    data={orders_by_day_2021}
    date=day
    value=sales
    colorPalette={['navy', 'lightyellow', 'purple']}
/>
```
</DocTab>


### Without Year Label

<DocTab>
    <div slot='preview'>
        <CalendarHeatmap 
            data={orders_by_day_2021}    
            date=day
            value=sales
            yearLabel=false
        />
    </div>

```markdown
<CalendarHeatmap 
    data={orders_by_day_2021}
    date=day
    value=sales
    yearLabel=false
/> 
```
</DocTab>

## Options

### Data

<PropListing 
    name="data"
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing 
    name="date"
    description="Date column to use for the calendar"
    required=true
    options="column name"
/>
<PropListing 
    name="value"
    description="Numeric column to use for the y-axis"
    required=true
    options="column name"
/>
<PropListing 
    name="min"
    description="Minimum number for the calendar heatmap's color scale"
    options="number"
    defaultValue="min of value column"
/>
<PropListing 
    name="max"
    description="Maximum number for the calendar heatmap's color scale"
    options="number"
    defaultValue="max of value column"
/>
<PropListing 
    name="emptySet"
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    options={['error', 'warn', 'pass']}
    defaultValue="error"
/>
<PropListing 
    name="emptyMessage"
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    options="string"
    defaultValue="No records"
/>

### Formatting & Styling

<PropListing 
    name="colorPalette"
    description="Array of colors to form the gradient for the heatmap. Remember to wrap your array in curly braces."
    options="array of color codes - e.g., {`colorPalette={['navy', 'white', '#c9c9c9']}`}"
/>
<PropListing 
    name="valueFmt"
    description="Format to use for value column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing 
    name="yearLabel"
    description="Turn on or off year label on left of chart"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing 
    name="monthLabel"
    description="Turn on or off month label on top of chart"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing 
    name="dayLabel"
    description="Turn on or off day label on left of chart"
    options={['true', 'false']}
    defaultValue="true"
/>

### Chart

<PropListing 
    name="title"
    description="Chart title. Appears at top left of chart."
    options="string"
/>
<PropListing 
    name="subtitle"
    description="Chart subtitle. Appears just under title."
    options="string"
/>
<PropListing 
    name="chartAreaHeight"
    description="Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX."
    options="number"
    defaultValue="auto set based on y-axis values"
/>
<PropListing 
    name="legend"
    description="Turn on or off the legend"
    options={['true', 'false']}
    defaultValue="true"
/>
<PropListing 
    name="filter"
    description="Allow draggable filtering on the legend. Must be used with `legend=true`"
    options={['true', 'false']}
    defaultValue="false"
/>
<PropListing 
    name="renderer"
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    options={['canvas', 'svg']}
    defaultValue="canvas"
/>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

### Custom Echarts Options

<PropListing 
    name="echartsOptions"
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleOption:'exampleValue'}}`}"
/>
<PropListing 
    name="seriesOptions"
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
/>
<PropListing 
    name="printEchartsConfig"
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    options={['true', 'false']}
    defaultValue="false"
/>

### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>


---
evidence/sites/docs/pages/components/custom-components/index.md
---
---
sidebar_position: 99
title: Custom Components
---

Custom components allow you to extend the functionality of Evidence, as well as to make your code more reusable.

In Evidence, you can build your own components and use them anywhere in your app. This is made possible through Svelte, the JavaScript framework Evidence is built on. These components can include the charts used for visualization, custom components created completely from scratch, or adaptations of existing UI components such as the header, sidebar, menu, etc.

[Evidence Labs](https://labs.evidence.dev) contains several good examples of custom components.

Below is a **short guide** on building a simple component in Evidence.

For a fuller guide, Svelte offers a really great interactive tutorial that you can complete in your browser in about an hour: [Svelte Tutorial](https://svelte.dev/tutorial/basics)

<Alert status=info>

**Built a great component?**

Let us know in our [Slack community](https://slack.evidence.dev)!

We'd love to see what you've built, and may add generally applicable components to Evidence Labs, or the Evidence component library!

</Alert>

## Example custom component

If you were creating a component called `<Hello />`, which included some text and a BarChart, to use in `index.md`, you could do so like this:

Add a folder called `components/` in the root of your project. This is where Evidence looks for your Svelte components:

### Folder structure

```bash
.
|-- pages/
|   `-- index.md
`-- components/
    `-- Hello.svelte
```

`Hello.svelte` is your component. Add the following code to these two files:

### File contents

````html title="index.md"

```sql sales_by_country 
select 'Canada' as country, 100 as sales_usd 
union all 
select 'USA' as country, 200 as sales_usd 
union all 
select 'UK' as country, 300 as sales_usd 
```

<!-- To use data in the component, pass it to the component as a prop
     You can use multiple queries, and name the props anything you like -->
<Hello myData={sales_by_country} />
````

```html title="Hello.svelte"
<!-- To allow the component to accept data, you need to use the 'export let' syntax
     If you need any Evidence components inside your custom component, you must import them explicitly -->
&lt;script&gt;
	export let myData;
	import { BarChart } from '@evidence-dev/core-components';
&lt;/script&gt;

<p>
	Here is a BarChart in a Component, with some accompanying text. Components stored in the
	/components/ folder will be included in your app.
</p>

<BarChart data={myData} />
```


## Building your own component: Checklist

If you're building a component, here are some things to keep in mind.

In your markdown file:

1. **Pass any data as props** if you need to access query results in the component

In the custom component:

1. **Use Svelte (HTML + extra features) syntax** in this component - it will not support Markdown
1. **Use the `/components/` folder** for your .svelte files
1. **`export` any props you want to use** in the component
1. **Import any [Evidence components](https://github.com/evidence-dev/evidence/tree/main/sites/example-project/src/components)** you want to use in the custom component

## Optional: Publishing Your Components as a Plugin
If you have built custom components that you would like other Evidence users to be able to use in their apps, you can publish them as an Evidence plugin. See the [Plugin section](/plugins/create-component-plugin/) for more details.

## Utility Functions
Evidence provides a collection of helpful utility functions to use within custom components, for things like error handling, data manipulation, and value formatting.

To use these utilities, you must import them explicitly in the script tag portion of your component. The import line for each utlity function is included for reference below:

### Error Handling

#### checkInputs `checkInputs(data, reqCols, optCols)`
Accepts a dataset and list of columns, and returns an error if the dataset is empty, required columns are missing, or referenced columns do not exist in the data
```javascript
import checkInputs from '@evidence-dev/component-utilities/checkInputs';
```
- `data`: the query result you need to check
- `reqCols`: a list of columns that are required for your component (e.g., x or y for a chart)
- `optCols`: a list of optional columns

<br/>

#### ErrorChart `<ErrorChart error={error} chartType="My Chart"/>`
A component used to display an error state on the page
```javascript
import { ErrorChart } from '@evidence-dev/core-components';
```
- `error`: the error message to display
- `chartType`: the title that appears at the top of the error component

<br/>


### Data Manipulation

#### getDistinctValues `getDistinctValues(data, column)`
Returns an array of distinct values from a specified column in a dataset
```javascript
import getDistinctValues from '@evidence-dev/component-utilities/getDistinctValues';
```
- `data`: query result to pull the values from
- `column`: name of column to use

<br/>


#### getDistinctCount `getDistinctCount(data, column)`
Returns the count of distinct values in a column
```javascript
import getDistinctCount from '@evidence-dev/component-utilities/getDistinctCount';
```
- `data`: query result to pull the values from
- `column`: name of column to use

<br/>


#### getSortedData `getSortedData(data, col, isAsc)`
Returns the original dataset, sorted by the specific column and direction
```javascript
import getSortedData from '@evidence-dev/component-utilities/getSortedData';
```
- `data`: query result to pull the values from
- `col`: name of column to sort
- `isAsc`: if true, will sort ascending; otherwise, descending

<br/>


#### getColumnSummary `getColumnSummary(data, returnType = "object")`
Returns an object with information about each column (title, min, max, format, etc.)
```javascript
import getColumnSummary from '@evidence-dev/component-utilities/getColumnSummary';
```
- `data`: query result to summarize
- `returnType`: "object" or "array"

<br/>


#### getCompletedData `getCompletedData(data, x, y, series, nullsZero = false, fillX = false)`
Returns the original dataset with rows filled in as needed to complete a continuous number series
```javascript
import getCompletedData from '@evidence-dev/component-utilities/getCompletedData';
```
- `data`: query result which requires completed data
- `x`: name of column for x-axis
- `y`: name of column for y-axis
- `series`: name of column for series
- `nullsZero`: if true, will treat nulls as zeroes; otherwise, will leave as nulls
- `fillX`: if true, will find the smallest increment in the x-axis values and create rows as needed to create a continous series

<br/>


### Value & Label Formatting

#### formatValue `formatValue(value, columnFormat = undefined, columnUnitSummary = undefined)`
Returns a formatted value
```javascript
import { formatValue } from '@evidence-dev/component-utilities/formatting';
```
- `value`: value to format
- `columnFormat`: a format object for column being formatted (can be obtained from the `getColumnSummary` function)
- `columnUnitSummary`: an object containing the extents of the column, used for unit summary formatting like "M" or "B" (can be obtained from the `getColumnSummary` function)

<br/>


#### fmt `fmt(value, format)`
Simpler version of the `formatValue` function which does not require a format object
```javascript
import { fmt } from '@evidence-dev/component-utilities/formatting';
```
- `value`: value to be formatted
- `format`: a string representing a format tag name or an Excel-style format code

<br/>


#### formatTitle `formatTitle(column, columnFormat)`
Returns a formatted column title (with proper letter casing)
```javascript
import formatTitle from '@evidence-dev/component-utilities/formatTitle';
```
- `column`: name of column to be formatted
- `columnFormat`: a format object for column being formatted (can be obtained from the `getColumnSummary` function)


---
evidence/sites/docs/pages/components/us-map/index.md
---
---
title: US Map
sidebar_position: 1
queries:
- state_population.sql
---

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
        />
    </div>

```html
<USMap
    data={state_population}
    state=state_name
    value=population
/>
```
</DocTab>


## Examples

### Color Scales

`colorScale=blue`

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
            colorScale=blue
        />
    </div>

````html
<USMap
    data={state_population}
    state=state_name
    value=population
    colorScale=blue
/>
````
</DocTab>

`colorScale=green`

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
            colorScale=green
        />
    </div>

````html
<USMap
    data={state_population}
    state=state_name
    value=population
    colorScale=green
/>
````
</DocTab>

`colorScale=red`

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
            colorScale=red
        />
    </div>

````html
<USMap
    data={state_population}
    state=state_name
    value=population
    colorScale=red
/>
````
</DocTab>

`colorScale=bluegreen`

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
            colorScale=bluegreen
        />
    </div>

````html
<USMap
    data={state_population}
    state=state_name
    value=population
    colorScale=bluegreen
/>
````
</DocTab>

### Custom Color Scale

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
            colorPalette={['maroon','white','#1c0d80']}
            legend=true
        />
    </div>

```svelte
<USMap
    data={state_population}
    state=state_name
    value=population
    colorPalette={['maroon','white','#1c0d80']}
    legend=true
/>
```
</DocTab>



### Legend

#### Default

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
            legend=true
        />
    </div>

```html
<USMap
    data={state_population}
    state=state_name
    value=population
    legend=true
/>
```
</DocTab>



#### With Filter

<DocTab>
    <div slot='preview'>
        <USMap
            data={state_population}
            state=state_name
            value=population
            colorPalette={['maroon','white','#1c0d80']}
            legend=true
            filter=true
        />
    </div>

````svelte
<USMap
    data={state_population}
    state=state_name
    value=population
    colorPalette={['maroon','white','#1c0d80']}
    legend=true
    filter=true
/>
````
</DocTab>

### Links

<DocTab>
    <div slot='preview'>
        <img src='/img/map-links.gif' style="width: 100%; height:500px"/>
    </div>

```html
<USMap
	data={state_current}
	state=state
	value=value
	abbreviations=true
	link=state_link
	title="Sales by State"
	subtitle="{most_recent_month[0].month}"
/>
```
</DocTab>

### State Abbreviations

<DocTab>
    <div slot='preview'>
        <USMap data={state_population} state=state_abbrev value=population abbreviations=true />
    </div>

```html
<USMap data={map_data} state=state_abbrev value=sales_usd abbreviations=true />
```
</DocTab>



## Options

### Data

<PropListing
    name="data"
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name="state"
    required
    options="column name"
>

Column to be used as the name for each state

</PropListing>
<PropListing
    name="abbreviations"
    options={['false','true']}
    defaultValue='false'
>

If true, map will look for two letter abbreviations rather than full names

</PropListing>
<PropListing
    name="value"
    required
    options="column name"
>

Column to be used as the value determining the colour of each state

</PropListing>
<PropListing
    name="colorScale"
    options={['blue','green','red','bluegreen']}
    defaultValue='blue'
>

Colour scale to be used. To use a custom color palette, see the `colorPalette` prop

</PropListing>
<PropListing
    name="colorPalette"
    options="array of color codes (can be CSS, hex, RGB, HSL)"
>

Custom color palette to use for setting state colors. Overrides `colorScale`. E.g., `{['#cf0d06','#eb5752','#e88a87']}`

</PropListing>
<PropListing
    name="min"
    options="number"
>

Minimum value for the colour scale. Anything below the minimum will be shown in the same colour as the min value

</PropListing>
<PropListing
    name="max"
    options="number"
>

Maximum value for the colour scale. Anything above the maximum will be shown in the same colour as the max value

</PropListing>
<PropListing
    name="title"
    options="string"
>

Title appearing above the map. Is included when you click to save the map image

</PropListing>
<PropListing
    name="subtitle"
    options="string"
>

Subtitle appearing just above the map. Is included when you click to save the map image

</PropListing>
<PropListing
    name="link"
    options="column name"
>

Column containing links. When supplied, allows you to click each state on the map and navigate to the link

</PropListing>
<PropListing
    name="fmt"
    options="Excel-style format | built-in format | custom format"
>

Format to use for values ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="legend"
    options={['true','false']}
    defaultValue='false'
>

Whether to show a legend at the top of the map

</PropListing>
<PropListing
    name="filter"
    options={['true','false']}
    defaultValue='false'
>

Whether to include filter controls on the legend. Can only be used when legend = true

</PropListing>
<PropListing
    name="emptySet"
    options={['error','warn','pass']}
    defaultValue='error'
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to `error`, empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name="emptyMessage"
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when `emptySet` is `warn` or `pass`, or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>
<PropListing
    name="renderer"
    options={['canvas','svg']}
    defaultValue='canvas'
>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

Which chart renderer type (canvas or SVG) to use. See ECharts' [documentation on renderers](https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/).

</PropListing>

### Custom Echarts Options

<PropListing
    name="echartsOptions"
    options="{`{{exampleOption:'exampleValue'}}`}"
>

Custom Echarts options to override the default options. See [reference page](/components/echarts-options/) for available options.

</PropListing>
<PropListing
    name="seriesOptions"
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
>

Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See [reference page](/components/echarts-options/) for available options.

</PropListing>
<PropListing
    name="printEchartsConfig"
    options={['true', 'false']}
    defaultValue="false"
>

Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options

</PropListing>

### Interactivity

<PropListing
    name="connectGroup"
>

Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected

</PropListing>

---
evidence/sites/docs/pages/components/bubble-map/index.md
---
---
title: Bubble Map
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            size=sales 
            sizeFmt=eur
            value=sales 
            valueFmt=eur
            pointName=point_name 
        />
    </div>

```html
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    size=sales 
    sizeFmt=eur
    value=sales 
    valueFmt=eur
    pointName=point_name 
/>
```
</DocTab>

```sql la_locations
select *, 'https://www.google.com/search?q=' || point_name as link_col from la_locations
```


## Examples

### Custom Basemap
You can add a different basemap by passing in a basemap URL. You can find examples here: https://leaflet-extras.github.io/leaflet-providers/preview/

<DocTab>
    <div slot='preview'>
        <BubbleMap data={la_locations} lat=lat long=long size=sales sizeFmt=eur pointName=point_name value=sales basemap={`https://tile.openstreetmap.org/{z}/{x}/{y}.png`} attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'/>
    </div>

**Note:** you need to wrap the url in curly braces and backticks to avoid the curly braces in the URL being read as variables on your page

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    pointName=point_name 
    height=200 
    basemap={`https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.{ext}`}
    attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
```
</DocTab>


### Custom Tooltip

#### `tooltipType=hover`

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            size=sales 
            sizeFmt=usd 
            value=sales 
            valueFmt=usd
            pointName=point_name 
            tooltipType=hover
            tooltip={[
                {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
                {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'}
            ]}
        />
    </div>

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    size=sales 
    sizeFmt=usd 
    pointName=point_name 
    tooltipType=hover
    tooltip={[
        {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'}
    ]}
/>
```
</DocTab>


#### With clickable link and `tooltipType=click`

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            value=sales 
            valueFmt=usd 
            size=sales 
            sizeFmt=usd 
            pointName=point_name 
            tooltipType=click
            tooltip={[
                {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
                {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
                {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
            ]}
        />
    </div>

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    size=sales 
    sizeFmt=usd 
    pointName=point_name 
    tooltipType=click
    tooltip={[
        {id: 'point_name', showColumnName: false, valueClass: 'text-xl font-semibold'},
        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
        {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
    ]}
/>
```
</DocTab>


### Custom Color Palette

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            value=sales 
            valueFmt=usd 
            size=sales 
            sizeFmt=usd 
            pointName=point_name 
            colorPalette={['yellow','orange','red','darkred']}
        />
    </div>

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    value=sales 
    valueFmt=usd 
    pointName=point_name 
    colorPalette={['yellow','orange','red','darkred']}
/>
```
</DocTab>


### Custom Styling

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            size=sales 
            sizeFmt=usd
            pointName=point_name 
            color=#128c2b
            opacity=1
            borderWidth=1
            borderColor=black
        />
    </div>

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    size=sales 
    sizeFmt=usd
    pointName=point_name 
    color=#128c2b
    opacity=1
    borderWidth=1
    borderColor=black
/>
```
</DocTab>

### Max Bubble Size

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            size=sales 
            sizeFmt=usd
            pointName=point_name 
            maxSize=10
        />
    </div>

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    size=sales 
    sizeFmt=usd
    pointName=point_name 
    maxSize=10
/>
```
</DocTab>


### Link Drilldown
Pass in a `link` column to enable navigation on click of the point. These can be absolute or relative URLs

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            size=sales 
            sizeFmt=usd
            link=link_col 
        />
    </div>

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    size=sales 
    sizeFmt=usd
    link=link_col 
/>
```
</DocTab>


### Use Map as Input
Use the `name` prop to set an input name for the map - when a point is clicked, it will set the input value to that row of data

<DocTab>
    <div slot='preview'>
        <BubbleMap 
            data={la_locations} 
            lat=lat 
            long=long 
            size=sales 
            sizeFmt=usd
            name=my_point_map 
        />
    </div>

```svelte
<BubbleMap 
    data={la_locations} 
    lat=lat 
    long=long 
    size=sales 
    sizeFmt=usd
    name=my_point_map 
/>
```
</DocTab>

*Click a point on the map to see the input value get updated:*

#### Selected value for `{inputs.my_point_map}`: 
  
<pre class="text-sm">{JSON.stringify(inputs.my_point_map, null, 2)}</pre>

#### Selected value for `{inputs.my_point_map.point_name}`: 
  
{inputs.my_point_map.point_name}


```filtered_locations
select * from ${la_locations}
where point_name = '${inputs.my_point_map.point_name}' OR '${inputs.my_point_map.point_name}' = 'true'
```

#### Filtered Data
<DataTable data={filtered_locations}>  	
    <Column id=id/> 	
    <Column id=point_name/> 	
    <Column id=lat/> 	
    <Column id=long/> 	
    <Column id=sales fmt=usd/> 	
</DataTable>

### Legends

```grouped_locations
SELECT 
  *, 
  CASE 
    WHEN id BETWEEN 0 AND 4 THEN 'Hotels'
    WHEN id BETWEEN 5 AND 9 THEN 'Restaurants'
    WHEN id BETWEEN 10 AND 14 THEN 'Golf Courses'
    WHEN id BETWEEN 15 AND 19 THEN 'Shops'
    WHEN id BETWEEN 20 AND 24 THEN 'Bars'
    WHEN id BETWEEN 25 AND 29 THEN 'Entertainment'
    WHEN id BETWEEN 30 AND 34 THEN 'Banks'
  END AS Category
FROM la_locations
```	
#### Categorical Legend

<DocTab>
    <div slot='preview'>
        <BubbleMap
            data={grouped_locations}
            lat=lat
            long=long
            value=Category
            size=sales
        />
    </div>

```svelte
<BubbleMap
    data={grouped_locations}
    lat=lat
    long=long
    value=Category
    size=sales
/>
```
</DocTab>

#### Custom Colors
Set custom legend colors using the `colorPalette` prop to match the number of categories; excess categorical options will default to standard colors.

<DocTab>
    <div slot='preview'>
        <BubbleMap
            data={grouped_locations}
            lat=lat
            long=long
            value=Category
            size=sales
            colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}
        />
    </div>

```svelte
<BubbleMap
    data={grouped_locations}
    lat=lat
    long=long
    value=Category
    size=sales
    colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}
/>
```
</DocTab>

#### Scalar Legend

<DocTab>
    <div slot='preview'>
        <BubbleMap
            data={grouped_locations}
            lat=lat
            long=long
            value=sales
            size=sales
            valueFmt=usd
        />
    </div>

```svelte
<BubbleMap
    data={grouped_locations}
    lat=lat
    long=long
    value=sales
    size=sales
    valueFmt=usd
/>
```
</DocTab>

#### Custom Colors
Define scalar legend colors using the `colorPalette` prop, allowing specified colors to create a gradient based on the range of values.

<DocTab>
    <div slot='preview'>
        <BubbleMap
            data={grouped_locations}
            lat=lat
            long=long
            value=sales
            size=sales
            colorPalette={['#C65D47', '#4A8EBA']}
            valueFmt=usd
        />
    </div>

```svelte
<BubbleMap
    data={grouped_locations}
    lat=lat
    long=long
    value=sales
    size=sales
    colorPalette={['#C65D47', '#4A8EBA']}
    valueFmt=usd
/>
```
</DocTab>

## Options

### Bubbles
<PropListing
name="data"
required
options="query name"
>
Query result, referenced using curly braces
</PropListing>

<PropListing
name="lat"
required
options="column name"
>
Column containing latitude values
</PropListing>

<PropListing
name="long"
required
options="column name"
>
Column containing longitude values
</PropListing>

<PropListing
name="size"
required
options="column name"
>
Column that determines the size displayed for each point.
</PropListing>

<PropListing
name="sizeFmt"
options="format string"
>
Format string for displaying the size value in tooltips.
</PropListing>

<PropListing
name="maxSize"
options="number"
defaultValue=20
>
Maximum size of the bubbles
</PropListing>

<PropListing
name="value"
options="column name"
>
Column that determines the value displayed at each point (used for color scale)
</PropListing>

<PropListing
name="valueFmt"
options="format string"
>
Format string for displaying the value.
</PropListing>

<PropListing
name="pointName"
options="column name"
>
Column containing the names/labels of the points - by default, this is shown as the title of the tooltip.
</PropListing>

### Color Scale

<PropListing
name="colorPalette"
options="array of colors"
>
Array of colors used for theming the points based on data <code></code>
</PropListing>

<PropListing
name="min"
options="number"
defaultValue="min of value column"
>
Minimum value to use for the color scale.
</PropListing>

<PropListing
name="max"
options="number"
defaultValue="max of value column"
>
Maximum value to use for the color scale.
</PropListing>

### Legend

<PropListing
    name="legend"
    description="Turns legend on or off"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
name="legendType"
options={['categorical', 'scalar']}
>
Appends a categorical or scalar legend to the map
</PropListing>

<PropListing
name="legendPosition"
options={['bottomLeft', 'topLeft','bottomRight', 'topRight']}
defaultValue='bottomLeft'
>
Determines the legend's position on the map, with options provided
</PropListing>

### Interactivity

<PropListing
name="link"
options="URL"
>
URL to navigate to when a point is clicked.
</PropListing>

<PropListing
name="name"
options="string"
>
Input name. Can be referenced on your page with `{inputs.my_input_name}`
</PropListing>

### Styling
<PropListing
name="color"
options="CSS color value"
>
Color for the points. Use when you want all points to be the same color.
</PropListing>

<PropListing
name="borderWidth"
options="pixel value"
defaultValue=0.75
>
Width of the border around each point.
</PropListing>

<PropListing
name="borderColor"
options="CSS color value"
defaultVallue="white"
>
Color of the border around each point.
</PropListing>

<PropListing
name="opacity"
options="number between 0 and 1"
defaultValue=0.8
>
Opacity of the points.
</PropListing>


### Selected State

<PropListing
name="selectedColor"
options="CSS color value"
>
When point is selected: Color for the points. Use when you want all points to be the same color.
</PropListing>

<PropListing
name="selectedBorderWidth"
options="pixel value"
defaultValue=0.75
>
When point is selected: Width of the border around each point.
</PropListing>

<PropListing
name="selectedBorderColor"
options="CSS color value"
defaultVallue="white"
>
When point is selected: Color of the border around each point.
</PropListing>

<PropListing
name="selectedOpacity"
options="number between 0 and 1"
defaultValue=0.8
>
When point is selected: Opacity of the points.
</PropListing>



### Tooltips
<PropListing
name="showTooltip"
options={['true', 'false']}
defaultValue=true
>
Whether to show tooltips
</PropListing>

<PropListing
name="tooltipType"
options={['hover', 'click']}
defaultValue='hover'
>
Determines whether tooltips are activated by hover or click.
</PropListing>

<PropListing
name="tooltipClass"
options="CSS class"
>
CSS class applied to the tooltip content. You can pass Tailwind classes into this prop to custom-style the tooltip
</PropListing>


<PropListing
name="tooltip"
options="array of objects"
>
Configuration for tooltips associated with each area. See below example for format
</PropListing>

<LineBreak/>

#### `tooltip` example:

```javascript
tooltip={[
    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
]}
```

#### All options available in `tooltip`:
- `id`: column ID
- `title`: custom string to use as title of field
- `fmt`: format to use for value
- `showColumnName`: whether to show the column name. If `false`, only the value will be shown
- `contentType`: currently can only be "link"
- `linkLabel`: text to show for a link when contentType="link"
- `formatColumnTitle`: whether to automatically uppercase the first letter of the title. Only applies when `title` not passed explicitly
- `valueClass`: custom Tailwind classes to style the values
- `fieldClass`: custom Tailwind classes to style the column names


### Base Map

<PropListing
name="basemap"
options="URL"
>
URL template for the basemap tiles.
</PropListing>

<PropListing
name="attribution"
options="text"
>
Attribution text to display on the map (e.g., "© OpenStreetMap contributors").
</PropListing>

<PropListing
name="title"
options="text"
>
Optional title displayed above the map.
</PropListing>

<PropListing
name="startingLat"
options="latitude coordinate"
>
Starting latitude for the map center.
</PropListing>

<PropListing
name="startingLong"
options="longitude coordinate"
>
Starting longitude for the map center.
</PropListing>

<PropListing
name="startingZoom"
options="number (1 to 18)"
>
Initial zoom level of the map.
</PropListing>

<PropListing
name="height"
options="pixel value"
defaultValue="300"
>
Height of the map in pixels.
</PropListing>

---
evidence/sites/docs/pages/components/print-format-components/index.md
---
---
title: Print Format Components
sidebar_position: 1
---

These components can be used to format your report content for PDF export or printing.

## LineBreak
Inserts a line break on the page (in the UI as well as on print).

This can be helpful when working with many input components (filters, dropdowns, etc.)

```html
Text on original line <LineBreak/> Text on new line
```

### Options

<PropListing
    name="lines"
    options="number"
    defaultValue="1"
>

Number of line breaks to insert

</PropListing>

## PageBreak
On print, inserts a page break - pushing the next content onto the start of a new page.

```html
The purple line chart in this section will print on a new page.

<LineChart 
    data={orders_by_month} 
    x=month
    y=sales_usd0k 
/>

<PageBreak/>

<LineChart 
    data={orders_by_month} 
    x=month
    y=sales_usd0k 
    lineColor=purple
/>

```

## PrintGroup
- Combines content to be printed on the same page if possible
- Offers a `hidden` prop. If `true`, the content within the PrintGroup will not be printed

```html
    <PrintGroup>

        The 2 heatmaps below will be printed on the same page if possible

        <Heatmap data={item_channel} x=channel y=item value=orders/>
        <Heatmap data={item_channel} x=channel y=item value=orders/>
    </PrintGroup>
```

### `hidden=true`

```html
The purple line chart will be hidden on print

<LineChart 
    data={orders_by_month} 
    x=month
    y=sales_usd0k 
/>

<PrintGroup hidden=true>
    <LineChart 
        data={orders_by_month} 
        x=month
        y=sales_usd0k 
        lineColor=purple
    />
</PrintGroup>
```

### Options

<PropListing
    name="hidden"
    options={['true', 'false']}
    defaultValue='false'
>

If true, the content within the PrintGroup will not be printed

</PropListing>

---
evidence/sites/docs/pages/components/alert/index.md
---
---
title: Alert
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
<Alert>
This is a default alert
</Alert>

<Alert status="info">
This is a informational alert
</Alert>

<Alert status="success">
This is a successful alert
</Alert>

<Alert status="warning">
This is a warning alert
</Alert>

<Alert status="danger">
This is a dangerous alert
</Alert>
    </div>

```markdown
<Alert>
This is a default alert
</Alert>

<Alert status="info">
This is a informational alert
</Alert>

<Alert status="success">
This is a successful alert
</Alert>

<Alert status="warning">
This is a warning alert
</Alert>

<Alert status="danger">
This is a dangerous alert
</Alert>
```
</DocTab>

## Options

<PropListing
    name="status"  
    options={['info', 'success', 'warning', 'danger']}
>

Changes the color of the alert

</PropListing>

---
evidence/sites/docs/pages/components/mixed-type-charts/index.md
---
---
title: Mixed-Type Charts
sidebar_position: 1
---

<Alert status=info>

The easiest way to create mixed-type charts is setting up [a secondary y-axis in `LineChart`](/components/line-chart#secondary-axis-with-bar) or a [secondary axis in `BarChart`](/components/bar-chart#secondary-axis-with-line)

</Alert>


You can combine multiple chart types inside a single `<Chart>` tag to create mixed-type charts.

## Examples

### Mixed-Type Chart

This example uses multiple y columns and multiple series types (bar and line)

<DocTab>
    <div slot='preview'>
        <img style="width: 100%;" src="/img/exg-composable-multi-type-nt.svg" alt="Mixed-Type Chart" />
    </div>

```markdown
<Chart data={fda_recalls}>
    <Bar y=voluntary_recalls/>
    <Line y=fda_recalls/>
</Chart>
```
</DocTab>


Because x is the first column in the dataset, an explicit `x` prop is not required.

This structure also gives you control over the individual series on your chart. For example, if you have a single series running through a component, you can override props specifically for that series. Since the FDA acronym was not fully capitalized above, you can rename that specific series inside the `<Line>` primitive:

<DocTab>
    <div slot="preview">
            <img style="width: 100%;" src="/img/exg-composable-name-override-nt.svg" alt="Mixed-Type Chart Name Overide"/>
    </div>

```markdown
<Chart data={fda_recalls}>
    <Bar y=voluntary_recalls/>
    <Line y=fda_recalls name="FDA Recalls"/>
</Chart>
```
</DocTab>


# Chart `<Chart>`

```markdown
<Chart data={query_name}>
    Insert primitives here
</Chart>
```



## Data

<PropListing
    name="data"
    required
    options="query name"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing
    name="x"
    options="column name"
>

Column to use for the x-axis of the chart

</PropListing>
<PropListing
    name="y"
    options="column name | array of column names"
>

Column(s) to use for the y-axis of the chart

</PropListing>
<PropListing
    name="sort"
    options={['true', 'false']}
    defaultValue="true"
>

Whether to apply default sort to your data. Default is x ascending for number and date x-axes, and y descending for category x-axes

</PropListing>
<PropListing
    name="series"
    options="column name"
>

Column to use as the series (groups) in a multi-series chart

</PropListing>
<PropListing
    name="xFmt"
    options="Excel-style format | built-in format name | custom format name"
>

Format to use for x column ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="yFmt"
    options="Excel-style format | built-in format name | custom format name"
>

Format to use for y column ([see available formats](/core-concepts/formatting))

</PropListing>
<PropListing
    name="yLog"
    options={['true', 'false']}
    defaultValue="false"
>

Whether to use a log scale for the y-axis

</PropListing>
<PropListing
    name="yLogBase"
    options="number"
    defaultValue="10"
>

Base to use when log scale is enabled

</PropListing>
<PropListing
    name="emptySet"
    options={['error', 'warn', 'pass']}
    defaultValue="error"
>

Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in build:strict. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed.

</PropListing>
<PropListing
    name="emptyMessage"
    options="string"
    defaultValue="No records"
>

Text to display when an empty dataset is received - only applies when emptySet is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.).

</PropListing>


## Chart

<PropListing
    name="swapXY"
    options={['true', 'false']}
    defaultValue="false"
>

Swap the x and y axes to create a horizontal chart

</PropListing>
<PropListing
    name="title"
    options="string"
>

Chart title. Appears at top left of chart.

</PropListing>
<PropListing
    name="subtitle"
    options="string"
>

Chart subtitle. Appears just under title.

</PropListing>
<PropListing
    name="legend"
    options={['true', 'false']}
    defaultValue="true for multiple series"
>

Turns legend on or off. Legend appears at top center of chart.

</PropListing>
<PropListing
    name="chartAreaHeight"
    options="number"
    defaultValue="180"
>

Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX.

</PropListing>
<PropListing
    name="xAxisTitle"
    options={['true', 'string', 'false']}
    defaultValue="false"
>

Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false

</PropListing>
<PropListing
    name="yAxisTitle"
    options={['true', 'string', 'false']}
    defaultValue="false"
>

Name to show beside y-axis. If 'true', formatted column name is used.

</PropListing>
<PropListing
    name="xGridlines"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)

</PropListing>
<PropListing
    name="yGridlines"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)

</PropListing>
<PropListing
    name="xAxisLabels"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off value labels on the x-axis

</PropListing>
<PropListing
    name="yAxisLabels"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off value labels on the y-axis

</PropListing>
<PropListing
    name="xBaseline"
    options={['true', 'false']}
    defaultValue="true"
>

Turns on/off thick axis line (line appears at y=0)

</PropListing>
<PropListing
    name="yBaseline"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off thick axis line (line appears directly alongside the y-axis labels)

</PropListing>
<PropListing
    name="xTickMarks"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off tick marks for each of the x-axis labels

</PropListing>
<PropListing
    name="yTickMarks"
    options={['true', 'false']}
    defaultValue="false"
>

Turns on/off tick marks for each of the y-axis labels

</PropListing>
<PropListing
    name="yMin"
    options="number"
>

Starting value for the y-axis

</PropListing>
<PropListing
    name="yMax"
    options="number"
>

Maximum value for the y-axis

</PropListing>
<PropListing
    name="yScale"
    options={['true', 'false']}
    defaultValue="false"
>

Whether to scale the y-axis to fit your data. yMin and yMax take precedence over yScale

</PropListing>
<PropListing
    name="options"
    options="object"
>

JavaScript object to add or override chart configuration settings (see Custom Charts page)

</PropListing>
<PropListing
    name="colorPalette"
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue="built-in color palette"
>

Array of custom colours to use for the chart. E.g., `{['#cf0d06','#eb5752','#e88a87']}`

</PropListing>
<PropListing
    name="seriesColors"
    options="object with series names and assigned colors"
    defaultValue="colors applied by order of series in data"
>

Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal. Note the double curly braces required in the syntax `seriesColors={{"Canada": "red", "US": "blue"}}`

</PropListing>
<PropListing
    name="renderer"
    options={['canvas', 'svg']}
    defaultValue="canvas"
>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

Which chart renderer type (canvas or SVG) to use. See ECharts' [documentation on renderers](https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/).

</PropListing>


# Line `<Line/>`

```markdown
<Chart data={query_name}>
    <Line/>
</Chart>
```

## Options

<PropListing
    name="y"
    options="column name | array of column names"
    defaultValue="y supplied to Chart"
>

Column(s) to use for the y-axis of the chart. Can be different than the y supplied to Chart

</PropListing>
<PropListing
    name="series"
    options="column name"
    defaultValue="series supplied to Chart"
>

Column to use as the series (groups) in a multi-series chart. Can be different than the series supplied to Chart

</PropListing>
<PropListing
    name="name"
    options="string"
>

Name to show in legend for a single series (to override column name)

</PropListing>
<PropListing
    name="lineColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color. Only accepts a single color.

</PropListing>
<PropListing
    name="lineOpacity"
    options="number (0 to 1)"
    defaultValue="1"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing
    name="lineType"
    options={['solid', 'dashed', 'dotted']}
    defaultValue="solid"
>

Options to show breaks in a line (dashed or dotted)

</PropListing>
<PropListing
    name="lineWidth"
    options="number"
    defaultValue="2"
>

Thickness of line (in pixels)

</PropListing>
<PropListing
    name="markers"
    options={['true', 'false']}
    defaultValue="false"
>

Turn on/off markers (shapes rendered onto the points of a line)

</PropListing>
<PropListing
    name="markerShape"
    options={['circle', 'emptyCircle', 'rect', 'triangle', 'diamond']}
    defaultValue="circle"
>

Shape to use if markers=true

</PropListing>
<PropListing
    name="markerSize"
    options="number"
    defaultValue="8"
>

Size of each shape (in pixels)

</PropListing>
<PropListing
    name="handleMissing"
    options={['gap', 'connect', 'zero']}
    defaultValue="gap"
>

Treatment of missing values in the dataset

</PropListing>
<PropListing
    name="options"
    options="object"
>

JavaScript object to add or override chart configuration settings (see Custom Charts page)

</PropListing>




# Area `<Area/>`

```markdown
<Chart data={query_name}>
    <Area/>
</Chart>
```

## Options

<PropListing
    name="y"
    options="column name | array of column names"
    defaultValue="y supplied to Chart"
>

Column(s) to use for the y-axis of the chart. Can be different than the y supplied to Chart

</PropListing>
<PropListing
    name="series"
    options="column name"
    defaultValue="series supplied to Chart"
>

Column to use as the series (groups) in a multi-series chart. Can be different than the series supplied to Chart

</PropListing>
<PropListing
    name="name"
    options="string"
>

Name to show in legend for a single series (to override column name)

</PropListing>
<PropListing
    name="fillColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color. Only accepts a single color.

</PropListing>
<PropListing
    name="fillOpacity"
    options="number (0 to 1)"
    defaultValue="0.7"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing
    name="line"
    options={['true', 'false']}
    defaultValue="true"
>

Show line on top of the area

</PropListing>
<PropListing
    name="handleMissing"
    options={['gap', 'connect', 'zero']}
    defaultValue="gap (single series) | zero (multi-series)"
>

Treatment of missing values in the dataset

</PropListing>
<PropListing
    name="options"
    options="object"
>

JavaScript object to add or override chart configuration settings (see Custom Charts page)

</PropListing>

# Bar `<Bar/>`

```markdown
<Chart data={query_name}>
    <Bar/>
</Chart>
```

## Options

<PropListing
    name="y"
    options="column name"
>

Column to use for the y-axis of the chart

</PropListing>
<PropListing
    name="name"
    options="string"
>

Name to show in legend for a single series (to override column name)

</PropListing>
<PropListing
    name="type"
    options={['stacked', 'grouped']}
    defaultValue="stacked"
>

Grouping method to use for multi-series charts

</PropListing>
<PropListing
    name="stackName"
    options="string"
>

Name for an individual stack. If separate Bar components are used with different stackNames, the chart will show multiple stacks

</PropListing>
<PropListing
    name="fillColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color. Only accepts a single color.

</PropListing>
<PropListing
    name="fillOpacity"
    options="number (0 to 1)"
    defaultValue="1"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing
    name="outlineWidth"
    options="number"
    defaultValue="0"
>

Width of line surrounding each bar

</PropListing>
<PropListing
    name="outlineColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to use for outline if outlineWidth > 0

</PropListing>
<PropListing
    name="options"
    options="object"
>

JavaScript object to add or override chart configuration settings (see Custom Charts page)

</PropListing>

# Scatter `<Scatter/>`

```markdown
<Chart data={query_name}>
    <Scatter/>
</Chart>
```

## Options

<PropListing
    name="y"
    options="column name"
>

Column to use for the y-axis of the chart

</PropListing>
<PropListing
    name="name"
    options="string"
>

Name to show in legend for a single series (to override column name)

</PropListing>
<PropListing
    name="shape"
    options={['circle', 'emptyCircle', 'rect', 'triangle', 'diamond']}
    defaultValue="circle"
>

Options for which shape to use for scatter points

</PropListing>
<PropListing
    name="pointSize"
    options="number"
    defaultValue="10"
>

Change size of all points on the chart

</PropListing>
<PropListing
    name="opacity"
    options="number (0 to 1)"
    defaultValue="0.7"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing
    name="fillColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color. Only accepts a single color.

</PropListing>
<PropListing
    name="outlineWidth"
    options="number"
    defaultValue="0"
>

Width of line surrounding each shape

</PropListing>
<PropListing
    name="outlineColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to use for outline if outlineWidth > 0

</PropListing>
<PropListing
    name="options"
    options="object"
>

JavaScript object to add or override chart configuration settings (see Custom Charts page)

</PropListing>

# Bubble `<Bubble/>`

```markdown
<Chart data={query_name}>
    <Bubble/>
</Chart>
```

## Options

<PropListing
    name="y"
    options="column name"
>

Column to use for the y-axis of the chart

</PropListing>
<PropListing
    name="size"
    options="column name"
>

Column to use to scale the size of the bubbles

</PropListing>
<PropListing
    name="name"
    options="string"
>

Name to show in legend for a single series (to override column name)

</PropListing>
<PropListing
    name="shape"
    options={['circle', 'emptyCircle', 'rect', 'triangle', 'diamond']}
    defaultValue="circle"
>

Options for which shape to use for bubble points

</PropListing>
<PropListing
    name="minSize"
    options="number"
    defaultValue="200"
>

Minimum bubble size

</PropListing>
<PropListing
    name="maxSize"
    options="number"
    defaultValue="400"
>

Maximum bubble size

</PropListing>
<PropListing
    name="opacity"
    options="number (0 to 1)"
    defaultValue="0.7"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing
    name="fillColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color. Only accepts a single color.

</PropListing>
<PropListing
    name="outlineWidth"
    options="number"
    defaultValue="0"
>

Width of line surrounding each shape

</PropListing>
<PropListing
    name="outlineColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to use for outline if outlineWidth > 0

</PropListing>
<PropListing
    name="options"
    options="object"
>

JavaScript object to add or override chart configuration settings (see Custom Charts page)

</PropListing>

# Hist `<Hist/>`

```markdown
<Chart data={query_name}>
    <Hist/>
</Chart>
```

## Options

<PropListing
    name="x"
    options="column name"
>

Column which contains the data you want to summarize

</PropListing>
<PropListing
    name="fillColor"
    options="CSS name | hexademical | RGB | HSL"
>

Color to override default series color

</PropListing>
<PropListing
    name="fillOpacity"
    options="number (0 to 1)"
    defaultValue="1"
>

% of the full color that should be rendered, with remainder being transparent

</PropListing>
<PropListing
    name="options"
    options="object"
>

JavaScript object to add or override chart configuration settings (see Custom Charts page)

</PropListing>

### Interactivity

<PropListing
    name="connectGroup"
>

Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected

</PropListing>

## Annotations

Mixed type charts can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

```html
<Chart data={sales_data} x=date y=sales>
  <Line y=sales/>
  <ReferenceLine data={target_data} y=target label=name/>
  <ReferenceArea xMin='2020-03-14' xMax='2020-05-01'/>
</Chart>
```

---
evidence/sites/docs/pages/components/checkbox/index.md
---
---
title: Checkbox
sidebar_position: 1
---

Creates a checkbox with toggleable input. The Title and Name attributes can be defined, enabling the passing of true and false values. 

<DocTab>
    <div slot='preview'>
        <Checkbox
            title="Hide Months 0" 
            name=hide_months_0
        />
    </div>

````markdown
<Checkbox
    title="Hide Months 0" 
    name=hide_months_0 
/>
````
</DocTab>

### Checkbox using Default Value

Defining the defaultValue property will set the initial checked value with true and false.

<!-- <img src="/img/" alt="checkbox" width="300"/> -->

<DocTab>
    <div slot='preview'>
        <Checkbox
            title="Title of checkbox" 
            name=name_of_checkbox
            defaultValue=true
        />

        Selected Value: {inputs.name_of_checkbox}
    </div>

```markdown
<Checkbox
    title="Title of checkbox" 
    name=name_of_checkbox
    defaultValue=true
/>

Selected Value: {inputs.name_of_checkbox}
```
</DocTab>




```sql orders
select 
    COUNT(*) as records_count
from needful_things.orders
WHERE  not ${inputs.exclude_low_value} -- When True, Do not evaluate the next condition
    OR ( 
            ${inputs.exclude_low_value} -- Input is set to false
        AND sales < 10  -- Apply this condition
    )
```

<DocTab>
    <div slot='preview'>
        <div>
            <Checkbox
                title="Exclude low values" 
                name=exclude_low_value
            />
        </div>

        <BigValue fmt=num0 value=records_count data={orders}/>
    </div>

````markdown
<Checkbox
title="Exclude low values" 
name=exclude_low_value
/>

<BigValue fmt=num0 value=records_count data={orders}/>
````
</DocTab>




# Checkbox

## Options

<PropListing 
    name="name"
    required
>

Name of the checkbox, used to reference the selected value elsewhere as `{inputs.name.value}`

</PropListing>
<PropListing 
    name="defaultValue"
    options="boolean"
    defaultValue=false
>

Value to use when checkbox is first loaded. True value for checked, false for unchecked

</PropListing>








---
evidence/sites/docs/pages/components/annotations/index.md
---
---
title: Annotations
sidebar_position: 1
queries: 
- orders_by_month.sql
- orders_by_category_2021.sql
---

Annotations help you add important context directly within a chart - highlight important dates, time periods, or specific points on a chart to make it easier for your audience to pull insights from the information.

## At a glance

Evidence currently offers 4 types of annotations, which can be defined inline or with a dataset:
- [`ReferenceLine`](#reference-line): draw a line on a chart (e.g. sales target, launch dates, linear regression)
- [`ReferenceArea`](#reference-area): highlight an area on a chart (e.g. holiday shopping periods, metric control ranges)
- [`ReferencePoint`](#reference-point): highlight specific points on a chart (e.g. anomalies, points of interest)
- [`Callout`](#callout): draw attention to data (e.g. data trend explanation)

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
            <ReferenceLine y=7500 label="Reference Line" hideValue labelPosition="aboveStart" color=green/>
            <ReferenceArea xMin='2020-03-14' xMax='2020-08-15' label="Reference Area" color=yellow/>
            <ReferencePoint x="2019-07-01" y=6590 label="Reference Point" labelPosition=bottom color=red/>
            <Callout x="2021-05-01" y=11012 labelPosition=bottom labelWidth=fit>
                Callout
                Data trending up here
            </Callout>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferenceLine y=7500 label="Reference Line" hideValue labelPosition="aboveStart" color=green/>
    <ReferenceArea xMin='2020-03-14' xMax='2020-08-15' label="Reference Area" color=yellow/>
    <ReferencePoint x="2019-07-01" y=6590 label="Reference Point" labelPosition=bottom color=red/>
    <Callout x="2021-05-01" y=11012 labelPosition=bottom labelWidth=fit>
        Callout
        Data trending up here
    </Callout>
</LineChart>
```
</DocTab>

# Reference Line 

Reference lines allow you to add lines to a chart to provide additional context within the visualization. These lines can be produced by providing a specific value (`y=50` or `x='2020-03-14'`) or by providing a dataset (e.g., `date`, `event_name`).

If you provide coordinates for `[x, y]` and `[x2, y2]`, you can create sloped lines between points.

When a dataset is provided, `ReferenceLine` can generate multiple lines - one for each row in the dataset. This can be helpful for plotting things like important milestones, launch dates, or experiment start dates.

## Examples

### Y-axis Defined Inline

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yAxisTitle="Sales per Month" yFmt=usd0>
            <ReferenceLine y=9000 label="Target"/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yAxisTitle="Sales per Month" yFmt=usd0>
    <ReferenceLine y=9000 label="Target"/>
</LineChart>
```
</DocTab>

### X-axis Defined Inline

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yAxisTitle="Sales per Month" yFmt=usd0>
            <ReferenceLine x='2019-09-18' label="Launch" hideValue=true/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yAxisTitle="Sales per Month" yFmt=usd0>
    <ReferenceLine x='2019-09-18' label="Launch" hideValue=true/>
</LineChart>
```
</DocTab>

### Y-axis Multiple Lines

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
            <ReferenceLine y=9000 label="Target" labelPosition=belowEnd/>
            <ReferenceLine y=10500 label="Forecast"/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
    <ReferenceLine y=9000 label="Target" labelPosition=belowEnd/>
    <ReferenceLine y=10500 label="Forecast"/>
</LineChart>
```
</DocTab>

### X-axis from Data

```sql multiple_dates
select '2019-12-05'::date as start_date, '2020-02-05'::date as end_date, 'Campaign 1' as campaign_name union all
select '2020-07-14'::date, '2020-09-14'::date, 'Campaign 2' union all
select '2021-04-14'::date, '2021-06-14'::date, 'Campaign 3'
```

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
            <ReferenceLine data={multiple_dates} x=start_date label=campaign_name hideValue/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
    <ReferenceLine data={multiple_dates} x=start_date label=campaign_name hideValue/>
</LineChart>
```
</DocTab>

### Sloped Line Inline

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
            <ReferenceLine x='2019-01-01' y=6500 x2='2021-12-01' y2=12000 label="Growth Trend" labelPosition=belowEnd/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
    <ReferenceLine x='2019-01-01' y=6500 x2='2021-12-01' y2=12000 label="Growth Trend" labelPosition=belowEnd/>
</LineChart>
```
</DocTab>

### Linear Regression from Data

```sql orders_by_state
select 
    state,
    sum(sales) as sales,
    count(*) as num_orders
from orders
group by all
```

```sql regression
WITH 
coeffs AS (
    SELECT
        regr_slope(num_orders, sales) AS slope,
        regr_intercept(num_orders, sales) AS intercept,
        regr_r2(num_orders, sales) AS r_squared
    FROM ${orders_by_state}
)

SELECT 
    min(sales) AS x, 
    max(sales) AS x2, 
    min(sales) * slope + intercept AS y, 
    max(sales) * slope + intercept AS y2, 
    'Best Fit (y = ' || ROUND(slope, 2) || 'x + ' || ROUND(intercept, 2) || ', R^2 = ' || ROUND(r_squared, 3) || ')' AS label
FROM coeffs, ${orders_by_state}
GROUP BY slope, intercept, r_squared
```

<DocTab>
    <div slot='preview'>
        <ScatterPlot data={orders_by_state} x=sales y=num_orders xMin=0 yMin=0 xFmt=usd>
            <ReferenceLine data={regression} x=x y=y x2=x2 y2=y2 label=label color=grey lineType=solid/>
        </ScatterPlot>
    </div>


<Tabs>

<Tab label="Markdown">

```html
<ScatterPlot data={orders_by_state} x=sales y=num_orders xMin=0 yMin=0>
    <ReferenceLine data={regression} x=x y=y x2=x2 y2=y2 label=label color=grey lineType=solid/>
</ScatterPlot>
```

</Tab>


<Tab label="SQL Queries">


````markdown
```sql orders_by_state
select 
    state,
    sum(sales) as sales,
    count(*) as num_orders
from orders
group by all
```

```sql regression
WITH 
coeffs AS (
    SELECT
        regr_slope(num_orders, sales) AS slope,
        regr_intercept(num_orders, sales) AS intercept,
        regr_r2(num_orders, sales) AS r_squared
    FROM ${orders_by_state}
)

SELECT 
    min(sales) AS x, 
    max(sales) AS x2, 
    min(sales) * slope + intercept AS y, 
    max(sales) * slope + intercept AS y2, 
    'Best Fit (y = ' || ROUND(slope, 2) || 'x + ' || ROUND(intercept, 2) || ', R^2 = ' || ROUND(r_squared, 3) || ')' AS label
FROM coeffs, ${orders_by_state}
GROUP BY slope, intercept, r_squared
```
````

</Tab>

</Tabs>
</DocTab>


### Custom Styling

<DocTab>
    <div slot='preview'> 
        <LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
            <ReferenceLine y=11000 color=red hideValue=true lineWidth=3 lineType=solid/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales_usd0k yAxisTitle="Sales per Month">
    <ReferenceLine y=110000 color=red hideValue=true lineWidth=3 lineType=solid/>
</LineChart>
```
</DocTab>


### Label Positions

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yFmt=usd0k yAxisTitle="Sales per Month">
            <ReferenceLine y=4000 label=aboveStart labelPosition=aboveStart hideValue/>
            <ReferenceLine y=4000 label=aboveCenter labelPosition=aboveCenter hideValue/>
            <ReferenceLine y=4000 label=aboveEnd labelPosition=aboveEnd hideValue/>
            <ReferenceLine y=4000 label=belowStart labelPosition=belowStart hideValue/>
            <ReferenceLine y=4000 label=belowCenter labelPosition=belowCenter hideValue/>
            <ReferenceLine y=4000 label=belowEnd labelPosition=belowEnd hideValue/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0k yAxisTitle="Sales per Month">
    <ReferenceLine y=4000 label=aboveStart labelPosition=aboveStart hideValue/>
    <ReferenceLine y=4000 label=aboveCenter labelPosition=aboveCenter hideValue/>
    <ReferenceLine y=4000 label=aboveEnd labelPosition=aboveEnd hideValue/>
    <ReferenceLine y=4000 label=belowStart labelPosition=belowStart hideValue/>
    <ReferenceLine y=4000 label=belowCenter labelPosition=belowCenter hideValue/>
    <ReferenceLine y=4000 label=belowEnd labelPosition=belowEnd hideValue/>
</LineChart>
```
</DocTab>

### Colours

<DocTab>
    <div slot='preview'>
        <LineChart data={orders_by_month} x=month y=sales yFmt=usd0k yAxisTitle="Sales per Month">
            <ReferenceLine y=1500 color=red label=red/>
            <ReferenceLine y=3500 color=yellow label=yellow/>
            <ReferenceLine y=5500 color=green label=green/>
            <ReferenceLine y=7500 color=blue label=blue/>
            <ReferenceLine y=9500 color=grey label=grey/>
            <ReferenceLine y=11500 color=#63178f label=custom/>
        </LineChart>
    </div>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0k yAxisTitle="Sales per Month">
    <ReferenceLine y=1500 color=red label=red/>
    <ReferenceLine y=3500 color=yellow label=yellow/>
    <ReferenceLine y=5500 color=green label=green/>
    <ReferenceLine y=7500 color=blue label=blue/>
    <ReferenceLine y=9500 color=grey label=grey/>
    <ReferenceLine y=11500 color=#63178f label=custom/>
</LineChart>
```
</DocTab>

## Options
A reference line can be produced by defining values inline or by supplying a dataset, and the required props are different for each of those cases.

### Defining Values Inline

    <PropListing
        name=x
        description="x-axis value where line will be plotted, or coordinate where line will start if x2 is provided"
        required="false"
        options="number | string | date"
    />
    <PropListing
        name=y
        description="y-axis value where line will be plotted, or coordinate where line will start if y2 is provided"
        required="false"
        options="number"    
    />
    <PropListing
        name=x2
        description="x-axis value for line endpoint"
        required="false"
        options="number | string | date"
    />
    <PropListing
        name=y2
        description="y-axis value for line endpoint"
        required="false"
        options="number"
    />
    <PropListing
        name=label
        description="Text to show as label for the line. If no label is provided, the value will be used."
        required="false"
        options="string"
    />

<LineBreak/>

This table shows how you combine `x`, `y`, `x2`, and `y2` to create different types of lines:

```sql xy_config_table
select 5 as x, null as y, null as x2, null as y2, 'Vertical line at x=5' as Result union all
select null, 100, null, null, 'Horizontal line at y=100' union all
select 5, 100, null, null, 'Vertical line at x=5 (ignores y)' union all
select 5, 100, 10, 200, 'Sloped line from [5, 100] to [10, 200]' union all
select 5, 100, null, 200, 'Vertical line from [5, 100] to [5, 200]' union all
select 5, 100, 10, null, 'Horizontal line from [5, 100] to [10, 100]'
order by 2 nulls first, 1 nulls first, 3 nulls first, 4 nulls first
```

<DataTable data={xy_config_table} formatColumnTitles=false/>

<Alert status=warning>

If you provide `[x, y]` and `[x2, y2]`, coordinates must fall within the chart's boundaries in order for the line to be drawn.

</Alert>

### Supplying a Dataset

    <PropListing
        name=data
        description="Query name, wrapped in curly braces"
        required=true
        options="query name"
    />
    <PropListing
        name=x
        description="Column containing x-axis values for lines (or starting points if x2 is provided)"
        options="column name"
    />
    <PropListing
        name=y
        description="Column containing y-axis values for lines (or starting points if y2 is provided)"
        options="column name"
    />
    <PropListing
        name=x2
        description="Column containing x-axis values for line endpoints."
        options="column name"
    />
    <PropListing
        name=y2
        description="Column containing y-axis values for line endpoints."
        options="column name"
    />
    <PropListing
        name=label
        description="Column containing a label to use for each line"
        required="false"
        options="column name"
    />
    <PropListing
        name=hideValue
        description="Option to remove the value from the label"
        options={["true", "false"]}
        defaultValue=false
    />

```sql xy_data_table
select 'x_col' as x, null as y, null as x2, null as y2, 'Vertical lines at values in x_col' as Result union all
select null, 'y_col', null, null, 'Horizontal lines at values in y_col' union all
select 'x_col', 'y_col', null, null, 'Vertical lines at x_col (ignores y_col)' union all
select 'x_col', 'y_col', 'x2_col', 'y2_col', 'Sloped Lines from [x_col, y_col] to [x2_col, y2_col]'
order by 2 nulls first, 1 nulls first, 3 nulls first, 4 nulls first
```

<DataTable data={xy_data_table} formatColumnTitles=false/>

<Alert status=warning>

If you provide `[x, y]` and `[x2, y2]`, coordinates must fall within the chart's boundaries in order for lines to be drawn.

</Alert>

### Styling

<PropListing
    name=color
    description="Color to override default line and label colors"
    options="CSS name | hexademical | RGB | HSL"
/>

<!-- Line-related props -->
<PropListing
    name=lineColor
    description="Color to override default line color. If used, takes precedence over `color`"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=lineType
    description="Options to show breaks in a line (dashed or dotted)"
    options={["solid", "dashed", "dotted"]}
    defaultValue="dashed"
/>
<PropListing
    name=lineWidth
    description="Thickness of line (in pixels)"
    options="number"
    defaultValue="1.3"
/>

<!-- Symbol related props -->
<PropListing
    name=symbolStart
    description="The type of symbol used to mark the start of the line"
    options={['circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none']}
    defaultValue=circle
/>
<PropListing
    name=symbolStartSize
    description="The size of the symbol at the start of the line"
    options=number
    defaultValue=8
/>
<PropListing
    name=symbolEnd
    description="The type of symbol used to mark the end of the line"
    options={['circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none']}
    defaultValue=circle
/>
<PropListing
    name=symbolEndSize
    description="The size of the symbol at the end of the line"
    options=number
    defaultValue=8
/>


<!-- Label-related props -->
<PropListing
    name=labelPosition
    description="Where label will appear on the line"
    options={["aboveStart", "aboveCenter", "aboveEnd", "belowStart", "belowCenter", "belowEnd"]}
    defaultValue="aboveEnd"
/>
<PropListing
    name=labelColor
    description="Color to override default label color. If used, takes precedence over `color`"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=labelBackground
    description="Option to show a white semi-transparent background behind the label. Helps when label is shown in front of darker colours."
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name=labelPadding
    options=number
    description="Padding between the text and the border of the label background"
/>
<PropListing
    name=labelBorderWidth
    description="The thickness of the border around the label (in pixels)"
    options=number
/>
<PropListing
    name=labelBorderRadius
    description="The radius of rounded corners on the label background (in pixels)"
    options=number
/>
<PropListing
    name=labelBorderColor
    description="The color of the border around the label background"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=labelBorderType
    description="The type of border around the label background (dashed or dotted)"
    options={['solid', 'dotted', 'dashed']}
/>

<!-- Font-related props -->
<PropListing
    name=fontSize
    description="The size of the font in the label"
    options=number
/>
<PropListing
    name=align
    description="How to align the label to the symbol, and the text within the label"
    options={['left', 'center', 'right']}
/>
<PropListing
    name=bold
    description="Make the label text bold"
    options={[true, false]}
    defaultValue=false
/>
<PropListing
    name=italic
    description="Make the label text italic"
    options={[true, false]}
    defaultValue=false
/>


# Reference Area

Reference areas allow you to add highlighted ranges to a chart. These ranges can be:
- Along the x-axis (e.g., recession date ranges)
- Along the y-axis (e.g., control threshold for a metric)
- Both (e.g, highlighting a specific series of points in the middle of the chart)

Reference areas can be produced by defining the x and y-axis values inline (e.g., `xMin='2020-03-14' xMax='2020-06-30'`) or by supplying a dataset (e.g., `start_date`, `end_date`, `name`).

When a dataset is provided, `ReferenceArea` can generate multiple areas - one for each row in the dataset. 

## Examples

### X-axis Defined Inline

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
    <ReferenceArea xMin='2020-03-14' xMax='2020-08-15' label=First color=yellow/>
    <ReferenceArea xMin='2021-03-14' xMax='2021-08-15' label=Second/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
    <ReferenceArea xMin='2020-03-14' xMax='2020-08-15' label=First color=yellow/>
    <ReferenceArea xMin='2021-03-14' xMax='2021-08-15' label=Second/>
</LineChart>
```

### Y-axis Defined Inline

<LineChart data={orders_by_month} x=month y=num_orders yAxisTitle="Orders per Month">
    <ReferenceArea yMin=250 color=green label="Good"/>
    <ReferenceArea yMin=100 yMax=250 color=yellow label="Okay"/>
    <ReferenceArea yMin=0 yMax=100 color=red label="Bad"/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=num_orders yAxisTitle="Orders per Month">
    <ReferenceArea yMin=250 color=green label="Good"/>
    <ReferenceArea yMin=100 yMax=250 color=yellow label="Okay"/>
    <ReferenceArea yMin=0 yMax=100 color=red label="Bad"/>
</LineChart>
```

### X-axis from Data

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
    <ReferenceArea data={multiple_dates} xMin=start_date xMax=end_date label=campaign_name/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 yAxisTitle="Sales per Month">
    <ReferenceArea data={multiple_dates} xMin=start_date xMax=end_date label=campaign_name/>
</LineChart>
```

### Bar Chart

<BarChart data={orders_by_category_2021} x=month y=sales yFmt=usd0 series=category>
    <ReferenceArea xMin='2021-01-01' xMax='2021-04-01'/>
</BarChart> 

```html
<BarChart data={orders_by_category_2021} x=month y=sales yFmt=usd0 series=category>
    <ReferenceArea xMin='2021-01-01' xMax='2021-04-01'/>
</BarChart> 
```

#### Continuous Axis Bar Charts
On a continous x-axis (dates or numbers), the reference area will start and stop at the exact point on the x-axis. This means it will appear in the middle of whichever bar is at that point. If you would prefer to see the area cover the full bar, there are 2 ways to achieve this:
1. Add a buffer on either side of the range you want to highlight (e.g., instead of ending the area at `2020-07-01`, end it at `2020-07-15`)
2. Change your x-axis to categorical data (using `xType=category`). If using a date axis, you may also want to retain the axis label formatting for dates - to achieve this, you can use the `xFmt` prop (e.g., `xFmt=mmm`)

### Reference Area Box
<img src="/img/refarea-box.png"  width='600px'/>

<!-- Need data -->

```html
<ScatterPlot data={countries} x=gdp_usd y=gdp_growth_pct1 tooltipTitle=country series=continent>
    <ReferenceArea xMin=16000 xMax=24000 yMin=-0.03 yMax=0.055 label="Large and stagnant" color=grey border=true/>
</ScatterPlot>
```

### Labels

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=topLeft labelPosition=topLeft/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=top labelPosition=top/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=topRight labelPosition=topRight/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=left labelPosition=left/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=center labelPosition=center/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=right labelPosition=right/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottomLeft labelPosition=bottomLeft/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottom labelPosition=bottom/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottomRight labelPosition=bottomRight/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=topLeft labelPosition=topLeft/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=top labelPosition=top/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=topRight labelPosition=topRight/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=left labelPosition=left/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=center labelPosition=center/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=right labelPosition=right/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottomLeft labelPosition=bottomLeft/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottom labelPosition=bottom/>
    <ReferenceArea xMin='2019-07-01' xMax='2021-07-31' label=bottomRight labelPosition=bottomRight/>
</LineChart>
```

#### Label Overlaps
Reference areas appear behind chart gridlines, including reference area labels. If you are seeing an overlap between the gridlines and the reference area label, you can avoi this by turning gridlines off (`yGridlines=false`).

### Colours

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 >
    <ReferenceArea xMax='2019-04-01' label=blue color=blue/>
    <ReferenceArea xMin='2019-04-01' xMax='2019-11-01' label=red color=red/>
    <ReferenceArea xMin='2019-11-01' xMax='2020-07-01' label=yellow color=yellow/>
    <ReferenceArea xMin='2020-07-01' xMax='2021-02-01' label=green color=green/>
    <ReferenceArea xMin='2021-02-01' xMax='2021-09-01' label=grey color=grey/>
    <ReferenceArea xMin='2021-09-01' label=custom color=#f2dbff labelColor=#4d1070/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0 >
    <ReferenceArea xMax='2019-04-01' label=blue color=blue/>
    <ReferenceArea xMin='2019-04-01' xMax='2019-11-01' label=red color=red/>
    <ReferenceArea xMin='2019-11-01' xMax='2020-07-01' label=yellow color=yellow/>
    <ReferenceArea xMin='2020-07-01' xMax='2021-02-01' label=green color=green/>
    <ReferenceArea xMin='2021-02-01' xMax='2021-09-01' label=grey color=grey/>
    <ReferenceArea xMin='2021-09-01' label=custom color=#f2dbff labelColor=#4d1070/>
</LineChart>
```


## Options
A reference area can be produced by defining values inline or by supplying a dataset, and the required props are different for each of those cases.

### Defining Values Inline

    <PropListing
        name=xMin
        description="x-axis value where area should start. If left out, range will extend to the start of the x-axis."
        options="number | string | date"
    />
    <PropListing
        name=xMax
        description="x-axis value where area should end. If left out, range will extend to the end of the x-axis."
        options="number | string | date"
    />
    <PropListing
        name=yMin
        description="y-axis value where area should start. If left out, range will extend to the start of the y-axis."
        options="number"
    />
    <PropListing
        name=yMax
        description="y-axis value where area should end. If left out, range will extend to the end of the y-axis."
        options="number"
    />
    <PropListing
        name=label
        description="Text to show as label for the area"
        options="string"
    />

- At least 1 of `xMin`, `xMax`, `yMin`, or `yMax` is required to plot an area.

### Supplying a Dataset

    <PropListing
        name=data
        description="Query name, wrapped in curly braces"
        required=true
        options="query name"
    />
    <PropListing
        name=xMin
        description="Column containing x-axis values for area start. If left out, range will extend to the start of the x-axis."
        options="column name"
    />
    <PropListing
        name=xMax
        description="Column containing x-axis values for area end. If left out, range will extend to the end of the x-axis."
        options="column name"
    />
    <PropListing
        name=yMin
        description="Column containing y-axis values for area start. If left out, range will extend to the start of the y-axis."
        options="column name"
    />
    <PropListing
        name=yMax
        description="Column containing y-axis values for area end. If left out, range will extend to the end of the y-axis."
        options="column name"
    />
    <PropListing
        name=label
        description="Column containing a label to use for each area"
        required="false"
        options="column name"
    />

- At least 1 of `xMin`, `xMax`, `yMin`, or `yMax` is required to plot an area.

### Styling

<PropListing
    name=color
    description="Color to override default area and label colors"
    options="CSS name | hexademical | RGB | HSL"
/>

<!-- Area-related props -->
<PropListing
    name=areaColor
    description="Color to override default area color. If used, takes precedence over `color`"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=opacity
    description="Opacity of the highlighted area"
    options="number"
/>
<PropListing
    name=border
    description="Renders a border around the highlighted area"
    option={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=borderColor
    description="Color to override default border color"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=borderType
    description="Options to show breaks in a line (dashed or dotted)"
    options={["solid", "dashed", "dotted"]}
    defaultValue="dashed"
/>
<PropListing
    name=borderWidth
    description="Thickness of border (in pixels)"
    options="number"
/>

<!-- Label-related props -->
<PropListing
    name=labelPosition
    description="Where label will appear within the area"
    options={["topLeft", "top", "topRight", "left", "center", "right", "bottomLeft", "bottom", "bottomRight"]}
    defaultValue="topLeft"
/>
<PropListing
    name=labelColor
    description="Color to override default label color. If used, takes precedence over `color`"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=labelColor
    description="Color to override default label color. If used, takes precedence over `color`"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=labelBackgroundColor
    description="The color of the background behind the label"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=labelPadding
    options=number
    description="Padding between the text and the border of the label background"
/>
<PropListing
    name=labelBorderWidth
    description="The thickness of the border around the label (in pixels)"
    options=number
/>
<PropListing
    name=labelBorderRadius
    description="The radius of rounded corners on the label background (in pixels)"
    options=number
/>
<PropListing
    name=labelBorderColor
    description="The color of the border around the label background"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=labelBorderType
    description="The type of border around the label background (dashed or dotted)"
    options={['solid', 'dotted', 'dashed']}
/>

<!-- Font-related props -->
<PropListing
    name=fontSize
    description="The size of the font in the label"
    options=number
/>
<PropListing
    name=align
    description="How to align the label to the symbol, and the text within the label"
    options={['left', 'center', 'right']}
/>
<PropListing
    name=bold
    description="Make the label text bold"
    options={[true, false]}
    defaultValue=false
/>
<PropListing
    name=italic
    description="Make the label text italic"
    options={[true, false]}
    defaultValue=false
/>

# Reference Point

Reference points allow you to add labels on certain points to emphasize them in the chart. They can be produced by providing a specific x/y coordinate (e.g. `x="2021-05-01"` `y=11012`) or by providing a dataset (e.g. `anomalies`, `points`).

When a dataset is provided, `ReferencePoint` will generate multiple points - one for each row in the dataset. This can be helpful for plotting a large number of points with a succinct syntax.

## Examples

### Defined Point

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-07-01" y=6590 label="2019-07-01 : Big drop" labelPosition=bottom/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-07-01" y=6590 label="2019-07-01 : Big drop" labelPosition=bottom/>
</LineChart>
```

### Points from Data

```sales_drops
select
    month,
    sales,
    concat('Sales dropped $', round(abs(sales_diff))::int::text) as label
from (
    select
        month,
        sales,
        sales - lag(sales) over (order by month) as sales_diff
    from ${orders_by_month}
)
where sales_diff < -2000
```

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint data={sales_drops} x=month y=sales label=label labelPosition=bottom align=right />
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint data={sales_drops} x=month y=sales label=label labelPosition=bottom align=right />
</LineChart>
```

### Custom Styling

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint
        x="2019-07-01"
        y=6590
        label="2019-07-01 : Big drop"
        labelPosition=right
        color=red
        symbolSize=16
        symbolBorderWidth=1
        symbolBorderColor=red
        symbolOpacity=0.25
    />
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint
        x="2019-07-01"
        y=6590
        label="2019-07-01 : Big drop"
        labelPosition=right
        color=red
        symbolSize=16
        symbolBorderWidth=1
        symbolBorderColor=red
        symbolOpacity=0.25
    />
</LineChart>
```

### Label Positions

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-07-01" y=6590 label=top labelPosition=top/>
    <ReferencePoint x="2019-07-01" y=6590 label=right labelPosition=right/>
    <ReferencePoint x="2019-07-01" y=6590 label=bottom labelPosition=bottom/>
    <ReferencePoint x="2019-07-01" y=6590 label=left labelPosition=left/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-07-01" y=6590 label=top labelPosition=top/>
    <ReferencePoint x="2019-07-01" y=6590 label=right labelPosition=right/>
    <ReferencePoint x="2019-07-01" y=6590 label=bottom labelPosition=bottom/>
    <ReferencePoint x="2019-07-01" y=6590 label=left labelPosition=left/>
</LineChart>
```

#### Multiline label

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-07-01" y=6590 labelPosition=bottom align=left>
        A label with
        line breaks in it
        to allow longer text
    </ReferencePoint>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-07-01" y=6590 labelPosition=bottom align=left>
        A label with
        line breaks in it
        to allow longer text
    </ReferencePoint>
</LineChart>
```

### Colours

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-03-01" y=3000 color=blue label=blue />
    <ReferencePoint x="2019-09-01" y=3000 color=red label=red />
    <ReferencePoint x="2020-03-01" y=3000 color=yellow label=yellow />
    <ReferencePoint x="2020-09-01" y=3000 color=green label=green />
    <ReferencePoint x="2021-03-01" y=3000 color=grey label=grey />
    <ReferencePoint x="2021-09-01" y=3000 color=#63178f label=custom />
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <ReferencePoint x="2019-03-01" y=3000 color=blue label=blue />
    <ReferencePoint x="2019-09-01" y=3000 color=red label=red />
    <ReferencePoint x="2020-03-01" y=3000 color=yellow label=yellow />
    <ReferencePoint x="2020-09-01" y=3000 color=green label=green />
    <ReferencePoint x="2021-03-01" y=3000 color=grey label=grey />
    <ReferencePoint x="2021-09-01" y=3000 color=#63178f label=custom />
</LineChart>
```

## Options

### Defining Values Inline

    <PropListing
        name=x
        description="x coordinate value where the point will be plotted"
        options="number | string | date"
    />
    <PropListing
        name=y
        description="y coordinate value where the point will be plotted"
        options="number | string | date"
    />
    <PropListing
        name=label
        description="Text to show as label for the point"
        required=true
        options="string"
    />

### Supplying a Dataset

    <PropListing
        name=data
        description="Query name, wrapped in curly braces"
        required=true
        options="query name"
    />
    <PropListing
        name=x
        description="Column containing x-axis values for points"
        options="column name"
    />
    <PropListing
        name=y
        description="Column containing y-axis values for points"
        options="column name"
    />
    <PropListing
        name=label
        description="Column containing a label to use for each line"
        required=true
        options="column name"
    />

### Styling

    <PropListing
        name=color
        description="Color to override default line and label colors"
        options="CSS name | hexademical | RGB | HSL"
        defaultValue=grey
    />
    <PropListing
        name=labelColor
        description="Color to override default label color. If used, takes precedence over `color`"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=labelWidth
        description="The width available for the label. If text is longer than this width, it will wrap to new lines."
        options="fit | string | number"
        defaultValue=fit
    />
    <PropListing
        name=labelPadding
        options=number
        description="Padding between the text and the border of the label background"
    />
    <PropListing
        name=labelPosition
        description="Where the label will appear relative to the point"
        options={["top", "right", "bottom", "left"]}
        defaultValue=top
    />
    <PropListing
        name=labelBackgroundColor
        description="The color of the background behind the label"
        options="CSS name | hexademical | RGB | HSL"
        defaultValue="hsla(360, 100%, 100%, 0.7)"
    />
    <PropListing
        name=labelBorderWidth
        description="The thickness of the border around the label (in pixels)"
        options=number
    />
    <PropListing
        name=labelBorderRadius
        description="The radius of rounded corners on the label background (in pixels)"
        options=number
    />
    <PropListing
        name=labelBorderColor
        description="The color of the border around the label background"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=labelBorderType
        description="The type of border around the label background (dashed or dotted)"
        options={['solid', 'dotted', 'dashed']}
    />
    <PropListing
        name=fontSize
        description="The size of the font in the label"
        options=number
    />
    <PropListing
        name=align
        description="How to align the label to the symbol, and the text within the label"
        options={['left', 'center', 'right']}
    />
    <PropListing
        name=bold
        description="Make the label text bold"
        options={[true, false]}
        defaultValue=false
    />
    <PropListing
        name=italic
        description="Make the label text italic"
        options={[true, false]}
        defaultValue=false
    />
    <PropListing
        name=symbol
        description="The type of symbol used to mark the x/y coordinate(s)"
        options={['circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none']}
        defaultValue=circle
    />
    <PropListing
        name=symbolColor
        description="Color to override default symbol color. If used, takes precedence over `color`"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=symbolSize
        description="The size of the symbol"
        options=number
        defaultValue=8
    />
    <PropListing
        name=symbolOpacity
        description="The opacity of the symbol"
        options=number
    />
    <PropListing
        name=symbolBorderWidth
        description="The width of the border around the symbol"
        options=number
    />
    <PropListing
        name=symbolBorderColor
        description="The color of the border around the symbol"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=preserveWhitespace
        description="When true, stops multiline labels from having whitespace at the start/end of lines trimmed"
        options={[true, false]}
        defaultValue=false
    />

# Callout

Callouts are very similar to reference points, just with different default styling to optimize them for slightly different use cases. Callouts allow you to add a long label somewhere on a chart to describe a trend or provide insight on the data. They can be produced by providing a specific x/y coordinate (e.g. `x="2021-05-01"` `y=11012`) or by providing a dataset (e.g. `anomalies`, `points`).

When a dataset is provided, `Callout` will generate multiple points - one for each row in the dataset. This can be helpful for plotting a large number of points with a succinct syntax.

## Examples

### Defined Point

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-07-01" y=6590 label="Sales really dropped here" labelPosition=bottom/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-07-01" y=6590 label="Sales really dropped here" labelPosition=bottom/>
</LineChart>
```

### Points from Data

```sales_drops
select
    month,
    sales,
    concat('Sales dropped $', round(abs(sales_diff))::int::text) as label
from (
    select
        month,
        sales,
        sales - lag(sales) over (order by month) as sales_diff
    from ${orders_by_month}
)
where sales_diff < -2000
```

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout data={sales_drops} x=month y=sales label=label labelPosition=bottom align=right />
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout data={sales_drops} x=month y=sales label=label labelPosition=bottom align=right />
</LineChart>
```

### Custom Styling

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout
        x="2019-07-01"
        y=6590
        label="Sales really dropped here"
        labelPosition=right
        color=red
        symbolSize=16
        symbolBorderWidth=1
        symbolBorderColor=red
        symbolOpacity=0.25
    />
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout
        x="2019-07-01"
        y=6590
        label="Sales really dropped here"
        labelPosition=right
        color=red
        symbolSize=16
        symbolBorderWidth=1
        symbolBorderColor=red
        symbolOpacity=0.25
    />
</LineChart>
```

### Label Positions

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-07-01" y=6590 label=top labelPosition=top/>
    <Callout x="2019-07-01" y=6590 label=right labelPosition=right/>
    <Callout x="2019-07-01" y=6590 label=bottom labelPosition=bottom/>
    <Callout x="2019-07-01" y=6590 label=left labelPosition=left/>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-07-01" y=6590 label=top labelPosition=top/>
    <Callout x="2019-07-01" y=6590 label=right labelPosition=right/>
    <Callout x="2019-07-01" y=6590 label=bottom labelPosition=bottom/>
    <Callout x="2019-07-01" y=6590 label=left labelPosition=left/>
</LineChart>
```

#### Multiline label

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-07-01" y=6590 labelPosition=bottom align=left>
        Callout
        with
        line
        breaks
    </Callout>
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-07-01" y=6590 labelPosition=bottom align=left>
        Callout
        with
        line
        breaks
    </Callout>
</LineChart>
```

### Colours

<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-03-01" y=3000 color=blue label=blue />
    <Callout x="2019-09-01" y=3000 color=red label=red />
    <Callout x="2020-03-01" y=3000 color=yellow label=yellow />
    <Callout x="2020-09-01" y=3000 color=green label=green />
    <Callout x="2021-03-01" y=3000 color=grey label=grey />
    <Callout x="2021-09-01" y=3000 color=#63178f label=custom />
</LineChart>

```html
<LineChart data={orders_by_month} x=month y=sales yFmt=usd0>
    <Callout x="2019-03-01" y=3000 color=blue label=blue />
    <Callout x="2019-09-01" y=3000 color=red label=red />
    <Callout x="2020-03-01" y=3000 color=yellow label=yellow />
    <Callout x="2020-09-01" y=3000 color=green label=green />
    <Callout x="2021-03-01" y=3000 color=grey label=grey />
    <Callout x="2021-09-01" y=3000 color=#63178f label=custom />
</LineChart>
```

## Options

### Defining Values Inline

    <PropListing
        name=x
        description="x coordinate value where the point will be plotted"
        options="number | string | date"
    />
    <PropListing
        name=y
        description="y coordinate value where the point will be plotted"
        options="number | string | date"
    />
    <PropListing
        name=label
        description="Text to show as label for the point"
        required=true
        options="string"
    />

### Supplying a Dataset

    <PropListing
        name=data
        description="Query name, wrapped in curly braces"
        required=true
        options="query name"
    />
    <PropListing
        name=x
        description="Column containing x-axis values for points"
        options="column name"
    />
    <PropListing
        name=y
        description="Column containing y-axis values for points"
        options="column name"
    />
    <PropListing
        name=label
        description="Column containing a label to use for each line"
        required=true
        options="column name"
    />

### Styling

    <PropListing
        name=color
        description="Color to override default line and label colors"
        options="CSS name | hexademical | RGB | HSL"
        defaultValue=grey
    />
    <PropListing
        name=labelColor
        description="Color to override default label color. If used, takes precedence over `color`"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=labelWidth
        description="The width available for the label. If text is longer than this width, it will wrap to new lines."
        options="fit | string | number"
        defaultValue=fit
    />
    <PropListing
        name=labelPadding
        options=number
        description="Padding between the text and the border of the label background"
    />
    <PropListing
        name=labelPosition
        description="Where the label will appear relative to the point"
        options={["top", "right", "bottom", "left"]}
        defaultValue=top
    />
    <PropListing
        name=labelBackgroundColor
        description="The color of the background behind the label"
        options="CSS name | hexademical | RGB | HSL"
        defaultValue="hsla(360, 100%, 100%, 0.7)"
    />
    <PropListing
        name=labelBorderWidth
        description="The thickness of the border around the label (in pixels)"
        options=number
    />
    <PropListing
        name=labelBorderRadius
        description="The radius of rounded corners on the label background (in pixels)"
        options=number
    />
    <PropListing
        name=labelBorderColor
        description="The color of the border around the label background"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=labelBorderType
        description="The type of border around the label background (dashed or dotted)"
        options={['solid', 'dotted', 'dashed']}
    />
    <PropListing
        name=fontSize
        description="The size of the font in the label"
        options=number
    />
    <PropListing
        name=align
        description="How to align the label to the symbol, and the text within the label"
        options={['left', 'center', 'right']}
    />
    <PropListing
        name=bold
        description="Make the label text bold"
        options={[true, false]}
        defaultValue=false
    />
    <PropListing
        name=italic
        description="Make the label text italic"
        options={[true, false]}
        defaultValue=false
    />
    <PropListing
        name=symbol
        description="The type of symbol used to mark the x/y coordinate(s)"
        options={['circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none']}
        defaultValue=circle
    />
    <PropListing
        name=symbolColor
        description="Color to override default symbol color. If used, takes precedence over `color`"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=symbolSize
        description="The size of the symbol"
        options=number
        defaultValue=8
    />
    <PropListing
        name=symbolOpacity
        description="The opacity of the symbol"
        options=number
    />
    <PropListing
        name=symbolBorderWidth
        description="The width of the border around the symbol"
        options=number
    />
    <PropListing
        name=symbolBorderColor
        description="The color of the border around the symbol"
        options="CSS name | hexademical | RGB | HSL"
    />
    <PropListing
        name=preserveWhitespace
        description="When true, stops multiline labels from having whitespace at the start/end of lines trimmed"
        options={[true, false]}
        defaultValue=false
    />

---
evidence/sites/docs/pages/components/accordion/index.md
---
---
title: Accordion
sidebar_position: 1
---

<DocTab>
  <div slot='preview'>
    <Accordion>
      <AccordionItem title="Item 1">

        This is the first item's accordion body.

        You can use **markdown** here too!

        Make sure to include an empty line after the component if you want to use markdown.

      </AccordionItem>
      <AccordionItem title="Item 2">

        This is the second item's accordion body with <b>bold text</b>.

      </AccordionItem>
      <AccordionItem title="Item 3">

        This is the third item's accordion body.

      </AccordionItem>
    </Accordion>
  </div>

  ```markdown 
  <Accordion>
    <AccordionItem title="Item 1">

      This is the first item's accordion body.

      You can use **markdown** here too!

      Make sure to include an empty line after the component if you want to use markdown.

    </AccordionItem>
    <AccordionItem title="Item 2">

      This is the second item's accordion body with <b>bold text</b>.

    </AccordionItem>
    <AccordionItem title="Item 3">

      This is the third item's accordion body.

    </AccordionItem>
  </Accordion>
  ``` 
</DocTab>

## Examples 

### Single Accordion 

<DocTab>
  <div slot="preview">
    <Accordion single>
      <AccordionItem title="Item 1">
        <p>Content 1</p>
      </AccordionItem>
      <AccordionItem title="Item 2">
        <p>Content 2</p>
      </AccordionItem>
      <AccordionItem title="Item 3">
        <p>Content 3</p>
      </AccordionItem>
    </Accordion>
  </div>

  ```markdown 
  <Accordion single>
    <AccordionItem title="Item 1">
      <p>Content 1</p>
    </AccordionItem>
    <AccordionItem title="Item 2">
      <p>Content 2</p>
    </AccordionItem>
    <AccordionItem title="Item 3">
      <p>Content 3</p>
    </AccordionItem>
  </Accordion>
  ```
</DocTab>

### Overriding Styles 

Use the `class` options to override the styles on the accordion. 

<DocTab>
  <div slot='preview'>
    <Accordion class="rounded-xl bg-gray-50 px-4 mt-4">
      <AccordionItem title="Item 1" class="border-none">
        <p>Content 1</p>
      </AccordionItem>
      <AccordionItem title="Item 2" class="border-none">
        <p>Content 2</p>
      </AccordionItem>
      <AccordionItem title="Item 3" class="border-none">
        <p>Content 3</p>
      </AccordionItem>
    </Accordion>
  </div>

  ```markdown 
  <Accordion class="rounded-xl bg-gray-50 px-4 mt-4">
    <AccordionItem title="Item 1" class="border-none">
      <p>Content 1</p>
    </AccordionItem>
    <AccordionItem title="Item 2" class="border-none">
      <p>Content 2</p>
    </AccordionItem>
    <AccordionItem title="Item 3" class="border-none">
      <p>Content 3</p>
    </AccordionItem>
  </Accordion>
  ```
</DocTab>

### Title Slot  

Pass components into the accordion title by using the slot `title`. 

```growth

select 0.366 as positive, -0.366 as negative

```
<DocTab>
  <div slot="preview">
    <Accordion>
      <AccordionItem title="Item 1">
        <span slot='title'>Custom Title <Value chip data={growth} fmt=pct1 /></span>
        Content 1 
      </AccordionItem>
      <AccordionItem title="Item 2">
        <p>Content 2</p>
      </AccordionItem>
      <AccordionItem title="Item 3">
        <p>Content 3</p>
      </AccordionItem>
    </Accordion>
  </div>

  ```markdown 
  <Accordion>
    <AccordionItem title="Item 1">
      <span slot='title'>Custom Title <Value data={growth} fmt=pct1 /></span>
      Content 1 
    </AccordionItem>
    <AccordionItem title="Item 2">
      <p>Content 2</p>
    </AccordionItem>
    <AccordionItem title="Item 3">
      <p>Content 3</p>
    </AccordionItem>
  </Accordion>
  ```
</DocTab>




## Options

### Accordion

<PropListing
    name="single"
    description="When true, only a single accordian item can be open at once."
    options={['true', 'false']}
/>

<PropListing
    name="class"
>

Pass custom classes to control the styling of the accordion body. Supports [tailwind classes](https://tailwindcss.com). 

</PropListing> 


### AccordionItem

<PropListing
    name="title"
    description="The title of the accordion item. This will be displayed as the header."
    required
/>

<PropListing
    name="class"
>

Pass custom classes to control the styling of an accordion item. Supports [tailwind classes](https://tailwindcss.com). 

</PropListing> 





---
evidence/sites/docs/pages/components/grid/index.md
---
---
title: Grid
sidebar_position: 1
---

```sql orders_by_category
select order_month, count(1) as orders from needful_things.orders
group by all
```

<DocTab>
    <div slot='preview'>
        <Grid cols=2>
            <LineChart data={orders_by_category} x=order_month y=orders/>
            <BarChart data={orders_by_category} x=order_month y=orders fillColor=#00b4e0/>
            <ScatterPlot data={orders_by_category} x=order_month y=orders fillColor=#015c08/>
            <AreaChart data={orders_by_category} x=order_month y=orders fillColor=#b8645e lineColor=#b8645e/>
        </Grid>
    </div>

```svelte
<Grid cols=2>
    <LineChart data={orders_by_category} x=order_month y=orders/>
    <BarChart data={orders_by_category} x=order_month y=orders fillColor=#00b4e0/>
    <ScatterPlot data={orders_by_category} x=order_month y=orders fillColor=#015c08/>
    <AreaChart data={orders_by_category} x=order_month y=orders fillColor=#b8645e lineColor=#b8645e/>
</Grid>
```
</DocTab>

## Group Component

To include multiple items inside one grid cell, use the `Group` component to wrap the items you want to include in that cell.

For example:

<DocTab>
    <div slot='preview'>
        <Grid cols=2>
            <LineChart data={orders_by_category} x=order_month y=orders/>
        <Group>
            Some text
            <BarChart data={orders_by_category} x=order_month y=orders fillColor=#00b4e0/>
        </Group>
        </Grid>
    </div>

```html
<Grid cols=2>
    <LineChart data={orders_by_category} x=order_month y=orders/>
   <Group>
      Some text
    <BarChart data={orders_by_category} x=order_month y=orders fillColor=#00b4e0/>
   </Group>
</Grid>
```
</DocTab>


This will stack "some text" above the bar chart, rather than giving it it's own cell.

## Options

<PropListing
    name=cols
    description="Number of columns in the grid on a full size screen"
    options={['1', '2', '3', '4', '5', '6']}
    defaultValue="2"
/>
<PropListing
    name=gapSize
    description="Space between grid elements"
    options={['none', 'sm', 'md', 'lg']}
    defaultValue="md"
/>

---
evidence/sites/docs/pages/components/dimension-grid/index.md
---
---
title: Dimension Grid
sidebar_position: 1
---

Dimension grid produces an interactive grid of one dimension tables, one for each string column in the source table. The dimension grid can can also be used as an input. 

```orders

select state, category, item, channel, sales from needful_things.orders

```

```monthly_sales

select 
order_month, 
sum(sales) as sales_usd0 
from needful_things.orders 
where ${inputs.selected_dimensions}
group by all 
```

<DocTab>
    <div slot='preview'>
        <DimensionGrid data={orders} metric='sum(sales)' name=selected_dimensions /> 

        <LineChart data={monthly_sales} handleMissing=zero/> 
    </div>

````markdown
<DimensionGrid data={orders} metric='sum(sales)' name=selected_dimensions /> 

<LineChart data={monthly_sales} handleMissing=zero/>
````
</DocTab>

## Examples

### Basic Usage 

```html
<DimensionGrid data={my_query} />
```

### As an Input 

Dimension grid produces a condition for all of the selected dimensions which is suitable for referencing directly in a `where` or `filter` clause. For example `airline = 'Air Canada' and plane = '747`. Where no dimensions have been selected, DimensionGrid returns `true`. 

````html
<DimensionGrid 
    data={my_query} 
    name="selected_dimensions"
/>


```sql filtered_query
select *
from source_name.table
where ${inputs.selected_dimensions}
```
````

### Multi Select 

Using the multiple prop, Dimension grid can filter by multiple rows in the same column. Default value is false

```monthly_sales_multi

select 
order_month, 
sum(sales) as sales_usd0 
from needful_things.orders 
where ${inputs.multi_dimensions}
group by all 
```

<DocTab>
    <div slot='preview'>
    <DimensionGrid data={orders} metric='sum(sales)' name=multi_dimensions multiple/>

    <LineChart data={monthly_sales_multi} y=sales_usd0/> 
    </div>

````html
<DimensionGrid 
    data={orders} 
    metric='sum(sales)' 
    name=multi_dimensions 
    multiple
/>

<LineChart data={monthly_sales_multi} y=sales_usd0/> 


```monthly_sales_multi
select 
order_month, 
sum(sales) as sales_usd0 
from needful_things.orders
where ${inputs.multi_dimensions} 
group by all 
```
````
</DocTab>




## Options

<PropListing 
    name="data"
    required
    options="string"
>

Query name, wrapped in curly braces

</PropListing>
<PropListing 
    name="metric"
    options="string"
    default="count(*)"
>

SQL aggregate which could be applied to `data` e.g. 'sum(sales)'

</PropListing>
<PropListing 
    name="name"
    options="string"
>

Name of the dimension grid, used to reference the selected value elsewhere as `{inputs.name}`

</PropListing>
<PropListing 
    name="metricLabel"
    options="string"
>

Label for the metric

</PropListing>
<PropListing
    name="fmt"
    options="Excel-style format | built-in format | custom format"
>

Sets format for the value [(see available formats)](/core-concepts/formatting) 

</PropListing> 

<PropListing 
    name="limit"
    options="number"
    default="10"
>

Maximum number of rows to include in each table

</PropListing>
<PropListing 
    name="multiple"
    options="boolean"
    default="false"
>

Allows for multiple rows in a column to be selected and filtered

</PropListing>


---
evidence/sites/docs/pages/components/area-map/index.md
---
---
title: Area Map
sidebar_position: 1
---

<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
        />
    </div>

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
/>
```
</DocTab>

```sql la_zip_sales
select *, 'https://www.google.com/search?q=' || zip_code as link_col from la_zip_sales
where zip_code <> 90704
```


## Examples

### Custom Basemap
You can add a different basemap by passing in a basemap URL. You can find examples here: https://leaflet-extras.github.io/leaflet-providers/preview/

<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
            borderColor=#303030
            basemap={`https://tile.openstreetmap.org/{z}/{x}/{y}.png`}
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        />
    </div>
<br>

**Note:** you need to wrap the url in curly braces and backticks to avoid the curly braces in the URL being read as variables on your page

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
    basemap={`https://tile.openstreetmap.org/{z}/{x}/{y}.png`}
/>
```
</DocTab>


### Using an Online GeoJSON

```sql orders_by_state
select state, count(*) as orders
from orders
where state != 'Alaska' and state != 'Hawaii'
group by state
```

<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={orders_by_state} 
            areaCol=state
            geoJsonUrl=https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_admin_1_states_provinces.geojson
            geoId=name
            value=orders
        />
    </div>

```svelte
<AreaMap 
    data={orders_by_state} 
    areaCol=state
    geoJsonUrl=https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_admin_1_states_provinces.geojson
    geoId=name
    value=orders
/>
```
</DocTab>


### Custom Tooltip

#### `tooltipType=hover`

<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
            tooltip={[
                {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
                {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'}
            ]}
        />
    </div>

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
    tooltip={[
        {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'}
    ]}
/>
```
</DocTab>


#### With clickable link and `tooltipType=click`

<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
            tooltipType=click
            tooltip={[
                {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
                {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
                {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
            ]}
        />
    </div>

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
    tooltipType=click
    tooltip={[
        {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
        {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
        {id: 'link_col', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
    ]}
/>
```
</DocTab>



### Custom Styling


<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
            color=#fff5d9
            borderColor=#737373
            borderWidth=0.5
        />
    </div>

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
    color=#fff5d9
    borderColor=#737373
    borderWidth=0.5
/>
```
</DocTab>


### Custom Color Palette

<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
            colorPalette={['yellow','orange','red','darkred']}
        />
    </div>

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
    colorPalette={['yellow','orange','red','darkred']}
/>
```
</DocTab>



### Link Drilldown
Pass in a `link` column to enable navigation on click of the point. These can be absolute or relative URLs


<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
            link=link_col
        />
    </div>

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
    link=link_col
/>
```
</DocTab>



### Use Map as Input
Use the `name` prop to set an input name for the map - when a point is clicked, it will set the input value to that row of data

<DocTab>
    <div slot='preview'>
        <AreaMap 
            data={la_zip_sales} 
            areaCol=zip_code
            geoJsonUrl='/geo-json/ca_california_zip_codes_geo_1.min.json'
            geoId=ZCTA5CE10
            value=sales
            valueFmt=usd
            height=250
            name=my_area_map
        />
    </div>

```svelte
<AreaMap 
    data={la_zip_sales} 
    areaCol=zip_code
    geoJsonUrl='path/to/your/geoJson'
    geoId=ZCTA5CE10
    value=sales
    valueFmt=usd
    height=250
    name=my_area_map
/>
```
</DocTab>



*Click an area on the map to see the input value get updated:*

#### Selected value for `{inputs.my_area_map}`: 

<pre class="text-sm">{JSON.stringify(inputs.my_area_map, null, 2)}</pre>

#### Selected value for `{inputs.my_area_map.zip_code}`: 
  
{inputs.my_area_map.zip_code}


```filtered_areas
select * from ${la_zip_sales}
where zip_code = ${inputs.my_area_map.zip_code} OR ${inputs.my_area_map.zip_code} = true
```

#### Filtered Data
<DataTable data={filtered_areas}>  	
    <Column id=id/> 	
    <Column id=zip_code fmt=id/> 	
    <Column id=sales fmt=usd/> 	
</DataTable>

### Legends


```sql grouped_locations
SELECT 
    *, 
    CASE 
        WHEN id BETWEEN 0 AND 500 THEN 'Hotels'
        WHEN id BETWEEN 501 AND 1000 THEN 'Restaurants'
        WHEN id BETWEEN 1001 AND 1500 THEN 'Golf Courses'
        WHEN id BETWEEN 1501 AND 2000 THEN 'Shops'
        WHEN id BETWEEN 2001 AND 2500 THEN 'Bars'
        WHEN id BETWEEN 2501 AND 3000 THEN 'Entertainment'
        WHEN id BETWEEN 3001 AND 4000 THEN 'Banks'
    END AS Category
FROM la_zip_sales
WHERE zip_code <> 90704
ORDER BY 1;
```
#### Categorical Legend

<DocTab>
    <div slot='preview'>
        <AreaMap
            data={grouped_locations}
            lat=lat
            long=long
            value=Category
            geoId=ZCTA5CE10
            areaCol=zip_code
        />
    </div>

 ```svelte
<AreaMap
    data={grouped_locations}
    lat=lat
    long=long
    value=Category
    geoId=ZCTA5CE10
    areaCol=zip_code
/>
```
</DocTab>


#### Custom Colors
Set custom legend colors using the `colorPalette` prop to match the number of categories; excess categorical options will default to standard colors.

<DocTab>
    <div slot='preview'>
        <AreaMap
            data={grouped_locations}
            lat=lat
            long=long
            value=Category
            geoId=ZCTA5CE10
            areaCol=zip_code
            colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}
        />
    </div>

 ```svelte
<AreaMap
    data={grouped_locations}
    lat=lat
    long=long
    value=Category
    geoId=ZCTA5CE10
    areaCol=zip_code
    colorPalette={['#C65D47', '#5BAF7A', '#4A8EBA', '#D35B85', '#E1C16D', '#6F5B9A', '#4E8D8D']}
/>
```
</DocTab>


#### Scalar Legend

<DocTab>
    <div slot='preview'>
        <AreaMap
            data={grouped_locations}
            lat=lat
            long=long
            value=sales
            geoId=ZCTA5CE10
            areaCol=zip_code
            valueFmt=usd
        />
    </div>

```svelte
<AreaMap
    data={grouped_locations}
    lat=lat
    long=long
    value=sales
    geoId=ZCTA5CE10
    areaCol=zip_code
    valueFmt=usd
/>
```
</DocTab>


#### Custom Colors
Define scalar legend colors using the `colorPalette` prop, allowing specified colors to create a gradient based on the range of values.

<DocTab>
    <div slot='preview'>
        <AreaMap
            data={grouped_locations}
            lat=lat
            long=long
            value=sales
            geoId=ZCTA5CE10
            areaCol=zip_code
            colorPalette={['#C65D47', '#4A8EBA']}
            valueFmt=usd
        />
    </div>

```svelte
<AreaMap
    data={grouped_locations}
    lat=lat
    long=long
    value=sales
    geoId=ZCTA5CE10
    areaCol=zip_code
    colorPalette={['#C65D47', '#4A8EBA']}
    valueFmt=usd
/>
```
</DocTab>


## Required GeoJSON Data Structure
The GeoJSON data you pass to the map must be a feature collection. [See here for an example](https://gist.github.com/sgillies/1233327#file-geojson-spec-1-0-L50)


## Map Resources

```sql all_geojson_urls
select * exclude(properties)
from geojson_urls
order by scale, category, file
```

```sql useful_geojson_urls
select * 
from ${all_geojson_urls}
where category in ('political_countries', 'political_states')
or file ilike 'populated_places%'
order by scale desc, category, file
```

Below are a selection of publically available GeoJSON files that may be useful for mapping. These are from the [Natural Earth Data](https://www.naturalearthdata.com/) project, and hosted by [GeoJSON.xyz](https://geojson.xyz/).

### Country, State, and City Locations

<DataTable data={useful_geojson_urls} rows=100>
    <Column id=file/>
    <Column id=category/>
    <Column id=scale/>
    <Column id=summary/>
    <Column id=size fmt='0.0,," MB"'/>
    <Column id=url contentType=link title=URL/>
</DataTable>

<Details title="All GeoJSON Files">

<DataTable data={all_geojson_urls} rows=all compact>
    <Column id=file/>
    <Column id=category/>
    <Column id=scale/>
    <Column id=summary/>
    <Column id=size fmt='0.0,," MB"'/>
    <Column id=url contentType=link title=URL/>
</DataTable>

</Details>

## Options

### Areas
<PropListing
name="data"
required    
options="query name"
>
Query result, referenced using curly braces
</PropListing>

<PropListing
name="geoJsonUrl"
required
options="URL"
>

Path to source geoJSON data from - can be a URL (see [Map Resources](#map-resources)) or a file in your project. 

If the file is in your `static` directory in the root of your project, reference it as `geoJsonUrl="/your_file.geojson"`

</PropListing>

<PropListing
name="areaCol"
required
options="column name"
>
Column in the data that specifies the area each row belongs to.
</PropListing>

<PropListing
name="geoId"
required
options="geoJSON property name"
>
Property in the GeoJSON that uniquely identifies each feature.
</PropListing>

<PropListing
name="value"
options="column name"
>
Column that determines the value displayed for each area (used for color scale)
</PropListing>

<PropListing
name="valueFmt"
options="format string"
>
Format string for displaying the value.
</PropListing>

### Color Scale

<PropListing
name="colorPalette"
options="array of colors"
>
Array of colors used for theming the areas based on data <code></code>
</PropListing>

<PropListing
name="min"
options="number"
defaultValue="min of value column"
>
Minimum value to use for the color scale.
</PropListing>

<PropListing
name="max"
options="number"
defaultValue="max of value column"
>
Maximum value to use for the color scale.
</PropListing>

### Legend

<PropListing
name="legend"
description="Turns legend on or off"
required=false
options={["true", "false"]}
defaultValue="true"
/>
<PropListing
name="legendType"
options={['categorical', 'scalar']}
>
Appends a categorical or scalar legend to the map
</PropListing>

<PropListing
name="legendPosition"
options={['bottomLeft', 'topLeft','bottomRight', 'topRight']}
defaultValue='bottomLeft'
>
Determines the legend's position on the map, with options provided
</PropListing>

### Interactivity

<PropListing
name="link"
options="URL"
>
URL to navigate to when a area is clicked.
</PropListing>

<PropListing
name="name"
options="string"
>
Input name. Can be referenced on your page with `{inputs.my_input_name}`
</PropListing>

### Styling
<PropListing
name="color"
options="CSS color value"
>
Color for the areas. Use when you want all areas to be the same color.
</PropListing>

<PropListing
name="borderWidth"
options="pixel value"
defaultValue=0.75
>
Width of the border around each area.
</PropListing>

<PropListing
name="borderColor"
options="CSS color value"
defaultVallue="white"
>
Color of the border around each area.
</PropListing>

<PropListing
name="opacity"
options="number between 0 and 1"
defaultValue=0.8
>
Opacity of the areas.
</PropListing>

### Selected State

<PropListing
name="selectedColor"
options="CSS color value"
>
When area is selected: Color for the areas. Use when you want all areas to be the same color.
</PropListing>

<PropListing
name="selectedBorderWidth"
options="pixel value"
defaultValue=0.75
>
When area is selected: Width of the border around each area.
</PropListing>

<PropListing
name="selectedBorderColor"
options="CSS color value"
defaultVallue="white"
>
When area is selected: Color of the border around each area.
</PropListing>

<PropListing
name="selectedOpacity"
options="number between 0 and 1"
defaultValue=0.8
>
When area is selected: Opacity of the areas.
</PropListing>


### Tooltips
<PropListing
name="showTooltip"
options={['true', 'false']}
defaultValue=true
>
Whether to show tooltips
</PropListing>

<PropListing
name="tooltipType"
options={['hover', 'click']}
defaultValue='hover'
>
Determines whether tooltips are activated by hover or click.
</PropListing>

<PropListing
name="tooltipClass"
options="CSS class"
>
CSS class applied to the tooltip content. You can pass Tailwind classes into this prop to custom-style the tooltip
</PropListing>

<PropListing
name="tooltip"
options="array of objects"
>
Configuration for tooltips associated with each area. See below example for format
</PropListing>

<LineBreak/>

#### `tooltip` example:

```javascript
tooltip={[
    {id: 'zip_code', fmt: 'id', showColumnName: false, valueClass: 'text-xl font-semibold'},
    {id: 'sales', fmt: 'eur', fieldClass: 'text-[grey]', valueClass: 'text-[green]'},
    {id: 'zip_code', showColumnName: false, contentType: 'link', linkLabel: 'Click here', valueClass: 'font-bold mt-1'}
]}
```

#### All options available in `tooltip`:
- `id`: column ID
- `title`: custom string to use as title of field
- `fmt`: format to use for value
- `showColumnName`: whether to show the column name. If `false`, only the value will be shown
- `contentType`: currently can only be "link"
- `linkLabel`: text to show for a link when contentType="link"
- `formatColumnTitle`: whether to automatically uppercase the first letter of the title. Only applies when `title` not passed explicitly
- `valueClass`: custom Tailwind classes to style the values
- `fieldClass`: custom Tailwind classes to style the column names



### Base Map

<PropListing
name="basemap"
options="URL"
>
URL template for the basemap tiles.
</PropListing>

<PropListing
name="attribution"
options="text"
>
Attribution text to display on the map (e.g., "© OpenStreetMap contributors").
</PropListing>

<PropListing
name="title"
options="text"
>
Optional title displayed above the map.
</PropListing>

<PropListing
name="startingLat"
options="latitude coordinate"
>
Starting latitude for the map center.
</PropListing>

<PropListing
name="startingLong"
options="longitude coordinate"
>
Starting longitude for the map center.
</PropListing>

<PropListing
name="startingZoom"
options="number (1 to 18)"
>
Initial zoom level of the map.
</PropListing>

<PropListing
name="height"
options="pixel value"
defaultValue="300"
>
Height of the map in pixels.
</PropListing>

---
evidence/sites/docs/pages/components/line-chart/index.md
---
---
title: Line Chart
sidebar_position: 1
---

```sql orders_by_month
select order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders
group by all
```

```sql orders_by_category
select category, order_month as month, sum(sales) as sales_usd0k, count(1) as orders from needful_things.orders
group by all
```

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y=sales_usd0k 
            yAxisTitle="Sales per Month"
        />
    </div>

```svelte
<LineChart 
    data={orders_by_month}
    x=month
    y=sales_usd0k 
    yAxisTitle="Sales per Month"
/>
```
</DocTab>

## Examples

### Line

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y=sales_usd0k 
            yAxisTitle="Sales per Month"
            title="Monthly Sales"
            subtitle="Includes all categories"
        />
    </div>

```svelte
<LineChart 
    data={orders_by_month}
    x=month
    y=sales_usd0k 
    yAxisTitle="Sales per Month"
    title="Monthly Sales"
    subtitle="Includes all categories"
/>
```
</DocTab>


### Multi-Series Line

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_category}
            x=month
            y=sales_usd0k 
            yAxisTitle="Sales per Month"
            series=category
        />
    </div>

```markdown
<LineChart 
    data={orders_by_category}
    x=month
    y=sales_usd0k 
    yAxisTitle="Sales per Month"
    series=category
/>
```
</DocTab>


### Multi-Series Line with Steps

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_category}
            x=month
            y=sales_usd0k 
            yAxisTitle="Sales per Month"
            series=category
            step=true
        />
    </div>

```svelte
<LineChart 
    data={orders_by_category}
    x=month
    y=sales_usd0k 
    yAxisTitle="Sales per Month"
    series=category
    step=true
/>
```
</DocTab>

### Multiple y Columns

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y={['sales_usd0k','orders']} 
            yAxisTitle="Sales per Month"
        />
    </div>

```svelte
<LineChart 
    data={orders_by_month}
    x=month
    y={['sales_usd0k','orders']} 
    yAxisTitle="Sales per Month"
/>
```
</DocTab>

### Secondary y Axis

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y=sales_usd0k
            y2=orders
            yAxisTitle="Sales per Month"
        />
    </div>

```markdown
<LineChart 
    data={orders_by_month}
    x=month
    y=sales_usd0k
    y2=orders
    yAxisTitle="Sales per Month"
/>
```
</DocTab>


### Secondary Axis with Bar

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y=sales_usd0k
            y2=orders
            y2SeriesType=bar
            yAxisTitle="Sales per Month"
        />
    </div>

```markdown
<LineChart 
    data={orders_by_month}
    x=month
    y=sales_usd0k
    y2=orders
    y2SeriesType=bar
    yAxisTitle="Sales per Month"
/>
```
</DocTab>

### Value Labels

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y=sales_usd0k 
            yAxisTitle="Sales per Month"
            labels=true
        />
    </div>

```markdown
<LineChart 
    data={orders_by_month}
    x=month
    y=sales_usd0k 
    yAxisTitle="Sales per Month"
    labels=true
/>
```
</DocTab>

### Custom Color Palette

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_category}
            x=month
            y=sales_usd0k 
            yAxisTitle="Sales per Month"
            series=category
            colorPalette={
                [
                '#cf0d06',
                '#eb5752',
                '#e88a87',
                '#fcdad9',
                ]
            }
        />
    </div>

```markdown
<LineChart 
    data={orders_by_category}
    x=month
    y=sales_usd0k 
    yAxisTitle="Sales per Month"
    series=category
    colorPalette={
        [
        '#cf0d06',
        '#eb5752',
        '#e88a87',
        '#fcdad9',
        ]
    }
/>
```
</DocTab>

### Markers

#### Default

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y=sales_usd0k 
            markers=true
        />
    </div>

```svelte
<LineChart 
    data={orders_by_month}
    x=month
    y=sales_usd0k
    markers=true 
/>
```
</DocTab>

#### `markerShape=emptyCircle`

<DocTab>
    <div slot='preview'>
        <LineChart 
            data={orders_by_month}
            x=month
            y=sales_usd0k 
            markers=true
            markerShape=emptyCircle
        />
    </div>

```svelte
<LineChart 
    data={orders_by_month}
    x=month
    y=sales_usd0k 
    markers=true
    markerShape=emptyCircle
/>
```
</DocTab>

## Options

### Data

<PropListing
    name=data
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing
    name=x
    description="Column to use for the x-axis of the chart"
    required=true
    options="column name"
/>
<PropListing
    name=y
    description="Column(s) to use for the y-axis of the chart"
    required=true
    options="column name | array of column names"
/>
<PropListing
    name=y2
    description="Column(s) to include on a secondary y-axis"
    options="column name | array of column names"
/>
<PropListing
    name=y2SeriesType
    description="Chart type to apply to the series on the y2 axis"
    options={["line", "bar", "scatter"]}
    defaultValue="line"
/>
<PropListing
    name=series
    description="Column to use as the series (groups) in a multi-series chart"
    options="column name"
/>
<PropListing
    name=sort
    description="Whether to apply default sort to your data. Default is x ascending for number and date x-axes, and y descending for category x-axes"
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name=handleMissing
    description="Treatment of missing values in the dataset"
    options={["gap", "connect", "zero"]}
    defaultValue="gap"
/>
<PropListing
    name=emptySet
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    options={["error", "warn", "pass"]}
    defaultValue="error"
/>
<PropListing
    name=emptyMessage
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    options="string"
/>

### Formatting & Styling

<PropListing
    name=xFmt
    description="Format to use for x column"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=yFmt
    description="Format to use for y column(s)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=y2Fmt
    description="Format to use for y2 column(s)"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name="seriesLabelFmt"
    description="Format to use for series label (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="-"
/>
<PropListing
    name=step
    description="Specifies whether the chart is displayed as a step line"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=stepPosition
    description="Configures the position of turn points for a step line chart"
    options={["start", "middle", "end"]}
    defaultValue="end"
/>
<PropListing
    name=lineColor
    description="Color to override default series color. Only accepts a single color"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=lineOpacity
    description="% of the full color that should be rendered, with remainder being transparent"
    options="number (0 to 1)"
    defaultValue="1"
/>
<PropListing
    name=lineType
    description="Options to show breaks in a line (dashed or dotted)"
    options={["solid", "dashed", "dotted"]}
    defaultValue="solid"
/>
<PropListing
    name=lineWidth
    description="Thickness of line (in pixels)"
    options="number"
    defaultValue="2"
/>
<PropListing
    name=markers
    description="Turn on/off markers (shapes rendered onto the points of a line)"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=markerShape
    description="Shape to use if markers=true"
    options={["circle", "emptyCircle", "rect", "triangle", "diamond"]}
    defaultValue="circle"
/>
<PropListing
    name=markerSize
    description="Size of each shape (in pixels)"
    options="number"
    defaultValue="8"
/>
<PropListing
    name=colorPalette
    description="Array of custom colours to use for the chart. E.g., <code class=markdown>{`{['#cf0d06','#eb5752','#e88a87']}`}</code>"
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
/>
<PropListing
    name=seriesColors
    description="Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal. Note the double curly braces required in the syntax `seriesColors={{"Canada": "red", "US": "blue"}}`"
    options="object with series names and assigned colors"
/>
<PropListing
    name="seriesOrder"
    description="Apply a specific order to the series in a multi-series chart."
    required=false
    options="Array of series names in the order they should be used in the chart seriesOrder={`{['series one', 'series two']}`}"
    defaultValue="default order implied by the data"
/>

<PropListing
    name=labels
    description="Show value labels"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=labelSize
    description="Font size of value labels"
    options="number"
    defaultValue="11"
/>
<PropListing
    name=labelPosition
    description="Where label will appear on your series"
    options={["above", "middle", "below"]}
    defaultValue="above"
/>
<PropListing
    name=labelColor
    description="Font color of value labels"
    options="CSS name | hexademical | RGB | HSL"
/>
<PropListing
    name=labelFmt
    description="Format to use for value labels"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=yLabelFmt
    description="Format to use for value labels for series on the y axis. Overrides any other formats"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=y2LabelFmt
    description="Format to use for value labels for series on the y2 axis. Overrides any other formats"
    options="Excel-style format | built-in format name | custom format name"
/>
<PropListing
    name=showAllLabels
    description="Allow all labels to appear on chart, including overlapping labels"
    options={["true", "false"]}
    defaultValue="false"
/>

### Axes

<PropListing
    name=yLog
    description="Whether to use a log scale for the y-axis"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=yLogBase
    description="Base to use when log scale is enabled"
    options="number"
    defaultValue="10"
/>
<PropListing
    name=xAxisTitle
    description="Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false"
    options={["true", "string", "false"]}
    defaultValue="false"
/>
<PropListing
    name=yAxisTitle
    description="Name to show beside y-axis. If 'true', formatted column name is used."
    options={["true", "string", "false"]}
    defaultValue="false"
/>
<PropListing
    name=y2AxisTitle
    description="Name to show beside y2 axis. If 'true', formatted column name is used."
    options={["true", "string", "false"]}
    defaultValue="false"
/>
<PropListing
    name=xGridlines
    description="Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=yGridlines
    description="Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)"
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name=y2Gridlines
    description="Turns on/off gridlines extending from y2-axis tick marks (horizontal lines when swapXY=false)"
    options={["true", "false"]}
    defaultValue="true" 
/>
<PropListing
    name=xAxisLabels
    description="Turns on/off value labels on the x-axis"
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name=yAxisLabels
    description="Turns on/off value labels on the y-axis"
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name=y2AxisLabels
    description="Turns on/off value labels on the y2-axis"
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name=xBaseline
    description="Turns on/off thick axis line (line appears at y=0)"
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name=yBaseline
    description="Turns on/off thick axis line (line appears directly alongside the y-axis labels)"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=y2Baseline
    description="Turns on/off thick axis line (line appears directly alongside the y2-axis labels)"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=xTickMarks
    description="Turns on/off tick marks for each of the x-axis labels"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=yTickMarks
    description="Turns on/off tick marks for each of the y-axis labels"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=y2TickMarks
    description="Turns on/off tick marks for each of the y2-axis labels"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=yMin
    description="Starting value for the y-axis"
    options="number"
/>
<PropListing
    name=yMax
    description="Maximum value for the y-axis"
    options="number"
/>
<PropListing
    name=yScale
    description="Whether to scale the y-axis to fit your data. `yMin` and `yMax` take precedence over `yScale`"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name=y2Min
    description="Starting value for the y2-axis"
    options="number"
/>
<PropListing
    name=y2Max
    description="Maximum value for the y2-axis"
    options="number"
/>
<PropListing
    name=y2Scale
    description="Whether to scale the y-axis to fit your data. `y2Min` and `y2Max` take precedence over `y2Scale`"
    options={["true", "false"]}
    defaultValue="false"
/>

### Chart

<PropListing
    name=title
    description="Chart title. Appears at top left of chart."
    options="string"
/>
<PropListing
    name=subtitle
    description="Chart subtitle. Appears just under title."
    options="string"
/>
<PropListing
    name=legend
    description="Turn legend on or off. Legend appears at top center of chart."
    options={["true", "false"]}
    defaultValue="true for multiple series"
/>
<PropListing
    name=chartAreaHeight
    description="Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX."
    options="number"
    defaultValue="180"
/>
<PropListing
    name=renderer
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    options={["canvas", "svg"]}
    defaultValue="canvas"
/>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>

### Custom Echarts Options

<PropListing
    name=echartsOptions
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleOption:'exampleValue'}}`}"
/>
<PropListing
    name=seriesOptions
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
/>
<PropListing
    name=printEchartsConfig
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    options={['true', 'false']}
    defaultValue="false"
/>

### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>


## Annotations

Line charts can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

```html
<LineChart data="{sales_data}" x="date" y="sales">
	<ReferenceLine data="{target_data}" y="target" label="name" />
	<ReferenceArea xMin="2020-03-14" xMax="2020-05-01" />
</LineChart>
```


---
evidence/sites/docs/pages/components/area-chart/index.md
---
---
title: 'Area Chart'
sidebar_position: 1
queries:
- orders_by_month.sql
- orders_by_category_2021.sql
---

<DocTab>
    <div slot='preview'>
        <AreaChart 
            data={orders_by_month}
            x=month
            y=sales
        />
    </div>

```markdown
<AreaChart 
    data={orders_by_month}
    x=month
    y=sales
/>
```
</DocTab>

## Examples

### Area

<DocTab>
    <div slot='preview'>
        <AreaChart 
            data={orders_by_month}
            x=month
            y=sales
        />
    </div>

```markdown
<AreaChart 
    data={orders_by_month}
    x=month
    y=sales
/>
```
</DocTab>



### Stacked

<DocTab>
    <div slot='preview'>
        <AreaChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            series=category
        />
    </div>

```markdown
<AreaChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    series=category
/>
```
</DocTab>


### 100% Stacked

<DocTab>
    <div slot='preview'>
        <AreaChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            series=category
            type=stacked100
        />
    </div>

```markdown
<AreaChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    series=category
    type=stacked100
/>
```
</DocTab>


### Stepped Line

<DocTab>
    <div slot='preview'>
        <AreaChart 
            data={orders_by_category_2021}
            x=month
            y=sales
            series=category
            step=true
        />
    </div>

```markdown
<AreaChart 
    data={orders_by_category_2021}
    x=month
    y=sales
    series=category
    step=true
/>
```
</DocTab>


### Y-Axis Formatting

<DocTab>
    <div slot='preview'>
        <AreaChart 
            data={orders_by_month}
            x=month
            y=sales
            yFmt=usd0
        />
    </div>

```markdown
<AreaChart 
    data={orders_by_month}
    x=month
    y=sales
    yFmt=usd0
/>
```
</DocTab>


### Labels

<DocTab>
    <div slot='preview'>
        <AreaChart 
            data={orders_by_month}
            x=month
            y=sales
            labels=true
            labelFmt=usd1k
        />
    </div>

```markdown
<AreaChart 
    data={orders_by_month}
    x=month
    y=sales
    labels=true
    labelFmt=usd0k
/>
```
</DocTab>


## Options

### Data

<PropListing
    name="data"
    description="Query name, wrapped in curly braces"
    required=true
    options="query name"
/>
<PropListing
    name="x"
    description="Column to use for the x-axis of the chart"
    required=true
    options="column name"
    defaultValue="First column"
/>
<PropListing
    name="y"
    description="Column(s) to use for the y-axis of the chart"
    required=true
    options="column name | array of column names"
    defaultValue="Any non-assigned numeric columns"
/>
<PropListing
    name="series"
    description="Column to use as the series (groups) in a multi-series chart"
    required=false
    options="column name"
    defaultValue="-"
/>
<PropListing
    name="sort"
    description="Whether to apply default sort to your data. Default sort is x ascending for number and date x-axes, and y descending for category x-axes"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="type"
    description="Grouping method to use for multi-series charts"
    required=false
    options={["stacked", "stacked100"]}
    defaultValue="stacked"
/>
<PropListing
    name="handleMissing"
    description="Treatment of missing values in the dataset"
    required=false
    options={["gap", "connect", "zero"]}
    defaultValue="gap (single series) | zero (multi-series)"
/>
<PropListing
    name="emptySet"
    description="Sets behaviour for empty datasets. Can throw an error, a warning, or allow empty. When set to 'error', empty datasets will block builds in `build:strict`. Note this only applies to initial page load - empty datasets caused by input component changes (dropdowns, etc.) are allowed."
    required=false
    options={["error", "warn", "pass"]}
    defaultValue="error"
/>
<PropListing
    name="emptyMessage"
    description="Text to display when an empty dataset is received - only applies when `emptySet` is 'warn' or 'pass', or when the empty dataset is a result of an input component change (dropdowns, etc.)."
    required=false
    options="string"
    defaultValue="No records"
/>

### Formatting & Styling

<PropListing
    name="xFmt"
    description="Format to use for x column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="-"
/>
<PropListing
    name="yFmt"
    description="Format to use for y column (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="-"
/>
<PropListing
    name="seriesLabelFmt"
    description="Format to use for series label (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="-"
/>
<PropListing
    name="step"
    description="Specifies whether the chart is displayed as a step line."
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name="stepPosition"
    description="Configures the position of turn points for a step line chart."
    required=false
    options={["start", "middle", "end"]}
    defaultValue="end"
/>
<PropListing
    name="fillColor"
    description="Color to override default series color. Only accepts a single color."
    required=false
    options="CSS name | hexademical | RGB | HSL"
    defaultValue="-"
/>
<PropListing
    name="lineColor"
    description="Color to override default line color. Only accepts a single color."
    required=false
    options="CSS name | hexademical | RGB | HSL"
    defaultValue="-"
/>
<PropListing
    name="fillOpacity"
    description="% of the full color that should be rendered, with remainder being transparent"
    required=false
    options="number (0 to 1)"
    defaultValue="0.7"
/>
<PropListing
    name="line"
    description="Show line on top of the area"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="colorPalette"
    description="Array of custom colours to use for the chart E.g., ['#cf0d06','#eb5752','#e88a87'] Note that the array must be surrounded by curly braces."
    required=false
    options="array of color strings (CSS name | hexademical | RGB | HSL)"
    defaultValue="built-in color palette"
/>
<PropListing
    name="seriesColors"
    description="Apply a specific color to each series in your chart. Unspecified series will receive colors from the built-in palette as normal. Note the double curly braces required in the syntax"
    required=false
    options="object with series names and assigned colors seriesColors={`{{'Canada': 'red', 'US': 'blue'}}`}"
    defaultValue="colors applied by order of series in data"
/>
<PropListing
    name="seriesOrder"
    description="Apply a specific order to the series in a multi-series chart."
    required=false
    options="Array of series names in the order they should be used in the chart seriesOrder={`{['series one', 'series two']}`}"
    defaultValue="default order implied by the data"
/>

### Value Labels

<PropListing
    name="labels"
    description="Show value labels"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name="labelSize"
    description="Font size of value labels"
    required=false
    options="number"
    defaultValue="11"
/>
<PropListing
    name="labelPosition"
    description="Where label will appear on your series"
    required=false
    options={["above", "middle", "below"]}
    defaultValue="above"
/>
<PropListing
    name="labelColor"
    description="Font color of value labels"
    required=false
    options="CSS name | hexademical | RGB | HSL"
    defaultValue="Automatic based on color contrast of background"
/>
<PropListing
    name="labelFmt"
    description="Format to use for value labels (<a class=markdown href='/core-concepts/formatting'>see available formats<a/>)"
    required=false
    options="Excel-style format | built-in format name | custom format name"
    defaultValue="same as y column"
/>
<PropListing
    name="showAllLabels"
    description="Allow all labels to appear on chart, including overlapping labels"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>


### Axes

<PropListing
    name="yLog"
    description="Whether to use a log scale for the y-axis"
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name="yLogBase"
    description="Base to use when log scale is enabled"
    options="number"
    defaultValue="10"
/>
<PropListing
    name="xAxisTitle"
    description="Name to show under x-axis. If 'true', formatted column name is used. Only works with swapXY=false"
    options={["true", "string", "false"]}
    defaultValue="false"
/>
<PropListing
    name="yAxisTitle"
    description="Name to show beside y-axis. If 'true', formatted column name is used."
    required=false
    options={["true", "string", "false"]}
    defaultValue="false"
/>
<PropListing
    name="xGridlines"
    description="Turns on/off gridlines extending from x-axis tick marks (vertical lines when swapXY=false)"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name="yGridlines"
    description="Turns on/off gridlines extending from y-axis tick marks (horizontal lines when swapXY=false)"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="xAxisLabels"
    description="Turns on/off value labels on the x-axis"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="yAxisLabels"
    description="Turns on/off value labels on the y-axis"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="xBaseline"
    description="Turns on/off thick axis line (line appears at y=0)"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="yBaseline"
    description="Turns on/off thick axis line (line appears directly alongside the y-axis labels)"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name="xTickMarks"
    description="Turns on/off tick marks for each of the x-axis labels"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name="yTickMarks"
    description="Turns on/off tick marks for each of the y-axis labels"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>
<PropListing
    name="yMin"
    description="Starting value for the y-axis"
    required=false
    options="number"
    defaultValue="-"
/>
<PropListing
    name="yMax"
    description="Maximum value for the y-axis"
    required=false
    options="number"
    defaultValue="-"
/>
<PropListing
    name="yScale"
    description="Whether to scale the y-axis to fit your data. `yMin` and `yMax` take precedence over `yScale`"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>

### Chart

<PropListing
    name="title"
    description="Chart title. Appears at top left of chart."
    required=false
    options="string"
    defaultValue="-"
/>
<PropListing
    name="subtitle"
    description="Chart subtitle. Appears just under title."
    required=false
    options="string"
    defaultValue="-"
/>
<PropListing
    name="legend"
    description="Turns legend on or off. Legend appears at top center of chart."
    required=false
    options={["true", "false"]}
    defaultValue="true for multiple series"
/>
<PropListing
    name="chartAreaHeight"
    description="Minimum height of the chart area (excl. header and footer) in pixels. Adjusting the height affects all viewport sizes and may impact the mobile UX."
    required=false
    options="number"
    defaultValue="180"
/>
<PropListing
    name="renderer"
    description="Which chart renderer type (canvas or SVG) to use. See ECharts' <a href='https://echarts.apache.org/handbook/en/best-practices/canvas-vs-svg/' class=markdown>documentation on renderers</a>."
    required=false
    options={["canvas", "svg"]}
    defaultValue="canvas"
/>
<PropListing
    name="downloadableData"
    description="Whether to show the download button to allow users to download the data"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
<PropListing
    name="downloadableImage"
    description="Whether to show the button to allow users to save the chart as an image"
    required=false
    options={["true", "false"]}
    defaultValue="true"
/>
    


### Custom Echarts Options

<PropListing
    name="echartsOptions"
    description="Custom Echarts options to override the default options. See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    required=false
    options="{`{{exampleOption:'exampleValue'}}`}"
    defaultValue="-"
/>
<PropListing
    name="seriesOptions"
    description="Custom Echarts options to override the default options for all series in the chart. This loops through the series to apply the settings rather than having to specify every series manually using `echartsOptions` See <a href='/components/echarts-options/' class=markdown>reference page</a> for available options."
    required=false
    options="{`{{exampleSeriesOption:'exampleValue'}}`}"
    defaultValue="-"
/>
<PropListing
    name="printEchartsConfig"
    description="Helper prop for custom chart development - inserts a code block with the current echarts config onto the page so you can see the options used and debug your custom options"
    required=false
    options={["true", "false"]}
    defaultValue="false"
/>


### Interactivity

<PropListing
    name=connectGroup
    description="Group name to connect this chart to other charts for synchronized tooltip hovering. Charts with the same `connectGroup` name will become connected"
/>

## Annotations

Area charts can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

```html
<AreaChart data={sales_data} x=date y=sales>
	<ReferenceLine data={target_data} y=target label=name />
	<ReferenceArea xMin='2020-03-14' xMax='2020-05-01' />
</AreaChart>
```


---
evidence/sites/docs/pages/components/date-range/index.md
---
---
title: Date Range
sidebar_position: 1
queries: 
- orders_by_day.sql
---

Creates a date picker that can be used to filter a query.

To see how to filter a query using an input component, see [Filters](/core-concepts/filters).

<DocTab>
    <div slot='preview'>
        <DateRange
            name=date_range_name
            data={orders_by_day}
            dates=day
        />

        From {inputs.date_range_name.start} to {inputs.date_range_name.end}
    </div>

````markdown
<DateRange
    name=date_range_name
    data={orders_by_day}
    dates=day
/>

From {inputs.date_range_name.start} to {inputs.date_range_name.end}
````
</DocTab>

## Examples

### Using Date Range from a Query

<DocTab>
    <div slot='preview'>
        <DateRange
            name=date_range_from_query
            data={orders_by_day}
            dates=day
        />

        From {inputs.date_range_from_query.start} to {inputs.date_range_from_query.end}
    </div>

````markdown
<DateRange
    name=date_range_from_query
    data={orders_by_day}
    dates=day
/>

From {inputs.date_range_from_query.start} to {inputs.date_range_from_query.end}
````
</DocTab>

### Manually Specifying a Range

<DocTab>
    <div slot='preview'>
        <DateRange
            name=manual_date_range
            start=2019-01-01
            end=2019-12-31
        />
    </div>

```markdown
<DateRange
    name=manual_date_range
    start=2019-01-01
    end=2019-12-31
/>
```
</DocTab>

### With a Title

<DocTab>
    <div slot='preview'>
        <DateRange
            name=date_range_with_title
            data={orders_by_day}
            dates=day
            title="Select a Date Range"
        />
    </div>

```markdown
<DateRange
    name=date_range_with_title
    data={orders_by_day}
    dates=day
    title="Select a Date Range"
/>
```
</DocTab>

### Visible During Print / Export

<DocTab>
    <div slot='preview'>
        <DateRange
            name=date_range_visible_during_print
            data={orders_by_day}
            dates=day
            hideDuringPrint={false}
        />
    </div>

````markdown
<DateRange
    name=date_range_visible_during_print
    data={orders_by_day}
    dates=day
    hideDuringPrint={false}
/>
````
</DocTab>

### Filtering a Query

```sql filtered_query
select 
    *
from ${orders_by_day}
where day between '${inputs.range_filtering_a_query.start}' and '${inputs.range_filtering_a_query.end}'
```

<DocTab>
    <div slot='preview'>
        <DateRange
            name=range_filtering_a_query
            data={orders_by_day}
            dates=day
        />

        <LineChart
            data={filtered_query}
            x=day
            y=sales
        />
    </div>

````markdown
<DateRange
    name=range_filtering_a_query
    data={orders_by_day}
    dates=day
/>

```sql filtered_query
select 
    *
from ${orders_by_day}
where day between '${inputs.range_filtering_a_query.start}' and '${inputs.range_filtering_a_query.end}'
```

<LineChart
    data={filtered_query}
    x=day
    y=sales
/>
````
</DocTab>

### Customizing Single Preset Ranges

<DocTab>
    <div slot='preview'>
        <DateRange presetRanges={'Last 7 Days'}/>
    </div>

```svelte
<DateRange
    name=name_of_date_range
    presetRanges={'Last 7 Days'}
/>
```
</DocTab>

### Customizing Multiple Preset Ranges

<DocTab>
    <div slot='preview'>
        <DateRange presetRanges={['Last 7 Days', 'Last 3 Months', 'Year to Date', 'All Time']}/>
    </div>

````svelte
<DateRange
    name=name_of_date_range
    presetRanges={['Last 7 Days', 'Last 3 Months', 'Year to Date', 'All Time']}
/>
````
</DocTab>

### Default Value for Preset Ranges

<DocTab>
    <div slot='preview'>
        <DateRange defaultValue={'Last 7 Days'}/>
    </div>

````svelte
<DateRange
    name=name_of_date_range
    defaultValue={'Last 7 Days'}
/>
````
</DocTab>

## Options

<PropListing 
    name="name"
    description="Name of the DateRange, used to reference the selected values elsewhere as {`{inputs.name.start`} or {`inputs.name.end`}"
    required=true
    options="string"
/>
<PropListing 
    name="data"
    description="Query name, wrapped in curly braces"
    options="query name"
/>
<PropListing 
    name="dates"
    description="Column name from the query containing date range to span"
    options="column name"
/>
<PropListing 
    name="start"
    description="A manually specified start date to use for the range"
    options="string formatted YYYY-MM-DD"
/>
<PropListing 
    name="end"
    description="A manually specified end date to use for the range"
    options="string formatted YYYY-MM-DD"
/>
<PropListing 
    name="title"
    options="string"
>

Title to display in the Date Range component

</PropListing>
<PropListing 
    name="presetRanges"
    options= "string | array of values e.g. {`{['Last 7 Days', 'Last 30 Days']}`}"
    default=undefined
>

Customize "Select a Range" drop down, by including present range options. **Range options**: `'Last 7 Days'` `'Last 30 Days'` `'Last 90 Days'` `'Last 3 Months'` `'Last 6 Months'` `'Last 12 Months'` `'Last Month'` `'Last Year'` `'Month to Date'` `'Year to Date'` `'All Time'`

</PropListing>
<PropListing 
    name="defaultValue"
    options= "string e.g. {'Last 7 Days'} or {'Last 6 Months'}"
    default=undefined
>


Accepts preset in string format to apply default value in Date Range picker. **Range options**: `'Last 7 Days'` `'Last 30 Days'` `'Last 90 Days'` `'Last 3 Months'` `'Last 6 Months'` `'Last 12 Months'` `'Last Month'` `'Last Year'` `'Month to Date'` `'Year to Date'` `'All Time'`

</PropListing>
<PropListing 
    name="hideDuringPrint"
    description="Hide the component when the report is printed"
    options={["true", "false"]}
    default="true"
/>


---
evidence/sites/docs/pages/motivation/index.md
---
---
sidebar_position: 2
title: Motivation
description: It's still too difficult to build high quality data products. We give you the tools to deliver production-quality data products that feel more like the New York Times' data journalism than a drag-and-drop dashboard.
og:
  image: /img/how-it-works.png
---

We think it's still too difficult to build high quality data products. Businesses are stuck with BI software that delivers slow and clunky outputs, and analysts are stuck manually configuring reports.

Our mission is to give you the tools to deliver production-quality data products that look and feel more like the New York Times' data journalism than a drag-and-drop dashboard.

Evidence combines the best of modern web frameworks with the best parts of BI:

- **Code-driven workflows:** Use your IDE, version control, and CI/CD tools
- **First-class text support:** Add context, explanation and insight to your reports
- **Programmatic features:** Use loops, conditionals, and templated pages to generate content from data
- **High performance:** Evidence apps are fast, reliable, and scalable
- **Lightweight setup:** Install locally and start building reports in just a few minutes

To get started, [install Evidence](/install-evidence).


---
evidence/sites/docs/pages/core-concepts/index.md
---
---
title: "Core Concepts"
sidebar_position: 1
sidebar_link: false
---

---
evidence/sites/docs/pages/core-concepts/filters/index.md
---
---
title: Filters
sidebar_position: 9
description: Filters dynamically change what data is returned by a query. Filters take the input that a user provides via a component, and use it to change the query.
---

Filters dynamically change what data is returned by a query. Filters take the input that a user provides via a component, and use it to change the query.

The below example uses the Evidence [`<Dropdown/>`](/components/dropdown) component. 

## Examples

### Filtering a query with a dropdown

![Filtering a Query](/img/filters-queries.png)

````markdown
```sql unique_items
select 
    item
from needful_things.orders
group by 1
```

<Dropdown
    name=selected_item
    data={unique_items}
    value=item
/>

```sql orders_by_month
select
    date_trunc('month', order_date) as month,
    sum(sales) as sales_usd
from needful_things.orders
where item = '${inputs.selected_item.value}'
group by 1
```

<BarChart
    data={orders_by_month}
    x=month
    y=sales_usd
/>
````


## Filtering a query with a default value

![Filtering a Query](/img/filters-default.png)

The `%` character can be used as a wildcard in SQL. It will return all items when the user selects "All Items" from this dropdown.

Note also the use of the `like` operator in the `where` clause.

````markdown
```sql items
select 
    item
from needful_things.orders
group by 1
```

<Dropdown
    name=selected_item
    data={unique_items}
    value=item
>
    <DropdownOption value="%" valueLabel="All Items"/>
</Dropdown>

```sql orders_by_month
select
    date_trunc('month', order_date) as month,
    sum(sales) as sales_usd
from needful_things.orders
where item like '${inputs.selected_item.value}'
group by 1
```

<BarChart
    data={orders_by_month}
    x=month
    y=sales_usd
/>
````

---
evidence/sites/docs/pages/core-concepts/query-functions/index.md
---
---
title: Query Functions
sidebar_position: 11
description: Query functions allow you to operate on query results with SQL-like syntax.
---

```sql orders
SELECT id, order_datetime, first_name, last_name, sales, category, item FROM orders
```


Query functions allow you to operate on query results with SQL-like syntax.


<Alert status="warning">

**Warning** 

Query functions are experimental and may change in the future

</Alert>

The supported query functions are:

- [``.where()``](#where)
- [`.groupBy()`](#groupby)
- [`.limit()`](#limit)
- [`.offset()`](#offset)
- [`.agg()`](#agg)


## Where
``.where(`sqlStatement`)``

Filters rows in the query based on the provided condition.

```markdown
<DataTable data={orders.where(`sales > 100`)} />
```

#### Parameters

<PropListing
    name="sqlStatement"
    description="A SQL-like condition to filter rows, must be wrapped in backticks."
    required
/>

### Iterating through a query

````markdown
```sql categories
SELECT DISTINCT category FROM orders
```

```sql orders_by_category
SELECT 
    category,
    item,
    sum(sales) as total_sales
FROM orders 
group by all
```

{#each categories as category}

    <BarChart data={orders_by_category.where(`category = '${category}'`)} />

{/each}
````

```sql categories
SELECT DISTINCT category FROM orders
```

```sql orders_by_category
SELECT 
    category,
    item,
    sum(sales) as total_sales
FROM orders 
group by all
```

<Details title='Example Output'>

{#each categories as category}

    <BarChart 
        data={orders_by_category.where(`category = '${category.category}'`)} 
        x="item"
        y="total_sales"
        title={`${category.category} Sales`}
    />

{/each}

</Details>

## GroupBy
``.groupBy([columns], withRowCount = true)``

Groups rows by the specified columns and optionally includes a row count.

```markdown
<DataTable data={orders.groupBy(["category", "item"])} />
```

#### Parameters

<PropListing
    name="columns"
    description="The columns to group by."
    required
/>

<PropListing
    name="withRowCount"
    description="Whether to include a `rows` column indicating the count of rows in each group."
/>

## Limit
``.limit(limit)``

Limits the number of rows returned by the query.

```markdown
<DataTable data={orders.limit(5)} />
```

#### Parameters

<PropListing
    name="limit"
    description="Maximum number of rows."
    required
/>


## Offset
``.offset(offset)``

Skips a specified number of rows in the query result.


```markdown
<DataTable data={orders.offset(20)} />
```

#### Parameters

<PropListing
    name="offset"
    description="Number of rows to skip."
    required
/>

## Agg
``.agg({aggObj})``

Adds aggregation operations to the query (e.g., `sum`, `avg`, `min`, `max`, `median`). Used in conjunction with [`groupBy`](#groupby).


```markdown
<DataTable 
    data={orders.groupBy(["category", "item"]).agg({sum: "sales"})}
/>
```

#### Parameters

<PropListing
    name="aggObj"
    required    
>

    Configuration object where keys are aggregation functions (`sum`, `avg`, `min`, `max`, `median`) and values are column specifications.

</PropListing>

---
evidence/sites/docs/pages/core-concepts/data-sources/index.md
---
---
sidebar_position: 3
title: Data Sources
description: Connect a data source in order to run queries.
---

## Overview of Data Sources

Evidence extracts all data sources into a common storage format (called Parquet) to enable querying across multiple data sources using SQL.

- To query against your data sources, you first need to extract the data into Parquet, using `npm run sources`
- Supported sources including SQL databases, flat data files (CSV etc), and non-SQL data sources (e.g. APIs)

![Universal SQL Data Source Architecture](/img/usql-architecture.png)

More information about the architecture design can be found in [this article](https://evidence.dev/blog/why-we-built-usql).


## Connect your Data Sources 

To connect your local development environment to a database:

1. Run your evidence app with `npm run dev`
1. Navigate to [localhost:3000/settings](http://localhost:3000/settings)
1. Select your data source, name it, and enter required credentials
1. (If required) Open the `connections.yaml` file inside `/sources/[source_name]` and add any additional configuration options
1. (If required) Add [source queries](#configure-source-queries) 
1. Rerun sources with `npm run sources`

Evidence will save your credentials locally, and run a test query to confirm that it can connect.

Connections to databases in production are managed via [environment variables](/reference/cli#environment-variables)

## Configure Source Queries

For SQL data sources, choose which data to extract by adding .sql files to the `/sources/[source_name]/` folder.

**N.B: These queries use the data source's native SQL dialect.**

```code
.-- sources/
   `-- my_source/
      |-- connection.yaml
      `-- my_source_query.sql
```

Each of these .sql files will create a table that can be queried in Evidence as `[my_source].[my_source_query]`.

<Alert status=info>

**Non-SQL data sources**

For non-SQL data sources, configuring the data extracted is achieved in other ways. Refer to the documentation for the specific data source for details.

</Alert>

## Run Sources

You can extract data from configured sources in Evidence using  `npm run sources`. Sources will also rerun automatically if you have the dev server running and you make changes to your source queries or source configuration.

### Working with Large Sources

In dev mode, if you have large sources which take a while to run, it can be helpful to only run the sources which have changed. There are a few ways to accomplish this:

- If your dev server is running, any changes you make to source queries will only re-run the queries which have changed
- Run a modified sources command to specify the source you want to run:
   - `npm run sources -- --changed` run only the sources with changed queries
   - `npm run sources -- --sources my_source` run `my_source` only
   - `npm run sources -- --sources my_source --queries query_one,query_two` run `my_source.query_one` and `my_source.query_two` only

### Increase Process Memory

If you are working with large data sources (~1M+ rows), your `npm run sources` process may run out of memory, with an error similar to this:

```code
FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory
```

One way to circumvent this is to increase the amount of memory allocated to the process. The below command increases the memory to 4GB (the number is measured in MB), but you can set it arbitrarily up to the RAM of your machine

#### Mac OS / Linux

```code
NODE_OPTIONS="--max-old-space-size=4096" npm run sources
```

#### Windows

```code
set NODE_OPTIONS=--max-old-space-size=4096 && npm run sources
```

### Build Time Variables

You can pass variables to your source queries at build time using environment variables of the format `EVIDENCE_VAR__variable_name=value`.

`.env`
```bash
EVIDENCE_VAR__client_id=123
```

Then in your **source queries**, you can access the variable using `${}` syntax:

```sql
select * from customers
where client_id = ${client_id}
```

This will interpolate the value of `client_id` into the query:

```sql
select * from customers
where client_id = 123
```

Note that these variables are only accessible in source queries, not in file queries or queries in markdown files.



## Supported data sources

Evidence supports:

- [BigQuery](#bigquery)
- [Snowflake](#snowflake)
- [Redshift](#redshift)
- [PostgreSQL](#postgresql)
- [Timescale](#postgresql)
- [Trino](#trino)
- [Microsoft SQL Server](#microsoft-sql-server)
- [MySQL](#mysql)
- [SQLite](#sqlite)
- [DuckDB](#duckdb)
- [MotherDuck](#motherduck)
- [Databricks](#databricks)
- [Cube](#cube)
- [Google Sheets](#google-sheets)
- [CSV](#csv-files)
- [Parquet](#csv-files)
- & More

We're adding new connectors regularly. [Create a GitHub issue](https://github.com/evidence-dev/evidence/issues) or [send us a message in Slack](https://slack.evidence.dev) if you'd like to use Evidence with a database that isn't currently supported.

The source code for Evidence's connectors is available [on GitHub](https://github.com/evidence-dev/evidence/tree/main/packages)


## Data source specific info

All databases can be connected via the UI settings page as described above. Where relevant, additional information is provided below.

### BigQuery

Evidence supports connecting to Google BigQuery by using the gcloud CLI, a [service account](https://cloud.google.com/iam/docs/service-accounts) and a JSON key, or an OAuth access token.

#### Logging in with the gcloud CLI

If you have the [gcloud CLI](https://cloud.google.com/sdk/gcloud) installed, you can log in to BigQuery using the following command:

```bash
gcloud auth application-default login
```

Evidence will use the credentials stored by the gcloud CLI to connect to BigQuery.

> *Note: Since gcloud requires browser access, this method is only available when developing locally.*

#### Create a Service Account Key

1. [Go to the Service Account Page](https://console.cloud.google.com/projectselector/iam-admin/serviceaccounts/create?supportedpurview=project) and click on your project
2. Add a name for your service account, then click Create
3. Assign your service account a role for BigQuery (scroll down the role dropdown to find BigQuery roles).
   1. **BigQuery User** should work for most use cases.
   1. **BigQuery Data Viewer** may be required (depending on your organization's permissions settings in Google Cloud).
   1. Reach out to us if you run into issues or need help with BigQuery permissions.
4. Click Continue, then click Done. You should see a table of users.
5. Click on the email address for the service account you just created, then click the **Keys** tab
6. Click Add Key, then Create New Key, then Create
7. Google will download a JSON Key File to your computer

#### Logging in with an OAuth access token

If you have an access token but can't download the gcloud CLI on the device you're deploying on and don't want to use a service account, you can use an OAuth access token.

An OAuth access token can be generated by running the following command on a device with the gcloud CLI installed:

```bash
gcloud auth application-default print-access-token
```
> *Note: This token will expire after 1 hour.*

Now you can copy the access token and use it in your Evidence app.


### Snowflake

Evidence supports connecting to Snowflake using a [Snowflake Account](https://docs.snowflake.com/en/user-guide/api-authentication), [Key-Pair Authentication](https://docs.snowflake.com/en/user-guide/key-pair-auth.html), [Browser-Based SSO](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use#label-browser-based-sso), or [Native SSO through Okta](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-use#label-native-sso-okta).  All Snowflake column names will be converted to lowercase in Evidence.

#### Snowflake Account
The Snowflake Account authentication method uses your Snowflake username and password to authenticate. If you don't have access to these, you will need to use one of the other authentication methods.

#### Key-Pair Authentication
The Key-Pair Authentication method uses a public/private key pair to authenticate. To use this method, you will need to [generate a public/private key pair](https://docs.snowflake.com/en/user-guide/key-pair-auth.html#label-generating-a-key-pair) and upload the public key to Snowflake.

#### Browser-Based SSO
The Browser-Based SSO method uses a browser-based SSO flow to authenticate. To use this method, you will need to [connect an SSO provider](https://docs.snowflake.com/en/user-guide/admin-security-fed-auth-configure-idp) to your Snowflake account.

#### Native SSO through Okta
The Native SSO through Okta method uses Okta to authenticate. To use this method, you will need to have an Okta account with MFA disabled connected to your Snowflake account.

### Redshift
The Redshift connector uses the Postgres connector under the hood, so configuration options are similar.

### PostgreSQL
Some databases can be connected by using the Postgres connector, including Timescale.

#### SSL

To connect to a Postgres database using SSL, you may need to modify the SSL settings used. Once you have selected a PostgreSQL data connection type, you can set the SSL value as follows:
 - `false`: Don't connect using SSL (default)
 - `true`: Connect using SSL, validating the SSL certificates. Self-signed certificates will fail using this approach.
 - `no-verify`: Connect using SSL, but don't validate the certificates.

Other SSL options will require the use of a custom connection string. Evidence uses the node-postgres package to manage these connections, and the details of additional SSL options via the connection string can be found at the [package documentation](https://node-postgres.com/features/ssl).

One scenario might be a Postgres platform that issues a self-signed certificate for the database connection, but provides a CA certificate to validate that self-signed certificate. In this scenario you could use a CONNECTION STRING value as follows: 

```markdown
postgresql://{user}:{password}@{host}:{port}/{database}?sslmode=require&sslrootcert=/path/to/file/ca-certificate.crt
```

Replace the various `{properties}` as needed, and replace `/path/to/file/ca-certificate.crt` with the path and filename of your certificate.

Currently the UI does not support adding ssl with client certificates as authentication method. If you want to use this, you need to manually change your connection.yaml to:

```yaml
name: mydatabase
type: postgres
options:
  host: example.myhost.com
  port: 5432
  database: mydatabase
  ssl:
    sslmode: require
```

and your connection.options.yaml to:

```yaml
user: "USERNAME_AS_BASE64"
ssl:
  rejectUnauthorized: true
  key: "USER_KEY_AS_BASE64"
  cert: "USER_CERT_AS_BASE64"

```

Here you encode the full user key and cert file as base64 and put them in the correct options. If you do not want to verify the server certificate, for example because you have a self signed certificate, then change rejectUnauthorized to false.


### Trino

#### Supported Authentication Types

While Trino supports multiple [authentication types](https://trino.io/docs/current/security/authentication-types.html), the connector does currently only support the password based ones. Behind the scenes, the connector is using [Basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) for communicating with Trino.

#### HTTPS

To connect to a Trino installation that is accessible via HTTPS, you need to set the SSL option to `true` and the port to `443`/`8443` (unless you are using a non standard port for HTTPS, in which case you should use that instead).

#### Starburst Quickstart

[Starburst](https://www.starburst.io/), the company behind Trino, offers a SAAS solution where they run Trino for you. Once you have signed up and created a Trino cluster, you should be able to connect Evidence with the following configuration:

Host: `<YOUR_DOMAIN>-<YOUR_CLUSTER_NAME>.galaxy.starburst.io`

Port: `443`

User: `<YOUR_EMAIL>/accountadmin`

SSL: `true`

Password: The password you use to login to your Starburst account

Alternatively, you can also create a service account at `https://<YOUR_DOMAIN>.galaxy.starburst.io/service-accounts` and use this to connect.

### Microsoft SQL Server

#### Trust Server Certificate

The `trustServerCertificate` option indicates whether the channel will be encrypted while bypassing walking the certificate chain to validate trust. This option is disabled by default.

#### Encrypt

The `encrypt` option indicates whether SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed. Necessary for Azure databases.

#### Connection Timeout

The `connection_timeout` option indicates the connection timeout limit, in milliseconds. It defaults to 15000 ms.

#### Request Timeout

The `request_timeout` option indicates the time, in milliseconds, that a query can run before it is terminated. It defaults to 15000 ms.

### MySQL

#### SSL

SSL options are:

- `false` (default)
- `true`
- `Amazon RDS`
- A credentials object


### SQLite

SQLite is a local file-based database. The SQLite file should be stored in the directory `sources/[your_source_name]/`.

### DuckDB

DuckDB is a local file-based database. If using a persistent database, it should be stored in the directory `sources/[your_source_name]/`.

See the [DuckDB docs](https://duckdb.org/docs/guides/index) for more information.

### MotherDuck

[Motherduck](https://motherduck.com) is a cloud-based DuckDB database.

To connect to MotherDuck, you will need a [service token](https://motherduck.com/docs/authenticating-to-motherduck/#authentication-using-a-service-token).

### Databricks

Databricks is a cloud-based data lake. Evidence supports connecting to Databricks using a [personal access token](https://docs.databricks.com/en/dev-tools/auth.html#generate-a-token).

### Cube

Cube offers semantic layer for your data. You can connect using the [Cube SQL API](https://cube.dev/docs/product/apis-integrations/sql-api). 

Cube's API is PostgreSQL compatible, so you can use the Evidence PostgreSQL connector to connect to Cube.

You can find the credentials to connect to Cube on the BI Integrations page under the SQL API Connection tab (you may need to enable the SQL API first).

### Google Sheets

The Google Sheets data source is a plugin, you first need to [install the plugin](https://github.com/evidence-dev/datasources/tree/main/gsheets#adding-the-adapter-to-evidence).

Adding data from Google Sheets requires a a [service account](https://cloud.google.com/iam/docs/service-accounts).

To create a service account, see the [BigQuery instructions](#bigquery).

1. Create a service account, and download the JSON key file
2. Give the service account access to your Google Sheet by sharing the sheet with the service account's email address.
4. Add the JSON key file to your Evidence app via the [Settings page](http://localhost:3000/settings)
5. In the connections.yaml file, add the sheet id (which can be found in the URL of the Google Sheet, after `https://docs.google.com/spreadsheets/d/`).

```yaml
name: [your_source_name]
type: gsheets
options: {}
sheets:
   [your_workbook_name]: [your_sheet_id]
```

Query the sheet using the following syntax:

```sql
select * from [your_source_name].[your_workbook_name]_[your_tab_name]
```
  
Where `[your_tab_name]` is the name of the tab in your Google Sheet, with spaces replaced by underscores.

### CSV files

In Evidence, you can query local CSV files directly in SQL.

Get started by selecting the `CSV` connector on the Settings page in your app, naming it and then clicking "confirm changes". 

Then copy any CSV files you want to query into `sources/[your_csv_source_name]/`. Your source names and csv files can only contain letters, numbers and underscores eg `/my_source/my_csv_2024.csv`

The section below applies to both CSV and Parquet files.

#### How to Query a CSV File

Evidence looks for CSV files stored in a `sources/[your_csv_source_name]/` folder in the root of your Evidence project. You can query them using this syntax:

```sql
select * from your_csv_source_name.csv_file_name
```

#### Source Options

You can add [DuckDB source options](https://duckdb.org/docs/data/csv/overview.html) that are passed in as arguments to the `read_csv()` function. 

Ensure there are no spaces in your source options you pass, and to use double quotes when passing strings


```sql source_options
select 'header=false' as "Option String", 'Reads the first line as the first row of data' as "Outcome", 0 as row_num UNION ALL
select 'delim="|"', 'Use "|" characters as delimiters when reading the csv', 1 UNION ALL
select 'header=false,delim="|"', 'Use both of these options', 2
order by row_num
```

<DataTable data={source_options}>
    <Column id="Option String" />
    <Column id="Outcome" />
</DataTable>

## Troubleshooting

If you need help with connecting to your data, please feel free to [send us a message in Slack](https://slack.evidence.dev).


---
evidence/sites/docs/pages/core-concepts/queries/index.md
---
---
sidebar_position: 4
title: SQL Queries
description: Markdown code fences run SQL queries, and return the results as data for components.
---

## Inline Queries

Evidence runs markdown code fences as SQL queries. These queries use the [DuckDB dialect](https://duckdb.org/docs/sql/introduction).

If you have a data source called `needful_things`, you run a query against it like this:

````markdown
```sql sales_by_category
select 
  category, sum(sales) as sales
from needful_things.orders
group by 1
```
````

When you open a page in dev mode, Evidence runs all of the queries on the page. In dev mode, Evidence monitors the contents of your SQL blocks, and reloads the page as necessary to reflect any changes you've made to your queries.

You include SQL queries in your page using a markdown code fence (starting and ending with 3 backticks). Evidence requires a query name to be supplied directly after the first 3 backticks.

### Using Query Results

Reference a query in a component using `data={query_name}`

For example, if your query name was `sales_by_category`:

```markdown
<LineChart data={sales_by_category}/>
```

## Query Chaining

Reference other queries by writing the query name inside `${ }`.

For example, if you want to reference a query named `sales_by_item`, you would write `${sales_by_item}` into your SQL query, you would write:

````sql
```sql sales_by_item
select
    item,
    sum(sales) as sales
from needful_things.orders
group by 1
```

```sql average_sales
select
    avg(sales) as average_sales
from ${sales_by_item}
```
````

Below is the compiled SQL that's sent to the database for `average_sales`:

```sql
select
    avg(sales) as average_sales
from (
    select
        item,
        sum(sales) as sales
    from needful_things.orders
    group by 1
)
```

### View Compiled SQL

You can choose whether you want to see the compiled or written SQL inside the query viewer:
![compiled-written-toggle](/img/compiled-written-toggle.gif)

### Ordering and Circular References

The order that queries appear on the page doesn't matter to the SQL compiler. You can reference queries that appear before or after the query that you are authoring.

Some SQL dialects require sub-queries to be aliased, including Postgres and MySQL. E.g. `from ${sales_by_item} as sales_by_item`.

The SQL compiler detects circular and missing references. If a query includes either a circular reference or a missing reference, Evidence will display an error that looks like a syntax error in a normal SQL query. Queries with compiler errors are not sent to your database.

![circular-error-single](/img/circular-error-single.png)

## SQL File Queries

Evidence also has support for queries outside the markdown, which is especially useful when you have a query that is being used on more than one page.

### Basic Usage

To use sql file queries, you need to place them in the `queries` directory, and then reference them in your [frontmatter](/reference/markdown/#frontmatter).

An example setup could be:

```
my-evidence-project/
  pages/
    my_page.md
  queries/
    my_file_query.sql
    some_category/
        my_category_file_query.sql
```

These queries can then be used on `my_page.md` with the following [frontmatter](/reference/markdown/#frontmatter)

```yaml
---
queries:
  - q4_data: my_file_query.sql
  - q4_sales_reps: some_category/my_category_file_query.sql
---
```

In your evidence file, you can now reference `q4_data` and `q4_sales_reps` the same way you would use any other query.

Optionally, you can omit the query name, and the filename will be used instead; these queries will be available at `my_file_query` and `some_category_my_category_file_query` (note that `/` became `_`).

```yaml
---
queries:
  - my_file_query.sql
  - some_category/my_category_file_query.sql
---
```

### Advanced Usage

#### File Query Chaining

SQL file queries can [depend on other query files](/core-concepts/queries/#query-chaining), but they will all need to be referenced in the files you use them in. For example, if `my_file_query` depends on `some_category_my_category_file_query`, then you will have to have them both in your [frontmatter](/reference/markdown/#frontmatter), as shown above.

## Query Parameters

Queries can accept parameters, which might be from an input component such as a [Dropdown](/components/dropdown), or from a URL parameter on a [template page](/core-concepts/templated-pages).

````markdown
```sql sales_by_month
select
    date_trunc('month', date) as month,
    sum(sales) as sales
from needful_things.orders
where category = '${inputs.category}'
group by 1
```
````

There are two types of parameters you can use in queries:
- **Input parameters** from components: `'${inputs.parameter_name}'`
- **URL parameters** from [templated pages](/core-concepts/templated-pages): `'${params.parameter_name}'`


---
evidence/sites/docs/pages/core-concepts/formatting/index.md
---
---
sidebar_position: 6
title: 'Value Formatting'
description: 'Number and date formatting options in Evidence'
---

The easiest way to format numbers and dates in Evidence is through component props. You can pass in any of the following:
- [Excel-style format codes](#excel-format-codes) (e.g., `fmt='$#,##0.0'`)
- Evidence's [built-in formats](#built-in-formats) (e.g., `fmt=usd2k`)
- [Custom defined formats](#custom-formats)

For example, you can use the `fmt` prop to format values inside a Value component:

```html
<Value data={sales_data} column=sales fmt='$#,##0' />
```

Within charts, you can format individual columns using `xFmt` and `yFmt` (and `sizeFmt` for bubble charts):

```html
<LineChart 
    data={sales_data} 
    x=date 
    y=sales 
    xFmt="m/d"
    yFmt="eur"
/>
```

In the example above, `xFmt` is passing in an Excel-style code to format the dates and `yFmt` is referencing a built-in format ([see the full list](#built-in-formats) of supported tags below, or [create your own](#custom-formats)).

<Alert status=info>

**Date formatting**

Formatting does not apply to the date axis of a chart. For example, if you set `xFmt` to `m/d/yy`, you will only see that formatting reflected in your chart tooltips and annotations. This is to ensure that the chart axis labels have the correct spacing.

</Alert>


#### Reusable Formats
For a more reusable approach, you can use [SQL format tags](#sql-format-tags), which let you define formats within your SQL. This guarantees that your columns will be formatted in the same way wherever they are used in Evidence.

You can also create your own [custom formats](#custom-formats), which are format codes you can reuse across your project.

#### Formatting Directly in Markdown
If you need to format values outside of components, [the format function](#format-function) can be used directly. For example, when using [expressions](/core-concepts/syntax#expressions) it is not possible to use component props or format tags.

## Excel Format Codes
Evidence supports [Excel-style custom format codes](https://support.microsoft.com/en-us/office/number-format-codes-5026bbd6-04bc-48cd-bf33-80f18b4eae68), which can be passed directly to a component prop, the [format function](#format-function), or saved as a [custom format code](#custom-formats) that you want to reuse.

<Alert status=info>

**Strings inside formats codes**

Some Excel format codes include strings: use double-quotes for the string, and single-quotes to surround the whole format code. 

E.g., `fmt = '#,##0.00 "mpg"'`

</Alert>

## Built-in Formats
Evidence supports a variety of date/time, number, percentage, and currency formats. You can find the full list of formats below.

<!-- These are pasted in from the settings menu HTML, with edits -->

### Auto-Formatting

Wherever you see `auto` listed beside a format, that means Evidence will automatically format your value based on the context it is in.

For example, Evidence automatically formats large numbers into shortened versions based on the size of the median number in a column (e.g., 4,000,000 &rarr; 4M).

You can choose to handle these numbers differently by choosing a specific format code. For example, if Evidence is formatting a column as millions, but you want to see all numbers in thousands, you could use the `num0k` format, which will show all numbers in the column in thousands with 0 decimal places.

### Dates


```sql date_formats
select 'ddd' as format_name, 'ddd' as format_code, '2022-01-09 12:45' as example_input, 'Sun' as example_output, 0 as row_num union all
select 'dddd', 'dddd', '2022-01-09 12:45', 'Sunday', 1 union all
select 'mmm', 'mmm', '2022-01-09 12:45', 'Jan', 2 union all
select 'mmmm', 'mmmm', '2022-01-09 12:45', 'January', 3 union all
select 'yyyy', 'yyyy', '2022-01-09 12:45', '2022', 4 union all
select 'shortdate', 'mmm d/yy', '2022-01-09 12:45', 'Jan 9/22', 5 union all
select 'longdate', 'mmmm d, yyyy', '2022-01-09 12:45', 'January 9, 2022', 6 union all
select 'fulldate', 'dddd mmmm d, yyyy', '2022-01-09 12:45', 'Sunday January 9, 2022', 7 union all
select 'mdy', 'm/d/y', '2022-01-09 12:45', '1/9/22', 8 union all
select 'dmy', 'd/m/y', '2022-01-09 12:45', '9/1/22', 9 union all
select 'hms', 'H:MM:SS AM/PM', '2022-01-09 12:45', '11:45:03 AM', 10
order by row_num
```

<DataTable data={date_formats} rows=all>
    <Column id="format_name" />
    <Column id="format_code" />
    <Column id="example_input" align=right/>
    <Column id="example_output" align=right/>
</DataTable>


### Currencies

Supported currencies:


```sql currency_formats
select 'usd' as code, 'United States Dollar' as currency, 0 as row_num union all
select 'aud', 'Australian Dollar', 1 union all
select 'brl', 'Brazilian Real', 2 union all
select 'cad', 'Canadian Dollar', 3 union all
select 'cny', 'Renminbi', 4 union all
select 'eur', 'Euro', 5 union all
select 'gbp', 'Pound Sterling', 6 union all
select 'jpy', 'Japanese Yen', 7 union all
select 'inr', 'Indian Rupee', 8 union all
select 'krw', 'South Korean Won', 9 union all
select 'ngn', 'Nigerian Naira', 10 union all
select 'rub', 'Russian Ruble', 11 union all
select 'sek', 'Swedish Krona', 12
order by row_num
```

<DataTable data={currency_formats} rows=all>
    <Column id="code" />
    <Column id="currency" />
</DataTable>

In order to use currency tags, use the currency code, optionally appended with:

- a number indicating the number of decimal places to show (0-2)
- a letter indication the order of magnitude to show ("","k", "m", "b")

For example, the available tags for USD are:


```sql usd_formats
select 'usd' as format_name, 'auto' as format_code, 412.17 as example_input, '$412' as example_output, 0 as row_num union all
select 'usd0', '$#,##0', '7043.123', '$7,043', 1 union all
select 'usd1', '$#,##0.0', '7043.123', '$7,043.1', 2 union all
select 'usd2', '$#,##0.00', '7043.123', '$7,043.12', 3 union all
select 'usd0k', '$#,##0,"k"', '64301.12', '$64k', 4 union all
select 'usd1k', '$#,##0.0,"k"', '64301.12', '$64.3k', 5 union all
select 'usd2k', '$#,##0.00,"k"', '64301.12', '$64.30k', 6 union all
select 'usd0m', '$#,##0,,"M"', '4564301.12', '$5M', 7 union all
select 'usd1m', '$#,##0.0,,"M"', '4564301.12', '$4.6M', 8 union all
select 'usd2m', '$#,##0.00,,"M"', '4564301.12', '$4.56M', 9 union all
select 'usd0b', '$#,##0,,,"B"', '9784564301.12', '$10B', 10 union all
select 'usd1b', '$#,##0.0,,,"B"', '9784564301.12', '$9.8B', 11 union all
select 'usd2b', '$#,##0.00,,,"B"', '9784564301.12', '$9.78B', 12
order by row_num
```

<DataTable data={usd_formats} rows=all>
    <Column id="format_name" />
    <Column id="format_code" />
    <Column id="example_input" align=right/>
    <Column id="example_output" align=right/>
</DataTable>



### Numbers
The default number format (when no `fmt` is specified) automatically handles decimal places and summary units (in the same way that `usd` does for currency).

```sql number_formats
select 'num0' as format_name, '#,##0' as format_code, '11.23168' as example_input, '11' as example_output, 0 as row_num union all
select 'num1', '#,##0.0', '11.23168', '11.2', 1 union all
select 'num2', '#,##0.00', '11.23168', '11.23', 2 union all
select 'num3', '#,##0.000', '11.23168', '11.232', 3 union all
select 'num4', '#,##0.0000', '11.23168', '11.2317', 4 union all
select 'num0k', '#,##0,"k"', '64201', '64k', 5 union all
select 'num1k', '#,##0.0,"k"', '64201', '64.2k', 6 union all
select 'num2k', '#,##0.00,"k"', '64201', '64.20k', 7 union all
select 'num0m', '#,##0,,"M"', '42539483', '43M', 8 union all
select 'num1m', '#,##0.0,,"M"', '42539483', '42.5M', 9 union all
select 'num2m', '#,##0.00,,"M"', '42539483', '42.54M', 10 union all
select 'num0b', '#,##0,,,"B"', '1384937584', '1B', 11 union all
select 'num1b', '#,##0.0,,,"B"', '1384937584', '1.4B', 12 union all
select 'num2b', '#,##0.00,,,"B"', '1384937584', '1.38B', 13 union all
select 'id', '0', '921594675', '921594675', 14 union all
select 'fract', '# ?/?', '0.25', '1/4', 15 union all
select 'mult', '#,##0.0"x"', '5.32', '5.3x', 16 union all
select 'mult0', '#,##0"x"', '5.32', '5x', 17 union all
select 'mult1', '#,##0.0"x"', '5.32', '5.3x', 18 union all
select 'mult2', '#,##0.00"x"', '5.32', '5.32x', 19 union all
select 'sci', '0.00E+0', '16546.1561', '1.65E+4', 20
order by row_num
```

<DataTable data={number_formats} rows=all>
    <Column id="format_name" />
    <Column id="format_code" />
    <Column id="example_input" align=right/>
    <Column id="example_output" align=right/>
</DataTable>


### Percentages


```sql percentage_formats
select 'pct' as format_name, 'auto' as format_code, 0.731 as example_input, '73.1%' as example_output, 0 as row_num union all
select 'pct0', '#,##0%', 0.731, '73%', 1 union all
select 'pct1', '#,##0.0%', 0.731, '73.1%', 2 union all
select 'pct2', '#,##0.00%', 0.731, '73.10%', 3 union all
select 'pct3', '#,##0.000%', 0.731, '73.100%', 4
order by row_num
```

<DataTable data={percentage_formats} rows=all>
    <Column id="format_name" />
    <Column id="format_code" />
    <Column id="example_input" />
    <Column id="example_output" align=right/>
</DataTable>



## Custom Formats

Custom formats can be added in the Value Formatting Section of the Evidence Settings. 

With custom formats, you define the format you want to use (using [Excel style custom format codes](https://support.microsoft.com/en-us/office/number-format-codes-5026bbd6-04bc-48cd-bf33-80f18b4eae68)), and give the format a name (e.g., `mydate`). That format name will now be accessible in any place you can format your data in Evidence. For example:

```html
<Value data={sales_data} column=date fmt=mydate />
```


## SQL Format Tags

SQL format tags let you define formats for your columns within your SQL query. This ensures that columns are formatted in the same way wherever they are used.

A **format tag** is appended to your column name with an underscore: for example, to append the percentage format to a column named `growth`, it would be `growth_pct`.

Formatting can be configured in the Value Formatting Section of the Evidence Settings.

Format tags are case-insensitive, so `growth_pct` and `GROWTH_PCT` are equivalent.

### Title Formatting

When creating a table, Evidence formats column titles based on the name of the column and its format tag. Format tags that do not add to the meaning of the column name are not printed as part of the title. All columns are printed with proper casing.

#### Examples



```sql title_formats
select 'sales_usd' as column_name, 'Sales ($)' as formatted_title, 0 as row_num union all
select 'customer_id', 'Customer ID', 1 union all
select 'growth_pct', 'Growth', 2 union all
select 'customer_number_num2k', 'Customer Number', 3
order by row_num
```

<DataTable data={title_formats} rows=all>
    <Column id="column_name" />
    <Column id="formatted_title" />
</DataTable>




## Format Function

The format function is used to format expressions within markdown. This is useful when you cannot use a component.

The syntax is:

```javascript
{fmt(expression, formatCode)}
```

`formatCode` can be any one of the following:
- An Excel-style format code (e.g., `$#,##0.0`)
- A built-in Evidence format (e.g., `eur`)
- A custom-defined format code (see section above on custom formats)


### Example

In the below example, we return a value from a calculation. In this situtation we cannot use the `Value` component, which only accepts a single row. Instead we use the `Format` function to format the result.


````markdown
```sql sales_per_year
select
    date_part('year', order_datetime) AS year,
    sum(sales) AS total_sales
from needful_things.orders
group by year
order by year desc
```

Sales are {fmt(sales_per_year[0].total_sales - sales_per_year[1].total_sales, '+#,##0;-#,##0')} vs last year.
````


---
evidence/sites/docs/pages/core-concepts/components/index.md
---
---
sidebar_position: 5
title: Components
description: Components are used to display charts and other visual elements
---

## What are Components?

Evidence has a built in [component library](/components/all-components) to create charts and other visual elements.

Components use angle brackets (`<.../>`) to wrap the component name, like HTML syntax. Data from a query, and configuration options are passed in as properties, or "props":

```html
<BarChart
	data="{orders_by_month}"
	x="order_month"
	y="sales_usd0k"
	series="category"
	title="Sales by Category"
/>
```

<div style={{textAlign: 'center'}}>

![Category Bar Chart](/img/category-chart.png)

</div>

## Showing Values in Text

The simplest component is the `<Value/>` component. It displays a single value from a query. It can be used to put automatically updated values in text.

````markdown
```sql orders
SELECT
    '2021-01-01' AS date,
    100 AS num_orders
```

The number of orders yesterday was <Value data = {orders} column = num_orders />.
````

Above, we've passed in the query data `orders` in curly braces `{ }`, and specified the column we want to display `num_orders` in the `column` prop.

For more information on the `Value` component, see the [Value docs](/components/value).


## Charts

Our chart library has a flexible, declarative API that lets you add default chart types, or create your own.

While our library offers a lot of customizable features, we include sensible defaults that look good out of the box.

### Props and defaults

At a minimum, all charts require a data prop, but for other props Evidence has default assumptions to reduce the amount of configuration required.

**Data**

- All charts require a data prop, which should contain a query result wrapped in `{...}` (e.g., `data={query_name}`)

**x and y**

- All x-y coordinate (AKA Cartesian) charts require `x` and `y` columns to create the axes and scales for the chart
- `y` can accept multiple columns, but can only plot on a single axis at this time.
- We have built-in assumptions to make writing the chart code easier:
  - If you don't supply `x`, the first column in the dataset is assumed to be `x`
  - If you don't supply `y`, any numerical columns that you have not already assigned to the chart are assumed to be `y`

**Multiple Series**

- To plot multiple series (or groups) on your chart, you can do one of the following (or both):
  - Include a `series` column, which contains category or group names (e.g, `series=country`)
  - Include multiple `y` columns - each column will be treated as an individual series (e.g., `y={["y1", "y2"]}`)

### Annotations

Charts can include [annotations](/components/annotations) using the `ReferenceLine` and `ReferenceArea` components. These components are used within a chart component like so:

```html
<LineChart data={sales_data} x=date y=sales>
  <ReferenceLine data={target_data} y=target label=name/>
</LineChart>
```

## Custom Components

You can also build your own reusable data viz or UI components in Evidence. See [the Custom Component Guide](/components/custom-components) for more details.

---
evidence/sites/docs/pages/core-concepts/pages/index.md
---
---
sidebar_position: 2
title: Pages
description: Evidence renders markdown files into web pages.
---

Evidence renders markdown files into web pages. When developing, the markdown file `/pages/example.md` is rendered at [localhost:3000/example](http://localhost:3000/example).

Evidence instantly reloads pages when their markdown files are edited and saved.

## File Based Routing

The URL to access a page is determined by the path to the markdown file in the `/pages` directory:

- `pages/index.md` is the homepage
- `pages/weekly-sales.md` creates the `/weekly-sales` page
- `pages/marketing/attribution.md` creates the `/marketing/attribution` page

This allows you to organize your pages in a way that makes sense for your users, for example:

- by department
- by product
- by customer
- by time period

## Templated Pages

- `pages/customers/[customer].md` creates a page for each customer using the `[customer].md` template. See [templated pages](/core-concepts/templated-pages) for details.

## Frontmatter

You can include page metadata, such as a title, using [frontmatter](/reference/markdown#frontmatter).


---
evidence/sites/docs/pages/core-concepts/if-else/index.md
---
---
title: If / Else
sidebar_position: 8
description: Control what is displayed using data with conditional logic.
---

Programmatically control what is displayed using data through `{#if}` and `{:else}` blocks.

## If and Else Statements

Conditionals are useful for managing information overload, and ensuring that your reporting is consistently showing actionable information.

Conditionals allow you to show a section of your document if a condition is met. You can optionally include `{:else}` and `{:else if}` blocks inside of your `{#if}...{/if}` blocks.

```javascript
{#if condition}

Display some content.

{:else if another condition}

Another thing instead.

{:else }

Something completely different.

{/if}
```

## Example

Hide a table if it is empty.

```javascript
{#if query_name.length !== 0}

<DataTable data={query_name}>

{/if}
```

## Another Example

Imagine creating reports to encourage sales leaders "up-sell" low margin customers, but only when there were enough low-margin customers to do that work in-bulk. This could be done using a conditional.

```javascript
{#if low_margin_customers.length > 15}

The following customers are generating low margins.

Consider re-allocating an account management call block to up-sell these customers.

<DataTable data={low_margin_customers}/>

{:else }

There are fewer than fifteen low margin customers, which is not enough to fill a call block.

{/if}
```


---
evidence/sites/docs/pages/core-concepts/loops/index.md
---
---
title: Loops
sidebar_position: 7
description: Create repeating elements by looping through data.
---

Create repeating elements by looping through data with `{#each}` blocks. Note that curly braces `{...}` execute JavaScript expressions in Evidence.

## Each Loops

Loops enable you to iterate over the rows in a query result, and reference the row using an alias of your choosing. They are similar to for loops in Python.

```markdown
{#each query_name as alias}

{alias.column_name}

{/each}
```

If you have more content than you would like to loop over on a single page, consider using a [templated page](/core-concepts/templated-pages).

## Example

Imagine you were creating a report on the performance of your organization's cities. You could use a loop to generate a section of your report for each city. When a new city appears in your query results, a new section will appear in your report.

The following table is being returned by the query `location_summary`

```sql location_summary
SELECT 1 as id, 'New York' as name, 9000 as sales_usd, 0.60 as gross_margin_pct UNION ALL
SELECT 2, 'Los Angeles', 5000, 0.45 UNION ALL
SELECT 3, 'Toronto', 4000, 0.70
```

<DataTable data={location_summary} formatColumnTitles=false>
    <Column id="name" />
    <Column id="sales_usd" fmt=num0 />
    <Column id="gross_margin_pct" fmt=num2 />
</DataTable>

By using an `{#each}` block, we can iterate over each of the rows in `location_summary`, and reference the current row with the alias `city`. Here we'll create a header, and a paragraph for each of the three locations.

```markdown
Daily sales:

{#each location_summary as city}

## {city.name}

<Value data={city} column=sales_usd/> in sales at a <Value data={city} column=gross_margin_pct/> gross margin.

{/each}
```

Which would result in the following output

> Daily sales:
>
> ** New York **
>
> $9,000 in sales at a 60% gross margin.
>
> ** Los Angeles **
>
> $5,000 in sales at a 45% gross margin.
>
> ** Toronto **
>
> $4,000 in sales at a 70% gross margin.


---
evidence/sites/docs/pages/core-concepts/exports/index.md
---
---
title: Exports
description: Export data to PDF, CSV, images and using copy-paste.
sidebar_position: 12
---

Evidence supports exporting data and reports to PDF, images, CSVs and using copy-paste.

All of these options are available in both `dev` and `prod` environments.

## PDF

Evidence supports exporting individual pages to PDFs.

Open the option menu in the top-right of the page, and select "Export PDF".

This will open a dialog where you can adjust the format and save.

The PDF reflects the current state of the page - for example if queries are shown, then they will be included in the PDF.

## CSV

Data can be exported as CSV files, using the "Download Data" option in the bottom right of a component.

To see the download option, hover over the component. The following components support CSV downloads:

- Query results
- Tables
- Chart components

The for chart components, the CSV downloaded will match the query that was used in the component.

## Image (PNG)

Charts can be exported as `.png` files, using the "Download image" option in the bottom right of a component.

To see the download option, hover over the component.

## Copy-Paste

You can copy content from Evidence pages and paste it into other applications that support rich text, such as email, Google Docs, and Microsoft Word.

Cmd+A (Mac) or Ctrl+A (Windows) will select all content in the page, excluding the header, footer and sidebar.


---
evidence/sites/docs/pages/core-concepts/syntax/index.md
---
---
title: Syntax
description: Extended markdown with additional functionality.
sidebar_position: 1
---

Evidence reports are written in **Evidence-flavored Markdown** - an extension of markdown that includes SQL queries, data viz components, and programmatic features.

If you're not familiar with markdown, it's a simple text-based syntax - you've used markdown if you've written comments in Github or typed a message in Slack.

## Markdown

Evidence supports almost all Markdown syntax. See [Markdown Reference](/reference/markdown).

```markdown
---
title: Evidence uses Markdown
---

Markdown can be used to write expressively in text.

- it supports lists,
- **bolding**, _italics_ and `inline code`,
- links to [external sites](https://google.com) and other [Evidence pages](/another/page)

## Images 🖼️

Evidence looks for images in your `static` folder, e.g. `static/my-logo.png`.
![Company Logo](/my-logo.png)
```

## SQL

Code fences in Evidence markdown files run inline queries and return data. These code fences run the [DuckDB SQL](https://duckdb.org/docs/sql/introduction) dialect. [More on Queries](/core-concepts/queries).

````markdown
```sql orders_by_month
select
    date_trunc('month', order_datetime) as order_month,
    count(*) as number_of_orders,
    sum(sales) as sales_usd
from needful_things.orders
group by 1, order by 1 desc
```
````

## Components

Evidence has a built in [component library](/components/all-components) to create charts and other visual elements. [More on Components](/core-concepts/components).

```markdown
<LineChart 
    data = {orders_by_month}    
    y = sales_usd 
    title = 'Sales by Month, USD' 
/>
```

![Line Chart](/img/syntax-line-chart.png)


## Loops

Create repeating elements by looping through data. [More on Loops](/core-concepts/loops).

```markdown
{#each orders_by_month as month}

- There were <Value data={month} column=number_of_orders/> orders in <Value data={month} />.

{/each}
```

## If / Else

Control what is displayed using data through if and else statements. [More on If / Else](/core-concepts/if-else).

```javascript
{#if orders_by_month[0].sales_usd > orders_by_month[1].sales_usd}

Sales are up month-over-month.

{:else}

Sales are down vs last month. See [category detail](/sales-by-category).

{/if}
```

## Page Variables

There are a number of variables available to access information about the current page. These are particularly useful when creating templated pages and filters. They use the syntax `{$...}`

```markdown
The current page path is: {$page.route.id}

<!-- Result: The current page path is: /core-concepts/syntax/ -->
```

## Frontmatter

Use frontmatter to reference SQL queries, configure how titles, breadcrumbs and the sidebar are displayed, and to set open graph metadata for link previews on X, LinkedIn, Slack, Facebook etc.

See the [Frontmatter Reference](/reference/markdown#frontmatter).

```markdown
---
title: Evidence uses Markdown
description: Evidence uses Markdown to write expressively in text.
og:
  image: /my-social-image.png
queries:
  - orders_by_month.sql
---
```

## Expressions

Curly braces execute JavaScript expressions.

```markdown
2 + 2 = {2 + 2}

<!-- Result: 2 + 2 = 4 -->

There are {orders.length} months of data.

<!-- Result: There are 36 months of data. -->

There were {orders_by_month[0].number_of_orders} orders last month.

<!-- Result: There were 3634 orders last month. -->
```


## Code Fences in Other Languages

It can be useful to include code that isn't SQL, eg for documentation or examples.

If a code fence is named one of the [reserved language names](https://github.com/evidence-dev/evidence/blob/main/packages/lib/preprocess/src/utils/supportedLanguages.cjs), such as `python` or `r`, the code fence will render a code block. The code is _not_ executed.

````markdown
```python
names = ["Alice", "Bob", "Charlie"]
for name in names:
    print("Hello, " + name)
```
````

## Partials

Partials allow you to reuse chunks of Evidence markdown. [More on Partials](/reference/markdown#partials).

`./pages/index.md`
```markdown
&#123;@partial "my-first-partial.md"&#125;

And some content specific to this page.
```

`./partials/my-first-partial.md`
```markdown
# This is my first partial

This is some content in the partial.
```


---
evidence/sites/docs/pages/core-concepts/templated-pages/index.md
---
---
title: Templated Pages
description: Use a single file as a template for many pages with different data.
sidebar_position: 10
---

Templated pages allow you to use a single markdown file as a template for many pages with different data. For example:

1. `customers/[customer].md` -> One page per customer
1. `countries/[country].md` -> One page per country
1. `weekly-reports/week-[week_num].md` -> One page per time period
1. `categories/[category]/[product].md` -> One page per product [nested](#nesting-templated-pages) in its category

In example 1 above, www.example.com/customers/acme would display information for Acme, while www.example.com/customers/contoso would display information for Contoso.

A useful reference can be found in the [Needful Things example app](https://github.com/evidence-dev/demo/tree/main/pages/operations/pick_lists).


## Quickstart: VS Code Extension

1. **Create a [SQL file query](/core-concepts/queries/#sql-file-queries) in your queries folder**. It should return:
   - **One row per page** you want to generate
   - **A column containing a unique name or id** for each page
   - **Other columns containing data you want** to use in the pages
2. **Run `Evidence: Create Templated Pages from Query`** in the the Command Palette (Ctrl/Cmd+Shift+P).
3. **Enter the column name that contains your unique id** into the box that appears.

Evidence will automatically create a templated page that changes for each unique id, and an index page containing links for each page.

E.g. if your query was called `customers.sql` and contained a unique column called `customer` then the following files would be created:

```code title="Example Files Created"
pages/
`-- customers/
    |-- [customer].md
    `-- index.md
```

This serves as a helpful starting point, and you will likely want to customize the code in the newly created files.

## Full Guide of Concepts

### Declaring a templated page

A templated page is created by adding square brackets round a file name `[parameter_name].md` or folder name `[parameter_name]`.
The following are equivalent:

- `pages/customers/[customer].md`
- `pages/customers/[customer]/index.md`

The string inside the square brackets becomes a [parameter](#using-page-parameters) you can reference in the page, with the parameter value as text that replaces the parameter name in the URL.

### Using page parameters

The parameter passed in the URL can be used in the page. For example, if the URL is `/customers/acme`, the parameter value is `acme`, and you access it in markdown as follows:

```javascript
{params.customer}
```

Parameters can be used in queries to filter query results (e.g. a for specific customer)

````sql
```sql customers
select
    sum(sales) as sales_usd 
from needful_things.orders
where first_name = '${params.customer}'
group by 1
```
````


Adding this to a `<Value/>` component:

```javascript
<Value
    data={customers}
    column=sales_usd
/>
```


### Generating templated pages

So far, we've created the template for a set of pages, but haven't specified what specific pages to create, or to put it another way, what values we want the parameter to take.

For a page to be built, there must be links to it somewhere in your app.

Whilst you could add markdown style links for each parameter value, it is easier to programmatically generate them. Two easy options are:



#### 1. With a `<DataTable/>` and the `link` prop

Create a link per row in the SQL query and pass it to the `<DataTable/>`.

````markdown
```sql customers
select
    customer_name,
    '/customers/' || customer_name as customer_link,
    sum(sales) as sales_usd
from needful_things.orders
group by 1
```

<DataTable
    data={customers}
    link=customer_link
/>
````

#### 2. With an `{#each}` loop

````markdown
```sql customers
select
    customer_name,
    sum(sales) as sales_usd
from needful_things.orders
group by 1
```

{#each customers as customer}

- [{customer.customer_name}](/customers/{customer.customer_name})

{/each}
````

### Nesting templated pages

Creating folders with parameters can be useful when nesting inside templated pages:

```
pages/
`-- customers/
    `-- [customer]/
        |-- index.md
        `-- [branch].md
```

Now `index.md` would be rendered if you navigate to www.example.com/customers/acme, and `[branch].md` would be rendered if you navigate to www.example.com/customers/acme/south.

## Complete Example Code

See a complete example using a table to generate a templated page for each customer.

`index.md`

````markdown
# Customers

```sql customers
select
    first_name,
    '/customers/' || first_name as customer_link,
    sum(sales) as sales_usd 
from needful_things.orders
group by 1
```

<DataTable
    data={customers}
    link=customer_link
/>
````

`customers/[customer].md`

````markdown
# {params.customer}

```sql customers
select
    sum(sales) as sales_usd 
from needful_things.orders
where first_name = '${params.customer}'
group by 1
```

{params.customer} bought items worth <Value data={customers} column=sales_usd />.
````



---
evidence/sites/docs/pages/build-your-first-app/index.md
---
---
sidebar_position: 4
hide_table_of_contents: false
title: Build Your First App
description: A 10 minute guide to building your first Evidence app.
---


This is a guided tutorial to help you build your first Evidence app. If you'd prefer to learn how Evidence works, start with the [Syntax](/core-concepts/syntax/).

<Alert>

   **By the end of this 10 minute guide, you will be able to:**

  - Create and edit a page in Evidence
  - Write a query on demo data
  - Create a table
  - Create a chart
  - Connect a new CSV data source

</Alert>

## Prerequisites

Please ensure that you have already installed Evidence: [Install Evidence](/install-evidence).

If you are new to web development, start with the [Basics](#basics).

If you are familiar with running a server at `localhost`, and writing pages in Markdown, skip to [Working with data](#working-with-data).

## Basics
### 1. Start Evidence

Evidence can be started from VSCode, or from the Command Line. Both will work for this tutorial. If you're unsure, start with VSCode:

<Tabs>
   <Tab label="VSCode">

      Click `Start Evidence` in the bottom status bar:

      <img src="/img/getting-started/start_evidence.png" class="w-96 border border-gray-200 rounded"/>
   </Tab>
   <Tab label="Command Line">

      From the root of your project directory:

```bash
npm run dev
```

   </Tab>
</Tabs>

<br>

If you chose a different setup during [Install Evidence](/install-evidence/#other-options), use the command that matches your setup.

Your browser should open automatically. If it doesn't, open your browser and navigate to `localhost:3000` in the address bar. You should see your Evidence app:

![Evidence landing page](/img/getting-started/evidence_landing.png)

You have now started Evidence in a **local development server** on your own machine.


### 2. Add a new page

Go back to VSCode (or your file editor of choice) and open the `src/pages` directory. Right-click on the `pages` directory and select `New File`. Name the file `new-page.md`, or a name of your choice.

Add the following to the file and save it (`Ctrl+S` or `Cmd+S`):

```markdown
## Hello Evidence

This is a new page in Evidence.
```

Refresh Evidence in your browser. You should see your new page in the sidebar:

![New page in Evidence](/img/getting-started/new_page.png)

### 3. Write Markdown
Make some more changes to the page. You'll see them reflected "live" in the browser, immediately after saving. There is no need to restart the server.

This is called **hot reloading** (HMR), and it allows you to see your changes in real-time as you are building your page.

Evidence pages are `.md` files, and are written in a popular language called Markdown. You can learn more about Markdown [here](https://docs.evidence.dev/reference/markdown/).

You can also insert HTML directly into your page if you need more control.

Here are some examples of Markdown and HTML to try:

```markdown
## Hello Evidence

This is a new page in Evidence.

### This is a lower level header
This is some *italic* and **bold** text.

This is a [link](https://evidence.dev).

This is an image inserted using Markdown:
![alt text](https://evidence.dev/brand-assets/wordmark-black.png)

This is an image inserted using HTML:
<img src="https://evidence.dev/brand-assets/wordmark-black.png" alt="evidence logo" class="w-72"/>

```

Here's how it will look when rendered in the browser:

![Markdown rendered in Evidence.](/img/getting-started/markdown_html.png)

Now that you know how to create and edit pages, let's move on to working with data.

## Working with data
### 4. Understand data sources and queries

Navigate to `localhost:3000/settings` in your browser.

Here you'll find our demo dataset, `needful_things`. It is a [DuckDB](https://duckdb.org/) database, which is one of many databases that Evidence supports.

![The Evidence settings page.](/img/getting-started/duck_db.png)

Later in this tutorial you will learn how to add a new data source. For now, we will use `needful_things` to write a **source query**.

A data source in Evidence always consists of at least 2 types of files, but may have more.

1. A **connection.yaml** file. Any non-secret configuration needed to connect to your data source will be saved here. This file is automatically generated when you create a new data source via the `/settings` page.
2. **Source queries** allow you to filter and transform your data source before using it on a page. You may not need all of the tables from `needful_things`, or you may only need a few columns from a certain table. Your source query should be written in the dialect of SQL that matches your data source. A single data source can have multiple source queries.
3. (Sometimes) A **connection.options.yaml** file. Any secret credentials needed to connect to your data source will be saved here (base64 encoded). This file is automatically generated when you create a new data source via the `/settings` page.
4. (Sometimes) A **data file** itself. In our example, all of our data sits within a file called `needful_things.duckdb`.

You will see this reflected in the folder structure for each data source under the `sources` folder:

```code
sources/
`-- needful_things/
   |-- connection.yaml
   |-- needful_things.duckdb
   `-- orders.sql
```

There is no `connection.options.yaml` file in this case, as the duckdb data source does not have any secret credentials.

### 5. Set up a source query
Add a new `.sql` file to the `sources/needful_things` directory. Name it `my_query.sql`, or a name of your choice.

In this file, write a query to select all columns from the `orders` table:

**my_query.sql**
```sql
select * from orders
```

Save the file. Later, you'll be able to refer to this data source as `needful_things.my_query`.

### 6. Run sources

Once you have configured source queries, you need to **run sources** to actually execute them.

If your dev server is running, sources will run automatically if you make changes to your queries.

If your data source itself has changed, or if you are building pages [for deployment](/deployment/overview/), you may need to run sources manually from the Command Line:

```bash
npm run sources
```

<Alert status=info>

**What does it mean to run sources?**
<br/>

Data from various sources and formats (i.e. Snowflake, a Postgres database, and a CSV) normally cannot be queried and joined using the same syntax or SQL dialect. Evidence transforms queries from all data sources to create one unified **data cache**, which can then be used within your pages.
<br/>


Learn more at at Core Concepts &gt; [Data Sources](/core-concepts/data-sources/).
</Alert>

### 7. Set up a Markdown Query
In order to make data from the data cache available for use on pages, you must create a **Markdown query** for it.

Clean up everything from your page, and add the following to create a Markdown query named `my_query_summary`:

**new-page.md**
````markdown
## Hello Evidence

### Orders Table

```my_query_summary
select * from needful_things.my_query
```
````
Refresh, and you'll see a grey box that looks like this:

![Add new source](/img/getting-started/my_query_summary_grey_box.png)

<Alert status=info>
If you don't see the box, click the 3-dot menu at the top right of the page and select Show Queries. You can hide or show queries on any Evidence-generated page, including this one.
</Alert>



We'll use this data in the next section!

<Alert status=info>

**What is the difference between a Source Query and a Markdown Query?**
<br>

A **source query** is run directly against your data source, and must be written in the dialect of SQL that matches it. Running sources populates the data cache, which is not directly accesible by components. Sources can be run manually.
<br>

A **Markdown query** is written in the DuckDB dialect, and is run against the data cache. Markdown queries run with every page load, and their outputs are directly accessible by components within your pages.
<br>

To learn more about Markdown queries, including how to reuse them across pages, take a look at Core Concepts &gt; [Markdown Queries](/core-concepts/queries/).

</Alert>

## Adding components

### 8. Create a Data Table

One simple way to display data is with a [Data Table](/components/data-table/). Add a `DataTable` component that uses `my_query_summary` as its data source:

**new-page.md**
````markdown
## Hello Evidence

### Orders Table

```my_query_summary
select * from needful_things.my_query
```

<DataTable data={my_query_summary} />
````

Refresh the page in your browser, and you should now see:

```my_query_summary
select * from needful_things.orders
```
<DataTable data={my_query_summary}/>



Very nice - you just made your first Evidence component. Let's refine things a bit.

The Markdown query isn't doing much at the moment. It's simply displaying all 10,000 records and all columns. We can make it more useful.

Let's say we want to pull the 100 most recent orders, in order to send these customers a discount code. Change the Markdown query to:

````markdown
```my_query_summary_top100
select
   order_datetime,
   first_name,
   last_name,
   email
from needful_things.my_query
order by order_datetime desc
limit 100
```
````

Now refresh, and notice that your table has changed to show only the most recent 100 orders, with only the table columns you specified:

```my_query_summary_top100
select
   order_datetime,
   first_name,
   last_name,
   email
from needful_things.orders
order by order_datetime desc
limit 100
```

<DataTable data={my_query_summary_top100} />




You can further select or rename the columns that appear in your table by specifying them in the `DataTable` component:

```markdown
<DataTable data={my_query_summary_top100}>
   <Column id=order_datetime title="Order Date"/>
   <Column id=first_name />
   <Column id=email />
</DataTable>
```
This will display:

<DataTable data={my_query_summary_top100}>
   <Column id=order_datetime title="Order Date"/>
   <Column id=first_name />
   <Column id=email />
</DataTable>



A Data Table is a built-in **component** of Evidence, and there are many more. To see a full list of components, take a look at the left-hand sidebar, or go to [All Components](/components/all-components/).

### 9. Create a Bar Chart

Next, let's visualize orders over the past year using a [Bar Chart](/components/bar-chart). Add the following to your page. Notice that we are creating a new Markdown query called `orders_by_month`:

````markdown
### Orders by Month

```orders_by_month
select order_month, count(*) as orders from needful_things.my_query
group by order_month order by order_month desc
limit 12
```
<BarChart
    data={orders_by_month}
    x=order_month
    y=orders
	xFmt="mmm yyyy"
	xAxisTitle="Month"
	yAxisTitle="Orders"
/>
````
And you should see:

```orders_by_month
select order_month, count(*) as orders from needful_things.orders
group by order_month order by order_month desc
limit 12
```
<BarChart
    data={orders_by_month}
    x=order_month
    y=orders
	xFmt="mmm yyyy"
	xAxisTitle="Month"
	yAxisTitle="Orders"
/>

### 10. Connect a new CSV data source

Go to `localhost:3000/settings`, and select **Add new source**:

![Add new source](/img/getting-started/add_new_source.png)

Choose **CSV** as the source type, and upload a CSV file of your choice.

Here, we'll use [**us_alt_fuel_stations.csv**](https://catalog.data.gov/dataset/alternative-fueling-station-locations-422f2/resource/341957d8-daf6-4a38-ab1d-8ec1bc21cfb9) - a public data source on EV charging stations across the US.

Select Source Type: **CSV**, and give your source a name. Hit Confirm:

![Add new source](/img/getting-started/add_new_source2.png)

You can read about various configuration options for CSV files [here](https://docs.evidence.dev/core-concepts/data-sources/#csv-files). For now, leave this blank, and hit **Confirm Changes**:

![Add new source](/img/getting-started/add_new_source_confirm_changes.png)

You should now see your new source under the sources folder. Copy your CSV file into it:

```code
sources/
`-- ev_stations/
   |-- connection.yaml
   |-- connection.options.yaml
   `-- us_alt_fuel_stations.csv
```


That's it! You've set up a new data source. If you'd like to use it, try adding the following Markdown Query and the [USMap](/components/us-map) component:

````markdown
### EV Map
```ev_map
select State, count(*) AS ev_station_count from ev_stations.us_alt_fuel_stations
where State not in ('CA')
group by State order by ev_station_count desc
```

<USMap data={ev_map} state=State abbreviations=true value=ev_station_count/>
````

And you should see:

```ev_map
select
   State,
   count(*) AS ev_station_count
from ev_stations.us_alt_fuel_stations
where State not in ('CA')
group by State order by ev_station_count desc
```

<USMap data={ev_map} state=State abbreviations=true value=ev_station_count/>

That's it! You now know the basics of setting up data sources, writing queries, and creating components in Evidence.

## Next steps

- Explore other components: [All Components](/components/all-components/)
- Learn how to deploy your Evidence app: [Deployment](/deployment/overview/)
- Learn more about writing and organizing Markdown queries: [SQL Queries](/core-concepts/queries/)

### Help and support
If you need help, or have corrections and suggestions for this tutorial, please join the [Evidence Slack community](https://slack.evidence.dev).


<style>
   :root {
      --lightest-gray: #dee2e6;
   }

   img.markdown {
      @apply border border-gray-200 rounded;
   }
</style>


---
evidence/sites/docs/pages/plugins/index.md
---
---
title: Plugins
sidebar_position: 4
sidebar_link: false
---

---
evidence/sites/docs/pages/plugins/component-plugins/index.md
---
---
sidebar_position: 1
hide_table_of_contents: false
title: Component Plugins
description: Evidence includes a plugin system which can be used to add components and data sources to your app.
---

Evidence includes a plugin system which can be used to add components and data sources to your app. 

All Evidence projects include the Evidence `core-components` plugin by default. `core-components` has everything you need to build most use cases. 

Component plugins are Svelte component packages which include one or more additional components which you can use in your markdown. Once you have installed and registered a component plugin, the included components will be available to use in your markdown files. 

To use a plugin, you need to **install** and **register** it in your project.

## Installing Component Plugins 

```bash
npm install @acme/charting 
```

## Registering Component Plugins 

Once the plugin is installed, add it to `evidence.plugins.yaml` to register it in your project. 

```yaml
components:
    @evidence-dev/core-components: {}
    @acme/charting: {}
```


### Component Aliases

If a plugin provides a component that you want to reference with another name, you can set up `aliases` when registering the component. 

In this example, the `@acme/charting` plugin provides some component `LongNameForAChart`. After setting up `aliases`, it will be made available in the Evidence markdown as `AcmeChart`

```yaml
components:
    @acme/charting:
        aliases:
            LongNameForAChart: AcmeChart
```

### Component Overrides

Component plugins have the ability to override components from other plugins (e.g. you want to replace the built-in `LineChart` with a chart from a plugin).

Overrides are specified in an `overrides` list. In the example below, Evidence's built-in `LineChart` will be overridden by the `LineChart` component from the `@acme/charting` plugin:
```yaml
components:
    @evidence-dev/core-components: {}
    @acme/charting:
        overrides:
            - LineChart
```

If you want to replace `LineChart` with a component named `CustomLineChart`, apply an alias to `CustomLineChart` first:

```yaml
components:
    @evidence-dev/core-components: {}
    @acme/charting:
        aliases:
            CustomLineChart: LineChart # Rename CustomLineChart
        overrides:
            - LineChart # Override LineChart with the now renamed CustomLineChart
```

### (Advanced) Using generic Svelte component libraries

If you want to use a Svelte component library that is _not_ an Evidence component plugin, you can use the `provides` field to 
manually document the components that the library provides.

```yaml
components:
  @evidence-dev/core-components: {}
  carbon-components-svelte:
    provides:
      - Button
      - CodeSnippet
```

<Alert status=warning>

The components provided **must** be named exports, e.g. `import {ComponentName} from 'package';`, _not_ `import ComponentName from 'package/ComponentName.svelte;`.

</Alert>

---
evidence/sites/docs/pages/plugins/create-source-plugin/index.md
---
---
title: Create Data Source Plugin
description: Walkthrough on how to create a data source plugin for Evidence
sidebar_position: 4
---

To see a working example of a data source plugin, the [Evidence postgres source plugin](https://github.com/evidence-dev/evidence/tree/main/packages/postgres) is a good
reference.

## Get started
To get started, go to [the data source template repo](https://github.com/evidence-dev/datasource-template) and click to "Use This Template". Then, follow the directions in the `README` in that repo.

## Options Specification

Evidence Datasources must provide an `options` export; this is used to
build UI and validation to ensure an excellent UX for Evidence users.

Options can have the following fields:

<PropListing
    name="title"
    type="string"
    required
>

Name or Title of the option

</PropListing>
<PropListing
    name="type"
    type={['string', 'number', 'boolean', 'select', 'file']}
    required
>

Control to show

</PropListing>
<PropListing
    name="secret"
    type="boolean"
>

Secret values are placed in `connection.options.yaml`, which is not source controlled

</PropListing>
<PropListing
    name="shown"
    type="boolean"
>

Displays value in UI elements (e.g. for usernames, that should not be source controlled but are not 'secret'. Otherwise the field will display as ∙∙∙)

</PropListing>
<PropListing
    name="virtual"
    type="boolean"
>

Disables saving a field, useful for credential files

</PropListing>
<PropListing
    name="references"
    type="string"
>

Indicates that the field should get its value from another field if it is available, useful for credential files. Formatted as a [json path](https://www.npmjs.com/package/@astronautlabs/jsonpath)

</PropListing>
<PropListing
    name="forceReference"
    type="boolean"
>

If true, the input is disabled and the value can only come from a reference

</PropListing>
<PropListing
    name="fileFormat"
    type={['json', 'yaml']}
>

If `type` is `file`, set how it should be parsed. It will then be available to `references`

</PropListing>
<PropListing
    name="description"
    type="string"
>

Description of the option, shown as a hint in UI

</PropListing>
<PropListing
    name="children"
    type="Record<string|number|boolean, Options>"
>

See [children](#children)

</PropListing>
<PropListing
    name="required"
    type="boolean"
>

Indicates that the user must provide this option

</PropListing>
<PropListing
    name="options"
    type="Array<{`{label: string, value:string}`}>"
>

Available options for `select` type

</PropListing>
<PropListing
    name="nest"
    type="boolean"
>

Determines behavior of `children`

</PropListing>
<PropListing
    name="default"
    type={['string', 'number', 'boolean']}
>

Default Value

</PropListing>


### Children

Many datasources have variable configuration (e.g. if ssl is enabled for postgres, then an ssl mode can be selected), and Evidence
options support this workflow.

Consider this partial postgres ssl option:

```javascript
ssl: {
    type: 'boolean',
    // ...
    nest: true,
    children: {
        [true]: {
            sslmode: {
                // ...
            }
        }
    }
},
```

`ssl.children` is a record of possible values to an additional set of options that are exposed then the values match.
In this example, the `sslmode` option is only displayed when `ssl` is true.

The resulting type of this option is:
```typescript
{ ssl: false } | { ssl: { sslmode: string } }
```

In cases where you want a flat object, rather than a nested object; set `nest` to false.

This would produce

```typescript
{ ssl: false } | { ssl: true, sslmode: string }
```

## Promoting Your Plugin
If you are building a plugin for other Evidence users, [let us know in Slack](https://slack.evidence.dev) and we can share it with the community.

---
evidence/sites/docs/pages/plugins/source-plugins/index.md
---
---
sidebar_position: 2
hide_table_of_contents: false
title: Data Source Plugins
description: Source plugins enable you to add new data source types to your app. 
---

Evidence includes a plugin system which can be used to add components and data sources to your app. 

Source plugins enable you to add new data source types to your app. Once you have installed and registered a source plugin, you will be able to configure any associated connection settings in the settings UI.  

To use a plugin, you need to **install** and **register** it in your project.

## Installing Source Plugins 

```bash
npm install @cool-new-db/evidence-source-plugin
```

## Registering Source Plugins 

Once the plugin is installed, add it to `evidence.plugins.yaml` to register it in your project. 

```yaml
components:
    @evidence-dev/core-components: {}
databases: 
    @cool-new-db/evidence-source-plugin
```

## Configuring Source Plugins 

Restart the development server after installing and registering the plugin, then visit `localhost:3000/settings`. 



---
evidence/sites/docs/pages/plugins/create-component-plugin/index.md
---
---
title: Create Component Plugin
description: You can create a component plugin to publish your own custom components for use across multiple Evidence apps.
sidebar_position: 3
---

You can build a component plugin to publish your own custom components, or to make existing open source component libraries easily available for Evidence users.

The easiest way to get started is from the example component library [**on GitHub**](https://github.com/evidence-dev/labs), with a live demo of the components [here](https://labs.evidence.dev).

## Basic Steps
1. Clone the [Evidence Labs example repo](https://github.com/evidence-dev/labs)
2. Add your components to the `src/lib` directory in place of the existing components
3. Add pages in the `pages` directory to show your components, in place of the existing pages
4. Set up component exporting (see section below)
5. Test that your components work by running the dev server with `npm run dev` and inspecting the pages you created
6. Edit the name in `package.json` from `@evidence-dev/labs` to `your-plugin-name` and set the version to `0.0.1`
7. Publish to npm with `npm publish` (You will need to be logged in to an [npm](https://www.npmjs.com/signup) account)
8. Install your plugin by following [the steps here](/plugins/component-plugins)
9. Make changes to your plugin and republish with `npm publish` - *note that you need to bump the version number in `package.json` each time you do this*


## Component Exporting

Plugins must "export" their components to make them available to your Evidence apps.

There are 2 ways to set up component exporting in your plugin:
1. [Module Exports](#module-exports) (recommended)
2. [Manifest](#manifest) - this method can be used in cases when a large component library already exists

*Note that these are mutually exclusive, and the manifest takes priority.*

### Module Exports

When writing a plugin from scratch, this is the preferred method.

#### Steps
1. Add the following to each component in your plugin to "flag" the component as something that should be imported as part of the plugin (at the top of the component's `.svelte` file)
```html title="ComponentOne.svelte"
&lt;script context="module"&gt;
    export const evidenceInclude = true;
&lt;/script&gt;
```
2. Add an `index.js` file to the `src/lib` directory
3. Add one line to `index.js` per component in your plugin. This will export the components, making them available in Evidence:
    ```javascript title="index.js"
    export {default as ComponentOne} from "./ComponentOne";
    export {default as ComponentTwo} from "./ComponentTwo";
    ```

### Manifest

If you would prefer not to flag each individual component file, another approach is to maintain an `evidence.manifest.yaml` file. The structure of the file is a single array of component names.

#### Steps
1. Add an `evidence.manifest.yaml` to your `src/lib` directory
2. Add a line to the file for each component in your plugin:
    ```yaml title="evidence.manifest.yaml"
    components:
    - ComponentOne
    - ComponentTwo
    ```
3. Add an `index.js` file to the `src/lib` directory
4. Add one line to `index.js` per component in your plugin. This will export the components, making them available in Evidence:
    ```javascript title="index.js"
    export {default as ComponentOne} from "./ComponentOne";
    export {default as ComponentTwo} from "./ComponentTwo";
    ```

## Promoting Your Plugin
If you are building a plugin for other Evidence users, [let us know in Slack](https://slack.evidence.dev) and we can share it with the community.




---
evidence/sites/docs/pages/reference/index.md
---
---
sidebar_position: 5
sidebar_link: false
---

---
evidence/sites/docs/pages/reference/markdown/index.md
---
---
title: Markdown
hide_title: true
sidebar_position: 1
description: Evidence supports most markdown syntax. Below are some of the most common markdown features.
---

# Markdown Reference

Evidence supports most markdown syntax. Below are some of the most common markdown features. For more details, check out [Markdown Guide](https://www.markdownguide.org/cheat-sheet/).

## Text Paragraphs

```markdown
This is a paragraph. It can be as long as you want.

Add line breaks by leaving a blank line between paragraphs.
```

## Text Styles

```markdown
**Bold** text is wrapped in double asterisks
_Italic_ text is wrapped in single asterisks
~~Strikethrough~~ text is wrapped in double tildes
`Inline code` is wrapped in backticks
```

## Lists

```markdown
- This is a unordered list
- It uses dashes
- To indicate items

1. This is an ordered list
1. It uses numbers to indicate order
1. The numbers you type don't matter, they will be automatically numbered
```

## Headers

```markdown
# H1 Header

## H2 Header

### H3 Header

#### H4 Header

##### H5 Header

###### H6 Header
```

## Links

```markdown
[External link](https://google.com)

[Internal link](another/page/)
```

## Images

```markdown
![An online image](https://i.imgur.com/xyI27iZ.gif)

![An image stored in the project's static folder](/my-image.png)
```

#### Storing Images and Static Files

Evidence looks for images in the `/static` folder in the root of your project. Create it if it doesn't exist.

```
+-- pages/
|   `-- index.md
`-- static/
    `-- my-image.png
```

## Code Fences

In Evidence, most code fences execute SQL queries and display the results in a table.

````markdown
This code fence will execute a SQL query and display the results:

```sql orders
SELECT *
FROM needful_things.orders
WHERE category = 'Sinister Toys'
```
````

The exception is if you use one of the [reserved language names](https://github.com/evidence-dev/evidence/blob/main/packages/lib/preprocess/src/utils/supportedLanguages.cjs), which will render the code in a code block.

````markdown
```python
names = ["Alice", "Bob", "Charlie"]

for name in names:
    print("Hello, " + name)
```

```r
names <- c("Alice", "Bob", "Charlie")

for (name in names) {
    print(paste("Hello, ", name))
}
```
````

## Tables

```markdown
| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| Row 1    | Row 1    | Row 1    |
| Row 2    | Row 2    | Row 2    |
```

To display data in a table, use a [Data Table](/components/data-table) instead.

## Blockquotes

```markdown
> This is a blockquote
>
> It can span multiple lines
>
> > And can be nested
```

## Frontmatter

<Alert status=warning>

Frontmatter does not support Javascript statements at this time; and things may behave unexpectedly if wrapped in `{}`

</Alert>

To attach metadata (e.g. a title) to your page, you can use Frontmatter. Note that frontmatter _must_ appear as the first thing in your page; no content can come before it, or it won't be loaded properly.

Frontmatter is formatted like this:

```markdown
---
title: Evidence Docs
---
```

You can put whatever data you would like here, and it uses a [yaml syntax](https://yaml.org/), but some properties are special:

<PropListing
    name="title"
    description="Changes the name of the tab, the title displayed in the sidebar, adds a header to your page, and changes the breadcrumb for the page."
/>
<PropListing
    name="hide_title"
    description="If true, the title will not show as a header on the page"
    options={['true', 'false']}
/>
<PropListing
    name="description"
    description="Is used for search engines"
/>
<PropListing
    name="og"
    description="Changes how your link shows up when shared on things like Slack, Facebook, Twitter, Discord, etc"
/>
<PropListing
    name="og.title"
    description="Changes the title that appears in the embed; if this is not specified, but `title` is, then `title` is used (and vice versa)"
/>
<PropListing
    name="og.description"
    description="Changes the body of the embed"
/>
<PropListing
    name="og.image"
    description="Will appear in the embed if specified, but it is not required."
/>
<PropListing
    name="queries"
    description="References SQL queries stored in the /queries directory."
/>
<PropListing
    name="sidebar"
    description="Changes the visibility of the sidebar. 'show' results in a responsive sidebar, 'hide' results in a sidebar accessible via hamburger button and 'never' hides both - the sidebar and the hamburger button."
    options={['show', 'hide', 'never']}
/>
<PropListing
    name="sidebar_position"
    description="Changes the position of the page in the sidebar. When used in index.md pages, changes the position of their parent in the sidebar."
    options="positive integer"
/>
<PropListing
    name="sidebar_link"
    description="When set to false, no link to the page appears in the sidebar. When used in index.md pages, the parent directory will still appear in the sidebar but it will not function as a link."
    options={['true', 'false']}
/>
<PropListing
    name="breadcrumb"
>

Specify a query that returns a column named breadcrumb. The query can use `$&#123params.my_param&#125` to reference the URL parameters for the page. 

E.g.
`breadcrumb: &quot;select customer_name as breadcrumb from customers_table where customer_id = $&#123params.customer_id&#125&quot;`

</PropListing>

Anything outside of these values won't do anything on their own, but they will be accessible as [variables](/core-concepts/syntax/#expressions) on the page.

## Partials

<Alert status=warning>

Partials do not support live reload, or hot module replacement. You will need to refresh the page when you change a partial.

</Alert>

`./pages/index.md`
```markdown
&#123;@partial "my-first-partial.md"&#125;

And some content specific to this page.
```

`./partials/my-first-partial.md`
```markdown
# This is my first partial

This is some content in the partial.
```

Evidence supports re-using chunks of Evidence markdown using Partials.

Partials are placed in the `./partials` folder, and can be referenced in your markdown with `&#123;@partial "path/to/partial.md"&#125;` (do not include the `/partial` folder in the path).


---
evidence/sites/docs/pages/reference/cli/index.md
---
---
sidebar_position: 1
title: CLI
hide_title: true
description: Commands to start, install, develop, and build Evidence apps from the command line.
---

# CLI Reference

## Commands

```sql commands
select '<code>npx degit evidence-dev/template my-project</code>' as "CLI", '<code>Evidence: New Evidence Project</code>' as "VS Code", 'Create a new project from the template' as "Description", 0 as row_num UNION ALL
select '<code>npm run sources</code>' as "CLI", '<code>Evidence: Run Sources</code>' as "VS Code", 'Extract data from sources' as "Description", 1 as row_num UNION ALL
select '<code>npm run dev</code>' as "CLI", '<code>Evidence: Start Server</code>' as "VS Code", 'Start the development server in the current directory' as "Description", 2 as row_num UNION ALL
select '<code>npm run build</code>' as "CLI", '<code>Evidence: Build</code>' as "VS Code", 'Build the app for production' as "Description", 3 as row_num UNION ALL
select '<code>npm run build:strict</code>' as "CLI", '<code>Evidence: Built Strict</code>' as "VS Code", 'Build, but fails on query or component errors' as "Description", 4 as row_num UNION ALL
select '<code>npm run preview</code>' as "CLI", 'N/A' as "VS Code", 'Preview the built site' as "Description", 5 as row_num UNION ALL
select '<code>Ctrl / Cmd</code> + <code>C</code>' as "CLI", '<code>Evidence: Stop Server</code>' as "VS Code", 'Stop the dev server (when running)' as "Description", 6 as row_num UNION ALL
select '<code>r</code>' as "CLI", 'N/A' as "VS Code", 'Restart the dev server (when running)' as "Description", 7 as row_num
ORDER BY row_num
```

<DataTable data={commands} formatColumnTitles=false>
    <Column id="CLI" wrap contentType=html/>
    <Column id="VS Code" contentType=html/>
    <Column id="Description" wrap/>
</DataTable>


## Options

Append flags with an extra `--` after the command to modify behavior.

For example, `npm run dev -- --port 4000` will start the development server on port 4000.

Some of the most common are:

```sql options
select '<code>sources</code>' as "Command", '<code>--changed</code>' as "Flag", 'Run sources whose queries have changed' as "Description", null as "Detail", 0 as row_num UNION ALL
select '<code>sources</code>' as "Command", '<code>--sources [source_name]</code>' as "Flag", 'Run sources from the specified sources' as "Description", 'Seperate with commas <code>--sources source1,source2</code>' as "Detail", 1 as row_num UNION ALL
select '<code>sources</code>' as "Command", '<code>--queries [query_name]</code>' as "Flag", 'Run the specified queries' as "Description", 'Seperate with commas' as "Detail", 2 as row_num UNION ALL
select '<code>sources</code>' as "Command", '<code>--debug</code>' as "Flag", 'Show debug output' as "Description", null as "Detail", 3 as row_num UNION ALL
select '<code>dev</code>' as "Command", '<code>--open [path]</code>' as "Flag", 'Open browser to <code>path</code> on startup' as "Description", 'Default <code>--open /</code> opens in root of the project' as "Detail", 4 as row_num UNION ALL
select '<code>dev</code>' as "Command", '<code>--host [host]</code>' as "Flag", 'Specify hostname' as "Description", '<code>--host 0.0.0.0</code> can be helpful in containers' as "Detail", 5 as row_num UNION ALL
select '<code>dev</code>' as "Command", '<code>--port <port></code>' as "Flag", 'Specify port' as "Description", 'Automatically increment if default <code>3000</code> is in use' as "Detail", 6 as row_num
ORDER BY row_num
```

<DataTable data={options} formatColumnTitles=false>
    <Column id="Command" wrap contentType=html/>
    <Column id="Flag" wrap contentType=html/>
    <Column id="Description" wrap/>
    <Column id="Detail" wrap contentType=html/>
</DataTable>


Evidence's `dev` and `build` commands run using Vite, and so support [Vite's options](https://vitejs.dev/guide/cli.html#options).

Evidence's `preview` command runs using `npx serve` and supports [Serve's options](https://github.com/vercel/serve/blob/main/source/utilities/cli.ts#L30)

## Environment Variables

You can set environment variables to configure Evidence in production. Most of these are used to set database credentials securely.

The format of environment variables for database credentials is `EVIDENCE_SOURCE__[source_name]__[variable_name]`.

You can copy all your current environment variable values from the settings page at [localhost:3000/settings](http://localhost:3000/settings).

N.B. Environment variables are **case sensitive**, so you should preserve the case specified in the settings page.

### .env Files

Evidence will read in environment variables from a `.env` file in the root of your project. This is useful for local development.

### Environment Variables in Source Queries

Environment variables to be used in source queries should be prefixed with `EVIDENCE_VAR__` (note the double underscore). They can be used in source queries with `${EVIDENCE_VAR__variable_name}`.

```bash
EVIDENCE_VAR__customer_name="Acme Corporation"
```

```bash
select *
from orders
where customer_name = '${customer_name}'
```

The quotes would be omitted if the variable was not a string.

### Environment Variables in Pages

Environment variables to be used in pages should be prefixed with `VITE_`. They can be accessed with `import.meta.env.VITE_variable_name`.

`.env`
```bash
VITE_customer_attribute=premium
```

`index.md`
```svelte
&lt;script&gt;
  const customer_attribute = import.meta.env.VITE_customer_attribute;
&lt;/script&gt;

{#if customer_attribute === 'premium'}

Premium content

{:else if customer_attribute === 'free'}

Free content

{/if}
```

---
evidence/sites/docs/pages/reference/themes-and-layouts/index.md
---
---
sidebar_position: 4
hide_table_of_contents: false
title: Themes and Layouts
description: Evidence supports customizing the look and feel of your app using CSS, and by overwriting or modifying the default layout.
---

Evidence supports customizing the look and feel of your app using CSS, and by overwriting or modifying the default layout.

## Custom Layout 

To customize your, add a `+layout.svelte` file to the root of your pages directory. You can customize the `EvidenceDefaultLayout` with the options below, or replace the contents of the file with an entirely new layout. 

```html
&lt;script&gt;
	import '@evidence-dev/tailwind/fonts.css';
	import '../app.css';
	import { EvidenceDefaultLayout } from '@evidence-dev/core-components';
	export let data;
&lt;/script&gt;

<EvidenceDefaultLayout {data}>
	<slot slot="content" />
</EvidenceDefaultLayout>

```

The `EvidenceDefaultLayout` component accepts the following properties for common customizations.

<PropListing
    name="title"
    options="Any string"
    defaultValue=""
>

App title that will replace the Evidence Logo.

</PropListing>
<PropListing
    name="logo"
    options="/logo.png"
    defaultValue=""
>

Link to an image which will replace the Evidence logo. This will also override any app title in the header. If the image is in your project's static directory, the link should be relative to the static directory.

</PropListing>
<PropListing
    name="homePageName"
    options="Any string"
    defaultValue=Home
>

Name of the home page in the sidebar.

</PropListing>
<PropListing
    name="neverShowQueries"
    options={['true', 'false']}
    defaultValue=false
>

Removes the option to show queries when the app is deployed. Has no effect in development.

</PropListing>
<PropListing
    name="maxWidth"
    options="Any number"
    defaultValue=""
>

Sets the width of the app content in pixels. The default layout is about 1,280 px wide.

</PropListing>
<PropListing
    name="fullWidth"
    options={['true', 'false']}
    defaultValue=false
>

Sets the width of the app content to full

</PropListing>
<PropListing
    name="hideSidebar"
    options={['true', 'false']}
    defaultValue=false
>

Hides the sidebar navigation

</PropListing>
<PropListing
    name="hideHeader"
    options={['true', 'false']}
    defaultValue=false
>

Hides the page header

</PropListing>
<PropListing
    name="hideBreadcrumbs"
    options={['true', 'false']}
    defaultValue=false
>

Hides the breadcrumbs which appear at the top of the page

</PropListing>
<PropListing
    name="hideTOC"
    options={['true', 'false']}
    defaultValue=false
>

Hides the table of contents (on-page links at top right of page)

</PropListing>
<PropListing
    name="builtWithEvidence"
    options={['true', 'false']}
    defaultValue=false
>

Display a subtle link to the Evidence website at the bottom of the sidebar.

</PropListing>
<PropListing
    name="algolia"
    options="{`{{appId: 'xxx', apiKey: 'xxx', indexName: 'xxx'}}`}"
    defaultValue=""
>

Object containing Algolia docsearch credentials

</PropListing>
<PropListing
    name="githubRepo"
    defaultValue='https://github.com/evidence-dev/evidence'
>

Link to a Github Repo which will appear in the header using the Github Logo

</PropListing>
<PropListing
    name="xProfile"
    defaultValue='https://twitter.com/evidence_dev'
>

Link to an X (Twitter) profile which will appear in the header using the X Logo

</PropListing>
<PropListing
    name="blueskyProfile"
    defaultValue='https://bsky.app/profile/evidence.dev'
>

Link to a Bluesky profile which will appear in the header using the Bluesky Logo
</PropListing>
<PropListing
    name="slackCommunity"
    defaultValue='https://slack.evidence.dev'
>

Link to a slack community which will appear in the header using the slack Logo

</PropListing>

**Example custom option:**
```html
<EvidenceDefaultLayout {data} hideSidebar={true}>
	<slot slot="content" />
</EvidenceDefaultLayout>
```

## Custom Styles

Evidence uses [Tailwind CSS](https://tailwindcss.com) to style Evidence components and markdown, and you can use Tailwind to add your own styles.

To style with Tailwind you add *classes* to HTML elements. You can use any HTML element in your markdown.

For more information on using Tailwind, see the [Tailwind documentation](https://tailwindcss.com/docs).

<Alert status="info">

Tailwind removes styling from HTML elements by default, so should add your own styles to `<h1/>`, `<a/>` etc. 

</Alert>

### Using the Evidence Default Styles in Custom HTML

Adding the `markdown` class to an element will style it the same as Evidence markdown, e.g.  `<h1 class='markdown'/>`. 

### Examples

#### Customize Fonts

```markdown
This is the default text style, which is used when you write text in a markdown file.

<p class="text-red-600 italic font-serif">This red italic serif text is defined inside a HTML p (paragraph) element.</p>

<p class="font-mono text-blue-500 mt-3">This is blue text using a monospace font, and a custom top margin.</p>
```

## Base Styles

Include an `app.css` file in your project root directory to customize the base styles of your app.

_The recommended approach is to copy and edit the default css file from `[my-project]/.evidence/template/src/app.css`, also found in the [Evidence Github repo](https://github.com/evidence-dev/evidence/blob/main/sites/example-project/src/app.css)._

### What can be customized with app.css?

You can customize the default styles (font, size, color etc) of most HTML elements, by adjusting the default css for the app, e.g.

- Headers
- Body text
- Images
- Links
- Page Background
- etc

You **cannot** currently easily customize the default styles of the following (as these are not defined in the core css styles):

- Evidence Chart colors and themes (see custom chart color section below)
- Evidence Components

## Page Layout

If you include a `+layout.svelte` file in a directory, any markdown files in that directory (and its subdirectories) will use this layout file instead of the default layout file.

_The recommended approach is to copy and edit the default layout file from `[my-project]/.evidence/template/src/pages/+layout.svelte`, also found in the [Evidence Github repo](https://github.com/evidence-dev/evidence/blob/main/sites/example-project/src/pages/+layout.svelte)._

### What can be customized with +layout.svelte?

By default, Evidence includes a number of features on every page, which can be removed or customized e.g.

- Sidebar
- Header
- Breadcrumbs
- Table of Contents

You can also add your own elements to the default page layout.

## Chart Color Palette

You can use a custom color palette in your charts by using the `colorPalette` option.

For example, in a bar chart:

```markdown
<BarChart
    data={orders}
    x=date
    y=sales
    colorPalette={
        [
        '#cf0d06',
        '#eb5752',
        '#e88a87',
        '#fcdad9',
        ]
    }
/>
```

This can be done within each chart individually, or by using a script tag to create a variable that can be used within one page. For example:

```markdown
&lt;script&gt;
    let myColors = [
        '#cf0d06',
        '#eb5752',
        '#e88a87',
        '#fcdad9',
    ]
&lt;/script&gt;

<BarChart
    data={orders}
    x=date
    y=sales
    colorPalette={myColors}
/>

<LineChart
    data={inventory}
    x=date
    y=inventory
    colorPalette={myColors}
/>
```


---
evidence/sites/docs/pages/deployment/index.md
---
---
title: "Deployment"
sidebar_position: 3
sidebar_link: false
---

---
evidence/sites/docs/pages/deployment/overview/index.md
---
---
sidebar_position: 1
hide_table_of_contents: false
title: Overview
hide_title: true
description: Evidence is a static site generator, so can be deployed to any static site host. The easiest way to deploy Evidence is on Evidence Cloud.
---

# Deployment Overview

In production, Evidence is a [static site generator](https://www.netlify.com/blog/2020/04/14/what-is-a-static-site-generator-and-3-ways-to-find-the-best-one/) by default. This means it doesn't run queries when someone visits your site, but pre-builds all possible pages as HTML beforehand.

You can host your Evidence app using Evidence Cloud, cloud services like Netlify or Vercel, or your own infrastructure. Evidence does not currently support Github Pages, there is more information on [GitHub](https://github.com/evidence-dev/evidence/issues/603).

You can also configure Evidence as a [Single Page App (SPA)](/deployment/rendering-modes). In SPA mode Evidence will not pre-build all the pages in your application. This can be preferrable if your app has many pages (>1,000) causing long build times.

## Evidence Cloud

The easiest way to deploy Evidence is on [Evidence Cloud](/deployment/evidence-cloud). Evidence Cloud is free for public apps, and has paid plans for private apps.

## Build Process

Evidence doesn't run new queries each time someone visits one of your reports.

Instead, Evidence runs your queries once, at build time, and statically generates _all_ of the pages in your app. This includes all possible permutations of any paramaterized pages.

You can schedule (or trigger) regular builds of your site to keep it up-to-date with your data warehouse.

This has two benefits for you and your users:

1. If something goes wrong with your SQL, Evidence just stops building your app, and continues to serve older results.
2. Your site will be exceptionally fast. Under most conditions, pages will load in milliseconds.

## Build Commands

<Alert status=warning>

Ensure that your build environment aligns with the [system requirements](/guides/system-requirements)

</Alert>

### Build

The command `npm run build` will build a static version of your reports and place them in the `build` directory.

### Build:Strict

The command `npm run build:strict` is a much less permissive build command. Use this to ensure you never deploy a broken report.
This command will fail if:

- **Any SQL query fails.** A successful query returning no rows is _not_ a failure
- **Any component renders an error state.** A component passed a valid query returning no rows _will_ fail - you can avoid this with an [`{#if}` statement](/core-concepts/if-else) if needed.

## Storing Credentials

In production, Evidence expects to find your database credentials in **environment variables**.

To find the environment variables that you'll need to set for your app:

1. Run your app in development mode
1. Visit the [settings page](http://localhost:3000/settings)
1. Open the deployment panel, and select your deployment target

<Alert status=info>

For details on how to use different data for different environments, see [Environments](/deployment/environments).

</Alert>


---
evidence/sites/docs/pages/deployment/evidence-cloud/index.md
---
---
sidebar_position: 2
hide_table_of_contents: false
title: Evidence Cloud
description: Evidence Cloud is a hosting service that allows you to securely host Evidence apps. It's the easiest way to host an Evidence app, without having to worry about maintaining your own infrastructure.
---

## What is Evidence Cloud?

Evidence Cloud is our hosting service that allows you to securely host Evidence apps.

It's the easiest way to host an Evidence app, without having to worry about maintaining your own infrastructure.

### Key Features

- **Easy to set up:** Deploy in 5 minutes without configuring any infrastructure.
- **Secure:** Manage access for users in your team.
- **Organizational domain:** Host your app at `[organisation].evidence.app`.
- **Scheduled refreshes:** Daily (or more frequent) data updates to your app.
- **Re-build on push:** Merge to your target branch to rebuild your app.

## Sign Up

Evidence Cloud is now generally available. You can sign up below.

<LinkButton url="https://evidence.app"> Sign Up </LinkButton>

<br/>
<br/>

## How do I set up Evidence Cloud

Setting up Evidence Cloud takes less than 5 minutes.

1. Go to [evidence.app](https://evidence.app) and sign in with GitHub
1. Choose an option to get started:
   1. **If you have an existing app:** click `Deploy Evidence Project`
   1. **If you don't have a app yet**, select `Create New Project from Template`, then return to [evidence.app](https://evidence.app) after creating your template app in GitHub
1. Enter your deployment details, including the GitHub repo you want to use, and the domain you want to deploy it to
1. Add your credentials, either from your local app or from the template
1. Click `Deploy your project`


## Frequently Asked Questions

### Features


<Details title="What causes my data to update?">

- Pushes to your target branch.
- Clicking the `Redeploy` button in the UI.
- You can set up a regularly scheduled refresh on some of our plans.

</Details>

<Details title="How frequently does Evidence Cloud refresh my data?">
You can set up data refreshes as regularly as you need on the Team and Enterprise plans.
</Details>

<Details title="How does authentication work for my private app?">

    Each viewer account is provided with a unique login to access the app. You can manage viewers in the Evidence Cloud UI.
</Details>

<Details title="Can I create a public Evidence Cloud site?">

    Yes! Our Free plan allows you to create public sites.
</Details>

<Details title="How do I set up development previews?">

Alongside your `main` branch, set up a secondary app targeting a development branch (e.g. `dev`) whenever you merge changes into `dev`, you will get a preview. When you are ready to release changes, merge these into `main`.

You can set up different database credentials for development deployments, which allows 
you to use development data before it is in your production db.

</Details>



### Pricing

<Details title="Is Evidence Cloud free?">

Evidence Cloud's Free tier offers unlimited public apps. For authentication and scheduled updates, [paid plans](https://evidence.dev/cloud) are available.

</Details>

<Details title="How do I get onto a Team or Enterprise plan?">

Email us: [archie@evidence.dev](mailto:archie@evidence.dev), or reach out on Evidence Cloud chat. 
</Details>


### Account Management

<Details title="How do I add a new developer to my Evidence app?">

Give them access to your [Github repository](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/managing-an-individuals-access-to-an-organization-repository). All Evidence Cloud plans come with unlimited developer accounts.

</Details>

<Details title="Which git providers can I use with Evidence Cloud?">

We support GitHub by default. If your team needs another git provider, reach out on [Slack](https://slack.evidence.dev).

</Details>

### Troubleshooting

<Details title="I've successfully deployed the template app. How do I edit it?">

Clone the git repository to your local machine (the repo URL is shown in the cloud UI), make edits to the code and/or database settings, and merge the edits to your target branch.

</Details>


<Details title="How long do builds take?">

Most builds will be completed in under 2 minutes, and you can track progress in the build logs. The initial deployment may take longer as we provision your account.

</Details>


<Details title="When can I expect build failures?">

Evidence will not deploy sites with errors to prevent users from seeing broken reports. Usually, this is caused by an error with your code.  Enter `npm run build` in your editor to test if the build succeeds locally. If you are still having issues, reach out on [Slack](https://slack.evidence.dev).

</Details>

<Details title="How can I prevent queries or components with errors from making it to my site?">

As a default, a failed chart or query will not throw an error. To prevent failed charts or queries from building successfully, edit the build command in `package.json` to `"build": "evidence build:strict"`.

</Details>

---
evidence/sites/docs/pages/deployment/environments/index.md
---
---
sidebar_position: 7
hide_table_of_contents: false
title: Environments
---

## What are environments?

In software engineering, _environments_ are used to develop and test code without impacting end users.

> “Production” (prod) refers to the environment that end users interact with, while “development” (dev) is the environment engineers write code in. This allows engineers to work iteratively when writing and testing new code in development, and once they are confident in these changes, deploy their code to production.

Data warehouses often also use separate environments – the _production_ environment refers to the data end users can access.

## Typical data environment configurations

There are three typical ways that data teams separate their data environments:

1. **Separate databases** _(Bigquery - projects)_: Each environment has its own database, but with the same schemas and tables in each database. This is the most common way to separate environments.
2. **Separate schemas** _(Bigquery - datasets)_: Each environment has its own schema, with schemas hosted on the same database.
3. **Separate accounts** _(Bigquery - clusters/instances/organizations)_: Each environment has its own account. This is less common.

## Setting up Evidence to use different environments

You can configure both your dev and prod environments using [environment variables](/reference/cli#environment-variables). Using `.env` files at the project root is supported.

### Dev environment

Add your dev database credentials for your dev environment via the **settings page**. If you are running Evidence locally, typically at [http://localhost:3000/settings](http://localhost:3000/settings).

### Prod environment

Add your prod database credentials as environment variables. The specific instructions depend on how you are deploying Evidence. Instructions can be be found in the deployment section of the settings page of your app running locally.

<Alert status=info>

If you are using separate schemas, you will need to add the optional `schema` parameter to your credentials in dev, and an environment variable in prod. This is only currently supported for Postgres.

</Alert>


---
evidence/sites/docs/pages/deployment/vercel/index.md
---
---
sidebar_position: 4
hide_table_of_contents: false
title: Vercel
description: Deploy a public app to Vercel for free or a password-protected app with the pro plan.
---


<Alert status=danger>

**Missing DuckDB Dependencies**

Note that because of missing dependencies, Vercel cannot be used with DuckDB sources. Consider [Evidence Cloud](/deployment/evidence-cloud) or [Netlify](/deployment/netlify) as an alternative if you are using DuckDB. 

</Alert>

Vercel lets you host a public version of your app for free, or you can create and host a password-protected version with Vercel's $150/month pro plan. [Netlify](/deployment/netlify) offers the same option for $15/month.

## Deploy to Vercel

1. Run your app in development mode
1. Visit the [settings page](http://localhost:3000/settings)
1. Open the deployment panel, and select 'Vercel', then follow the provided instructions

## Optional: Set a site-wide password for your app (Requires Paid Plan)

Follow the directions provided by Vercel to set up a password for your site:
https://vercel.com/blog/protecting-deployments

## Optional: Schedule updates using Deploy Hooks

If you want your site to update on a specific schedule, you can use GitHub Actions (or another similar service) to schedule regular calls to a [Vercel deploy hook](https://vercel.com/docs/concepts/git/deploy-hooks).

1. Create a [Vercel deploy hook](https://vercel.com/docs/concepts/git/deploy-hooks).
   This will give you a URL that GitHub will use to trigger builds

2. Add `VERCEL_DEPLOY_HOOK` to your Github Repo's Secrets

- In your GitHub repo, go to Settings > Secrets > Actions and click **New repository secret** and create a secret, `VERCEL_DEPLOY_HOOK`, with the URL from step 1.

3. Add a schedule file to your project

- Create a new directory in your project called `.github`
- Within that directory, create another called `workflows`
- Add a new file in `.github/workflows` called `main.yml`

4. Add the following text to the `main.yml` file you just created. Be sure that the indentation in your `main.yml` matches the below.

```yaml
name: Schedule Vercel Deploy
on:
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * *' # Once a day around 6am ET (10am UTC)
jobs:
  build:
    name: Request Vercel Webhook
    runs-on: ubuntu-latest
    steps:
      - name: POST to Deploy Hook
        env:
          BUILD_HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK }}
        run: curl -X POST -d {} $BUILD_HOOK
```

5. See your GitHub Actions run in the **Actions** tab of your GitHub repo


---
evidence/sites/docs/pages/deployment/rendering-modes/index.md
---
---
sidebar_position: 5
hide_table_of_contents: false
title: Rendering Modes
---

Evidence supports two rendering modes:

1. Static Site Generation (Default)
2. Single Page App (SPA)


```sql rendering_modes
select 'Content Rendering' as rendering_mode, 'Pre-rendered at build time' as static_site_generation, 'Rendered on the client side' as single_page_app, 1 as row_number union all
select 'Page Generation', 'Each page generated ahead of time', 'Only one HTML file generated', 2 union all
select 'Built Output', 'All pages have corresponding HTML files', 'Pages rendered on the fly using JavaScript', 3 union all
select 'Build Duration', 'Slower due to building all pages', 'Fast as only one page is built', 4 union all
select 'Performance', 'Fast page loads', 'Slower page loads', 5 union all
select 'SEO', 'Rich SEO for all pages', 'Generic SEO for your whole app', 6
order by row_number
```

## Choosing a Rendering Mode

You should generally only use the SPA rendering mode if one of the following is true:
- **You have a large number of pages**, >1000+ is a good rule of thumb
- **You want to update your data frequently**, so short build times are desirable
- **Your data sources are large** (in which case you may want to combine this with Evidence's Cloud Execution Engine)

## Comparison

<DataTable data={rendering_modes} wrapTitles>
    <Column id=rendering_mode />
    <Column id=static_site_generation wrap/>
    <Column id=single_page_app wrap/>
</DataTable>

## Enabling SPA Mode

<Alert status=warning>
    Note: To deploy an SPA mode app on Evidence Cloud, you currently need to deploy on a private site, using the Cloud Execution Engine.
</Alert>

SPA rendering mode is disabled by default.

To enable SPA rendering mode:

1. Update the build and preview scripts in `package.json`:

```json
"build": "VITE_EVIDENCE_SPA=true evidence build",
"preview": "VITE_EVIDENCE_SPA=true evidence preview",
```

2. Add svelte adapter-static as a dev dependency:

```bash
npm install --save-dev @sveltejs/adapter-static
```

3. Add a `svelte.config.js` file to the root of your project containing the following:

```javascript
import adapter from '@sveltejs/adapter-static';

/** @type {import("@sveltejs/kit").Config} */
export default {
    kit: {
        adapter: adapter({
            fallback: 'index.html'
        })
    },
};
```

4. If self-hosting an SPA it is important to redirect all URLs to index.html. For example in an NGINX server block you would put:

```code
root /path/to/your/project/build/;

location / {
    try_files $uri $uri/ $uri.html /index.html;
}
```





---
evidence/sites/docs/pages/deployment/base-paths/index.md
---
---
title: Base Paths
sidebar_position: 6
description: Evidence supports serving your app from a subdirectory, for example https://acme.com/analytics.
---

Evidence supports serving your app from a subdirectory. For example, you can serve your app from `https://acme.com/analytics`. 

This can be useful for embedded reporting, where you want to use the root domain for your main app and serve Evidence reports from a subdirectory.

## Configuring the Base Path

Add the following to `evidence.config.yaml` at the project root:

```yaml
deployment:
  basePath: /my-base-path
```

**All links in your markdown files will be automatically adjusted** to include the base path.

The base path must:
- Start with a `/`
- **Not** end with a `/`
- Be a valid URL path

Your `pages/index.md` file will be served from `https://my-domain.com/my-base-path`, and other pages will be served relative to this path.

## Configuring the Build Directory

Evidence builds your app to the `build` directory, rather than to `build/my-base-path`.

To modify the build directory, set the `EVIDENCE_BUILD_DIR` environment variable:

```json
  "build": "EVIDENCE_BUILD_DIR=./build/my-base-path evidence build"
```

This is required to use the `npm run preview` command, or else the preview will not run correctly.

## Custom Components

[Custom components](/components/custom-components) links are **not automatically adjusted** to include the base path. Links should be adjusted using the `addBasePath` utility function, which adjusts relative links to include the base path.

For example:

`CustomLink.svelte`:
```svelte
&lt;script&gt;
  export let link;
  import { addBasePath } from '@evidence-dev/sdk/utils/svelte';
&lt;/script&gt;

<a href={addBasePath(link)}>My Component</a>
```

## Evidence Cloud

Deploying apps with custom base paths is supported in Evidence Cloud's [Enterprise plan](https://evidence.dev/cloud).

---
evidence/sites/docs/pages/deployment/netlify/index.md
---
---
sidebar_position: 3
hide_table_of_contents: false
title: Netlify
description: Deploy your app to Netlify, which offers free hosting for public apps and password-protected hosting for paid plans.
---

<Alert status=warning>

All URLs on Netlify are converted to lowercase. This can cause issues if you're using `{params.my_param}` to filter data in your markdown. It's recommended to use lowercase any time you're using a URL parameter to filter data, like this:

```sql
SELECT * FROM source_name.my_table 
WHERE LOWER(my_column) = LOWER('${params.my_param}')
```

</Alert>

Netlify lets you host a public version of your app for free, or you can create and host a password-protected version with Netlify's $15/month plan.

## Deploy to Netlify

1. Run your app in development mode
1. Visit the [settings page](http://localhost:3000/settings)
1. Open the deployment panel, and select 'netlify', then follow the provided instructions

## Optional: Set a site-wide password for your app (Requires Paid Plan)

Follow the directions provided by Netlify to set up a password for your site:
https://docs.netlify.com/visitor-access/password-protection/

## Optional: Schedule updates using Build Hooks

If you want your site to update on a regular schedule, you can use GitHub Actions (or another similar service) to schedule regular calls to a [Netlify build hook](https://docs.netlify.com/configure-builds/build-hooks/).

1. Create a [Netlify build hook](https://docs.netlify.com/configure-builds/build-hooks/) in **Site settings > Build & deploy > Continuous deployment > Build hooks**
   ![netlify-add-build-hook](/img/netlify-add-build-hook.png)
   This will give you a URL that GitHub will use to trigger builds

2. Add `NETLIFY_BUILD_HOOK` to your Github Repo's Secrets

- In your GitHub repo, go to Settings > Secrets > Actions and click **New repository secret**<br/><br/>
  ![netlify-github-new-secret](/img/netlify-github-new-secret.png)
  ![netlify-github-secret](/img/netlify-github-secret.png)

3. Add a schedule file to your project

- Create a new directory in your project called `.github`
- Within that directory, create another called `workflows`
- Add a new file in `.github/workflows` called `main.yml`

4. Add the following text to the `main.yml` file you just created. Be sure that the spacing and indentation is exactly as presented here, as it will impact whether the action runs correctly

```yaml
name: Schedule Netlify Build
on:
  workflow_dispatch:
  schedule:
    - cron: '0 10 * * *' # Once a day around 6am ET (10am UTC)
jobs:
  build:
    name: Request Netlify Webhook
    runs-on: ubuntu-latest
    steps:
      - name: POST to Build Hook
        env:
          BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
        run: curl -X POST -d {} $BUILD_HOOK
```

5. See your GitHub Actions run in the **Actions** tab of your GitHub repo


---
evidence/sites/docs/pages/install-evidence/index.md
---
---
sidebar_position: 3
hide_table_of_contents: false
title: Install Evidence
description: Install Evidence with the VSCode Extension, from the command line, alongside dbt, or using Codespaces.
---

<Alert status=success>

The easiest way to get started with Evidence is to use the [VSCode Extension](vscode:extension/Evidence.evidence-vscode).

</Alert>

## VSCode Extension

1. Install Evidence from the VSCode Marketplace
2. Open the Command Palette (`Ctrl/Cmd + Shift + P`) and enter `Evidence: New Evidence Project`
3. Click `Start Evidence` in the bottom status bar
   - This will install required dependencies and start the Evidence server
   - You should see a browser window open automatically with your app preview
   - On Windows, this step can take a couple of minutes the first time
4. Make changes to a markdown file and **save the file** to see the updates in your browser window


The template app running in your browser contains a tutorial on how to use Evidence.

<LinkButton url="https://marketplace.visualstudio.com/items?itemName=Evidence.evidence-vscode">Install VSCode Extension</LinkButton>

<br/>
<br/>

If you run into any issues, [reach out in Slack.](https://slack.evidence.dev)

## Other Options

<Tabs>

<Tab value="standalone" label="Command Line" default>

```shell
npx degit evidence-dev/template my-project
cd my-project
npm install
npm run sources
npm run dev
```

</Tab>

<Tab value="dbt" label="With dbt">

```shell
cd path/to/your/dbt/project
npx degit evidence-dev/template reports
npm --prefix ./reports install
npm --prefix ./reports run sources
npm --prefix ./reports run dev
```

You can install Evidence inside your dbt project, inside a folder called `reports`, to create a [monorepo](https://github.com/archiewood/analytics_monorepo).

This allows changes across your modelling layer (in `/models`) and your reporting layer (in `reports`) in the same commits.

This currently needs to be done from the terminal, rather than from the dbt Cloud UI.

</Tab>

<Tab value="codespaces" label="Codespaces">

<LinkButton url='https://github.com/codespaces/new?machine=standardLinux32gb&repo=399252557&ref=main&geo=UsEast'>
   Create Evidence Codespace
</LinkButton>



<br/><br/>

**Note:** Codespaces is much faster on the Desktop app. After the Codespace has booted, select the hamburger menu &rarr; Open in VS Code Desktop.

</Tab>
</Tabs>

## System Requirements

See [system requirements page](/guides/system-requirements).

## Updating Evidence

See [updating your app](/guides/updating-your-app).


---
